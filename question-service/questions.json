{
    "1": {
        "title": "Two Sum",
        "title_slug": "two-sum",
        "link": "https://leetcode.com/problems/two-sum",
        "difficulty": "Easy",
        "similar_topics": [
            "Array",
            "Hash Table"
        ],
        "question": "Given an array of integers nums\u00a0and an integer target, return indices of the two numbers such that they add up to target.\nYou may assume that each input would have exactly one solution, and you may not use the same element twice.\nYou can return the answer in any order.\n\u00a0\nExample 1:\nInput: nums = [2,7,11,15], target = 9\nOutput: [0,1]\nExplanation: Because nums[0] + nums[1] == 9, we return [0, 1].\n\nExample 2:\nInput: nums = [3,2,4], target = 6\nOutput: [1,2]\n\nExample 3:\nInput: nums = [3,3], target = 6\nOutput: [0,1]\n\n\u00a0\nConstraints:\n\n2 <= nums.length <= 104\n-109 <= nums[i] <= 109\n-109 <= target <= 109\nOnly one valid answer exists.\n\n\u00a0\nFollow-up:\u00a0Can you come up with an algorithm that is less than\u00a0O(n2)\u00a0time complexity?",
        "images": {
            "image": [],
            "previous_element": []
        }
    },
    "2": {
        "title": "Add Two Numbers",
        "title_slug": "add-two-numbers",
        "link": "https://leetcode.com/problems/add-two-numbers",
        "difficulty": "Medium",
        "similar_topics": [
            "Linked List",
            "Math",
            "Recursion"
        ],
        "question": "You are given two non-empty linked lists representing two non-negative integers. The digits are stored in reverse order, and each of their nodes contains a single digit. Add the two numbers and return the sum\u00a0as a linked list.\nYou may assume the two numbers do not contain any leading zero, except the number 0 itself.\n\u00a0\nExample 1:\n\nInput: l1 = [2,4,3], l2 = [5,6,4]\nOutput: [7,0,8]\nExplanation: 342 + 465 = 807.\n\nExample 2:\nInput: l1 = [0], l2 = [0]\nOutput: [0]\n\nExample 3:\nInput: l1 = [9,9,9,9,9,9,9], l2 = [9,9,9,9]\nOutput: [8,9,9,9,0,0,0,1]\n\n\u00a0\nConstraints:\n\nThe number of nodes in each linked list is in the range [1, 100].\n0 <= Node.val <= 9\nIt is guaranteed that the list represents a number that does not have leading zeros.\n\n",
        "images": {
            "image": [
                "https://assets.leetcode.com/uploads/2020/10/02/addtwonumber1.jpg"
            ],
            "previous_element": [
                "Example 1:"
            ]
        }
    },
    "3": {
        "title": "Longest Substring Without Repeating Characters",
        "title_slug": "longest-substring-without-repeating-characters",
        "link": "https://leetcode.com/problems/longest-substring-without-repeating-characters",
        "difficulty": "Medium",
        "similar_topics": [
            "Hash Table",
            "String",
            "Sliding Window"
        ],
        "question": "Given a string s, find the length of the longest substring without repeating characters.\n\u00a0\nExample 1:\nInput: s = \"abcabcbb\"\nOutput: 3\nExplanation: The answer is \"abc\", with the length of 3.\n\nExample 2:\nInput: s = \"bbbbb\"\nOutput: 1\nExplanation: The answer is \"b\", with the length of 1.\n\nExample 3:\nInput: s = \"pwwkew\"\nOutput: 3\nExplanation: The answer is \"wke\", with the length of 3.\nNotice that the answer must be a substring, \"pwke\" is a subsequence and not a substring.\n\n\u00a0\nConstraints:\n\n0 <= s.length <= 5 * 104\ns consists of English letters, digits, symbols and spaces.\n\n",
        "images": {
            "image": [],
            "previous_element": []
        }
    },
    "4": {
        "title": "Median of Two Sorted Arrays",
        "title_slug": "median-of-two-sorted-arrays",
        "link": "https://leetcode.com/problems/median-of-two-sorted-arrays",
        "difficulty": "Hard",
        "similar_topics": [
            "Array",
            "Binary Search",
            "Divide and Conquer"
        ],
        "question": "Given two sorted arrays nums1 and nums2 of size m and n respectively, return the median of the two sorted arrays.\nThe overall run time complexity should be O(log (m+n)).\n\u00a0\nExample 1:\nInput: nums1 = [1,3], nums2 = [2]\nOutput: 2.00000\nExplanation: merged array = [1,2,3] and median is 2.\n\nExample 2:\nInput: nums1 = [1,2], nums2 = [3,4]\nOutput: 2.50000\nExplanation: merged array = [1,2,3,4] and median is (2 + 3) / 2 = 2.5.\n\n\u00a0\nConstraints:\n\nnums1.length == m\nnums2.length == n\n0 <= m <= 1000\n0 <= n <= 1000\n1 <= m + n <= 2000\n-106 <= nums1[i], nums2[i] <= 106\n\n",
        "images": {
            "image": [],
            "previous_element": []
        }
    },
    "5": {
        "title": "Longest Palindromic Substring",
        "title_slug": "longest-palindromic-substring",
        "link": "https://leetcode.com/problems/longest-palindromic-substring",
        "difficulty": "Medium",
        "similar_topics": [
            "String",
            "Dynamic Programming"
        ],
        "question": "Given a string s, return the longest palindromic substring in s.\nA string is called a palindrome string if the reverse of that string is the same as the original string.\n\u00a0\nExample 1:\nInput: s = \"babad\"\nOutput: \"bab\"\nExplanation: \"aba\" is also a valid answer.\n\nExample 2:\nInput: s = \"cbbd\"\nOutput: \"bb\"\n\n\u00a0\nConstraints:\n\n1 <= s.length <= 1000\ns consist of only digits and English letters.\n\n",
        "images": {
            "image": [],
            "previous_element": []
        }
    },
    "6": {
        "title": "Zigzag Conversion",
        "title_slug": "zigzag-conversion",
        "link": "https://leetcode.com/problems/zigzag-conversion",
        "difficulty": "Medium",
        "similar_topics": [
            "String"
        ],
        "question": "The string \"PAYPALISHIRING\" is written in a zigzag pattern on a given number of rows like this: (you may want to display this pattern in a fixed font for better legibility)\nP   A   H   N\nA P L S I I G\nY   I   R\n\nAnd then read line by line: \"PAHNAPLSIIGYIR\"\nWrite the code that will take a string and make this conversion given a number of rows:\nstring convert(string s, int numRows);\n\n\u00a0\nExample 1:\nInput: s = \"PAYPALISHIRING\", numRows = 3\nOutput: \"PAHNAPLSIIGYIR\"\n\nExample 2:\nInput: s = \"PAYPALISHIRING\", numRows = 4\nOutput: \"PINALSIGYAHRPI\"\nExplanation:\nP     I    N\nA   L S  I G\nY A   H R\nP     I\n\nExample 3:\nInput: s = \"A\", numRows = 1\nOutput: \"A\"\n\n\u00a0\nConstraints:\n\n1 <= s.length <= 1000\ns consists of English letters (lower-case and upper-case), ',' and '.'.\n1 <= numRows <= 1000\n\n",
        "images": {
            "image": [],
            "previous_element": []
        }
    },
    "7": {
        "title": "Reverse Integer",
        "title_slug": "reverse-integer",
        "link": "https://leetcode.com/problems/reverse-integer",
        "difficulty": "Medium",
        "similar_topics": [
            "Math"
        ],
        "question": "Given a signed 32-bit integer x, return x with its digits reversed. If reversing x causes the value to go outside the signed 32-bit integer range [-231, 231 - 1], then return 0.\nAssume the environment does not allow you to store 64-bit integers (signed or unsigned).\n\u00a0\nExample 1:\nInput: x = 123\nOutput: 321\n\nExample 2:\nInput: x = -123\nOutput: -321\n\nExample 3:\nInput: x = 120\nOutput: 21\n\n\u00a0\nConstraints:\n\n-231 <= x <= 231 - 1\n\n",
        "images": {
            "image": [],
            "previous_element": []
        }
    },
    "8": {
        "title": "String to Integer (atoi)",
        "title_slug": "string-to-integer-(atoi)",
        "link": "https://leetcode.com/problems/string-to-integer-(atoi)",
        "difficulty": "Medium",
        "similar_topics": [
            "String"
        ],
        "question": "Implement the myAtoi(string s) function, which converts a string to a 32-bit signed integer (similar to C/C++'s atoi function).\nThe algorithm for myAtoi(string s) is as follows:\n\nRead in and ignore any leading whitespace.\nCheck if the next character (if not already at the end of the string) is '-' or '+'. Read this character in if it is either. This determines if the final result is negative or positive respectively. Assume the result is positive if neither is present.\nRead in next the characters until the next non-digit character or the end of the input is reached. The rest of the string is ignored.\nConvert these digits into an integer (i.e. \"123\" -> 123, \"0032\" -> 32). If no digits were read, then the integer is 0. Change the sign as necessary (from step 2).\nIf the integer is out of the 32-bit signed integer range [-231, 231 - 1], then clamp the integer so that it remains in the range. Specifically, integers less than -231 should be clamped to -231, and integers greater than 231 - 1 should be clamped to 231 - 1.\nReturn the integer as the final result.\n\nNote:\n\nOnly the space character ' ' is considered a whitespace character.\nDo not ignore any characters other than the leading whitespace or the rest of the string after the digits.\n\n\u00a0\nExample 1:\nInput: s = \"42\"\nOutput: 42\nExplanation: The underlined characters are what is read in, the caret is the current reader position.\nStep 1: \"42\" (no characters read because there is no leading whitespace)\n         ^\nStep 2: \"42\" (no characters read because there is neither a '-' nor '+')\n         ^\nStep 3: \"42\" (\"42\" is read in)\n           ^\nThe parsed integer is 42.\nSince 42 is in the range [-231, 231 - 1], the final result is 42.\n\nExample 2:\nInput: s = \"   -42\"\nOutput: -42\nExplanation:\nStep 1: \"   -42\" (leading whitespace is read and ignored)\n            ^\nStep 2: \"   -42\" ('-' is read, so the result should be negative)\n             ^\nStep 3: \"   -42\" (\"42\" is read in)\n               ^\nThe parsed integer is -42.\nSince -42 is in the range [-231, 231 - 1], the final result is -42.\n\nExample 3:\nInput: s = \"4193 with words\"\nOutput: 4193\nExplanation:\nStep 1: \"4193 with words\" (no characters read because there is no leading whitespace)\n         ^\nStep 2: \"4193 with words\" (no characters read because there is neither a '-' nor '+')\n         ^\nStep 3: \"4193 with words\" (\"4193\" is read in; reading stops because the next character is a non-digit)\n             ^\nThe parsed integer is 4193.\nSince 4193 is in the range [-231, 231 - 1], the final result is 4193.\n\n\u00a0\nConstraints:\n\n0 <= s.length <= 200\ns consists of English letters (lower-case and upper-case), digits (0-9), ' ', '+', '-', and '.'.\n\n",
        "images": {
            "image": [],
            "previous_element": []
        }
    },
    "9": {
        "title": "Palindrome Number",
        "title_slug": "palindrome-number",
        "link": "https://leetcode.com/problems/palindrome-number",
        "difficulty": "Easy",
        "similar_topics": [
            "Math"
        ],
        "question": "Given an integer x, return true if x is palindrome integer.\nAn integer is a palindrome when it reads the same backward as forward.\n\nFor example, 121 is a palindrome while 123 is not.\n\n\u00a0\nExample 1:\nInput: x = 121\nOutput: true\nExplanation: 121 reads as 121 from left to right and from right to left.\n\nExample 2:\nInput: x = -121\nOutput: false\nExplanation: From left to right, it reads -121. From right to left, it becomes 121-. Therefore it is not a palindrome.\n\nExample 3:\nInput: x = 10\nOutput: false\nExplanation: Reads 01 from right to left. Therefore it is not a palindrome.\n\n\u00a0\nConstraints:\n\n-231\u00a0<= x <= 231\u00a0- 1\n\n\u00a0\nFollow up: Could you solve it without converting the integer to a string?",
        "images": {
            "image": [],
            "previous_element": []
        }
    },
    "10": {
        "title": "Regular Expression Matching",
        "title_slug": "regular-expression-matching",
        "link": "https://leetcode.com/problems/regular-expression-matching",
        "difficulty": "Hard",
        "similar_topics": [
            "String",
            "Dynamic Programming",
            "Recursion"
        ],
        "question": "Given an input string s\u00a0and a pattern p, implement regular expression matching with support for '.' and '*' where:\n\n'.' Matches any single character.\u200b\u200b\u200b\u200b\n'*' Matches zero or more of the preceding element.\n\nThe matching should cover the entire input string (not partial).\n\u00a0\nExample 1:\nInput: s = \"aa\", p = \"a\"\nOutput: false\nExplanation: \"a\" does not match the entire string \"aa\".\n\nExample 2:\nInput: s = \"aa\", p = \"a*\"\nOutput: true\nExplanation: '*' means zero or more of the preceding element, 'a'. Therefore, by repeating 'a' once, it becomes \"aa\".\n\nExample 3:\nInput: s = \"ab\", p = \".*\"\nOutput: true\nExplanation: \".*\" means \"zero or more (*) of any character (.)\".\n\n\u00a0\nConstraints:\n\n1 <= s.length\u00a0<= 20\n1 <= p.length\u00a0<= 30\ns contains only lowercase English letters.\np contains only lowercase English letters, '.', and\u00a0'*'.\nIt is guaranteed for each appearance of the character '*', there will be a previous valid character to match.\n\n",
        "images": {
            "image": [],
            "previous_element": []
        }
    },
    "11": {
        "title": "Container With Most Water",
        "title_slug": "container-with-most-water",
        "link": "https://leetcode.com/problems/container-with-most-water",
        "difficulty": "Medium",
        "similar_topics": [
            "Array",
            "Two Pointers",
            "Greedy"
        ],
        "question": "You are given an integer array height of length n. There are n vertical lines drawn such that the two endpoints of the ith line are (i, 0) and (i, height[i]).\nFind two lines that together with the x-axis form a container, such that the container contains the most water.\nReturn the maximum amount of water a container can store.\nNotice that you may not slant the container.\n\u00a0\nExample 1:\n\nInput: height = [1,8,6,2,5,4,8,3,7]\nOutput: 49\nExplanation: The above vertical lines are represented by array [1,8,6,2,5,4,8,3,7]. In this case, the max area of water (blue section) the container can contain is 49.\n\nExample 2:\nInput: height = [1,1]\nOutput: 1\n\n\u00a0\nConstraints:\n\nn == height.length\n2 <= n <= 105\n0 <= height[i] <= 104\n\n",
        "images": {
            "image": [
                "https://s3-lc-upload.s3.amazonaws.com/uploads/2018/07/17/question_11.jpg"
            ],
            "previous_element": [
                "Example 1:"
            ]
        }
    },
    "12": {
        "title": "Integer to Roman",
        "title_slug": "integer-to-roman",
        "link": "https://leetcode.com/problems/integer-to-roman",
        "difficulty": "Medium",
        "similar_topics": [
            "Hash Table",
            "Math",
            "String"
        ],
        "question": "Roman numerals are represented by seven different symbols:\u00a0I, V, X, L, C, D and M.\nSymbol       Value\nI             1\nV             5\nX             10\nL             50\nC             100\nD             500\nM             1000\nFor example,\u00a02 is written as II\u00a0in Roman numeral, just two one's added together. 12 is written as\u00a0XII, which is simply X + II. The number 27 is written as XXVII, which is XX + V + II.\nRoman numerals are usually written largest to smallest from left to right. However, the numeral for four is not IIII. Instead, the number four is written as IV. Because the one is before the five we subtract it making four. The same principle applies to the number nine, which is written as IX. There are six instances where subtraction is used:\n\nI can be placed before V (5) and X (10) to make 4 and 9.\u00a0\nX can be placed before L (50) and C (100) to make 40 and 90.\u00a0\nC can be placed before D (500) and M (1000) to make 400 and 900.\n\nGiven an integer, convert it to a roman numeral.\n\u00a0\nExample 1:\nInput: num = 3\nOutput: \"III\"\nExplanation: 3 is represented as 3 ones.\n\nExample 2:\nInput: num = 58\nOutput: \"LVIII\"\nExplanation: L = 50, V = 5, III = 3.\n\nExample 3:\nInput: num = 1994\nOutput: \"MCMXCIV\"\nExplanation: M = 1000, CM = 900, XC = 90 and IV = 4.\n\n\u00a0\nConstraints:\n\n1 <= num <= 3999\n\n",
        "images": {
            "image": [],
            "previous_element": []
        }
    },
    "13": {
        "title": "Roman to Integer",
        "title_slug": "roman-to-integer",
        "link": "https://leetcode.com/problems/roman-to-integer",
        "difficulty": "Easy",
        "similar_topics": [
            "Hash Table",
            "Math",
            "String"
        ],
        "question": "Roman numerals are represented by seven different symbols:\u00a0I, V, X, L, C, D and M.\nSymbol       Value\nI             1\nV             5\nX             10\nL             50\nC             100\nD             500\nM             1000\nFor example,\u00a02 is written as II\u00a0in Roman numeral, just two ones added together. 12 is written as\u00a0XII, which is simply X + II. The number 27 is written as XXVII, which is XX + V + II.\nRoman numerals are usually written largest to smallest from left to right. However, the numeral for four is not IIII. Instead, the number four is written as IV. Because the one is before the five we subtract it making four. The same principle applies to the number nine, which is written as IX. There are six instances where subtraction is used:\n\nI can be placed before V (5) and X (10) to make 4 and 9.\u00a0\nX can be placed before L (50) and C (100) to make 40 and 90.\u00a0\nC can be placed before D (500) and M (1000) to make 400 and 900.\n\nGiven a roman numeral, convert it to an integer.\n\u00a0\nExample 1:\nInput: s = \"III\"\nOutput: 3\nExplanation: III = 3.\n\nExample 2:\nInput: s = \"LVIII\"\nOutput: 58\nExplanation: L = 50, V= 5, III = 3.\n\nExample 3:\nInput: s = \"MCMXCIV\"\nOutput: 1994\nExplanation: M = 1000, CM = 900, XC = 90 and IV = 4.\n\n\u00a0\nConstraints:\n\n1 <= s.length <= 15\ns contains only\u00a0the characters ('I', 'V', 'X', 'L', 'C', 'D', 'M').\nIt is guaranteed\u00a0that s is a valid roman numeral in the range [1, 3999].\n\n",
        "images": {
            "image": [],
            "previous_element": []
        }
    },
    "14": {
        "title": "Longest Common Prefix",
        "title_slug": "longest-common-prefix",
        "link": "https://leetcode.com/problems/longest-common-prefix",
        "difficulty": "Easy",
        "similar_topics": [
            "String"
        ],
        "question": "Write a function to find the longest common prefix string amongst an array of strings.\nIf there is no common prefix, return an empty string \"\".\n\u00a0\nExample 1:\nInput: strs = [\"flower\",\"flow\",\"flight\"]\nOutput: \"fl\"\n\nExample 2:\nInput: strs = [\"dog\",\"racecar\",\"car\"]\nOutput: \"\"\nExplanation: There is no common prefix among the input strings.\n\n\u00a0\nConstraints:\n\n1 <= strs.length <= 200\n0 <= strs[i].length <= 200\nstrs[i] consists of only lowercase English letters.\n\n",
        "images": {
            "image": [],
            "previous_element": []
        }
    },
    "15": {
        "title": "3Sum",
        "title_slug": "3sum",
        "link": "https://leetcode.com/problems/3sum",
        "difficulty": "Medium",
        "similar_topics": [
            "Array",
            "Two Pointers",
            "Sorting"
        ],
        "question": "Given an integer array nums, return all the triplets [nums[i], nums[j], nums[k]] such that i != j, i != k, and j != k, and nums[i] + nums[j] + nums[k] == 0.\nNotice that the solution set must not contain duplicate triplets.\n\u00a0\nExample 1:\nInput: nums = [-1,0,1,2,-1,-4]\nOutput: [[-1,-1,2],[-1,0,1]]\nExplanation: \nnums[0] + nums[1] + nums[2] = (-1) + 0 + 1 = 0.\nnums[1] + nums[2] + nums[4] = 0 + 1 + (-1) = 0.\nnums[0] + nums[3] + nums[4] = (-1) + 2 + (-1) = 0.\nThe distinct triplets are [-1,0,1] and [-1,-1,2].\nNotice that the order of the output and the order of the triplets does not matter.\n\nExample 2:\nInput: nums = [0,1,1]\nOutput: []\nExplanation: The only possible triplet does not sum up to 0.\n\nExample 3:\nInput: nums = [0,0,0]\nOutput: [[0,0,0]]\nExplanation: The only possible triplet sums up to 0.\n\n\u00a0\nConstraints:\n\n3 <= nums.length <= 3000\n-105 <= nums[i] <= 105\n\n",
        "images": {
            "image": [],
            "previous_element": []
        }
    },
    "16": {
        "title": "3Sum Closest",
        "title_slug": "3sum-closest",
        "link": "https://leetcode.com/problems/3sum-closest",
        "difficulty": "Medium",
        "similar_topics": [
            "Array",
            "Two Pointers",
            "Sorting"
        ],
        "question": "Given an integer array nums of length n and an integer target, find three integers in nums such that the sum is closest to target.\nReturn the sum of the three integers.\nYou may assume that each input would have exactly one solution.\n\u00a0\nExample 1:\nInput: nums = [-1,2,1,-4], target = 1\nOutput: 2\nExplanation: The sum that is closest to the target is 2. (-1 + 2 + 1 = 2).\n\nExample 2:\nInput: nums = [0,0,0], target = 1\nOutput: 0\n\n\u00a0\nConstraints:\n\n3 <= nums.length <= 1000\n-1000 <= nums[i] <= 1000\n-104 <= target <= 104\n\n",
        "images": {
            "image": [],
            "previous_element": []
        }
    },
    "17": {
        "title": "Letter Combinations of a Phone Number",
        "title_slug": "letter-combinations-of-a-phone-number",
        "link": "https://leetcode.com/problems/letter-combinations-of-a-phone-number",
        "difficulty": "Medium",
        "similar_topics": [
            "Hash Table",
            "String",
            "Backtracking"
        ],
        "question": "Given a string containing digits from 2-9 inclusive, return all possible letter combinations that the number could represent. Return the answer in any order.\nA mapping of digits to letters (just like on the telephone buttons) is given below. Note that 1 does not map to any letters.\n\n\u00a0\nExample 1:\nInput: digits = \"23\"\nOutput: [\"ad\",\"ae\",\"af\",\"bd\",\"be\",\"bf\",\"cd\",\"ce\",\"cf\"]\n\nExample 2:\nInput: digits = \"\"\nOutput: []\n\nExample 3:\nInput: digits = \"2\"\nOutput: [\"a\",\"b\",\"c\"]\n\n\u00a0\nConstraints:\n\n0 <= digits.length <= 4\ndigits[i] is a digit in the range ['2', '9'].\n\n",
        "images": {
            "image": [
                "https://assets.leetcode.com/uploads/2022/03/15/1200px-telephone-keypad2svg.png"
            ],
            "previous_element": [
                "A mapping of digits to letters (just like on the telephone buttons) is given below. Note that 1 does not map to any letters."
            ]
        }
    },
    "18": {
        "title": "4Sum",
        "title_slug": "4sum",
        "link": "https://leetcode.com/problems/4sum",
        "difficulty": "Medium",
        "similar_topics": [
            "Array",
            "Two Pointers",
            "Sorting"
        ],
        "question": "Given an array nums of n integers, return an array of all the unique quadruplets [nums[a], nums[b], nums[c], nums[d]] such that:\n\n0 <= a, b, c, d\u00a0< n\na, b, c, and d are distinct.\nnums[a] + nums[b] + nums[c] + nums[d] == target\n\nYou may return the answer in any order.\n\u00a0\nExample 1:\nInput: nums = [1,0,-1,0,-2,2], target = 0\nOutput: [[-2,-1,1,2],[-2,0,0,2],[-1,0,0,1]]\n\nExample 2:\nInput: nums = [2,2,2,2,2], target = 8\nOutput: [[2,2,2,2]]\n\n\u00a0\nConstraints:\n\n1 <= nums.length <= 200\n-109 <= nums[i] <= 109\n-109 <= target <= 109\n\n",
        "images": {
            "image": [],
            "previous_element": []
        }
    },
    "19": {
        "title": "Remove Nth Node From End of List",
        "title_slug": "remove-nth-node-from-end-of-list",
        "link": "https://leetcode.com/problems/remove-nth-node-from-end-of-list",
        "difficulty": "Medium",
        "similar_topics": [
            "Linked List",
            "Two Pointers"
        ],
        "question": "Given the head of a linked list, remove the nth node from the end of the list and return its head.\n\u00a0\nExample 1:\n\nInput: head = [1,2,3,4,5], n = 2\nOutput: [1,2,3,5]\n\nExample 2:\nInput: head = [1], n = 1\nOutput: []\n\nExample 3:\nInput: head = [1,2], n = 1\nOutput: [1]\n\n\u00a0\nConstraints:\n\nThe number of nodes in the list is sz.\n1 <= sz <= 30\n0 <= Node.val <= 100\n1 <= n <= sz\n\n\u00a0\nFollow up: Could you do this in one pass?\n",
        "images": {
            "image": [
                "https://assets.leetcode.com/uploads/2020/10/03/remove_ex1.jpg"
            ],
            "previous_element": [
                "Example 1:"
            ]
        }
    },
    "20": {
        "title": "Valid Parentheses",
        "title_slug": "valid-parentheses",
        "link": "https://leetcode.com/problems/valid-parentheses",
        "difficulty": "Easy",
        "similar_topics": [
            "String",
            "Stack"
        ],
        "question": "Given a string s containing just the characters '(', ')', '{', '}', '[' and ']', determine if the input string is valid.\nAn input string is valid if:\n\nOpen brackets must be closed by the same type of brackets.\nOpen brackets must be closed in the correct order.\nEvery close bracket has a corresponding open bracket of the same type.\n\n\u00a0\nExample 1:\nInput: s = \"()\"\nOutput: true\n\nExample 2:\nInput: s = \"()[]{}\"\nOutput: true\n\nExample 3:\nInput: s = \"(]\"\nOutput: false\n\n\u00a0\nConstraints:\n\n1 <= s.length <= 104\ns consists of parentheses only '()[]{}'.\n\n",
        "images": {
            "image": [],
            "previous_element": []
        }
    },
    "21": {
        "title": "Merge Two Sorted Lists",
        "title_slug": "merge-two-sorted-lists",
        "link": "https://leetcode.com/problems/merge-two-sorted-lists",
        "difficulty": "Easy",
        "similar_topics": [
            "Linked List",
            "Recursion"
        ],
        "question": "You are given the heads of two sorted linked lists list1 and list2.\nMerge the two lists in a one sorted list. The list should be made by splicing together the nodes of the first two lists.\nReturn the head of the merged linked list.\n\u00a0\nExample 1:\n\nInput: list1 = [1,2,4], list2 = [1,3,4]\nOutput: [1,1,2,3,4,4]\n\nExample 2:\nInput: list1 = [], list2 = []\nOutput: []\n\nExample 3:\nInput: list1 = [], list2 = [0]\nOutput: [0]\n\n\u00a0\nConstraints:\n\nThe number of nodes in both lists is in the range [0, 50].\n-100 <= Node.val <= 100\nBoth list1 and list2 are sorted in non-decreasing order.\n\n",
        "images": {
            "image": [
                "https://assets.leetcode.com/uploads/2020/10/03/merge_ex1.jpg"
            ],
            "previous_element": [
                "Example 1:"
            ]
        }
    },
    "22": {
        "title": "Generate Parentheses",
        "title_slug": "generate-parentheses",
        "link": "https://leetcode.com/problems/generate-parentheses",
        "difficulty": "Medium",
        "similar_topics": [
            "String",
            "Dynamic Programming",
            "Backtracking"
        ],
        "question": "Given n pairs of parentheses, write a function to generate all combinations of well-formed parentheses.\n\u00a0\nExample 1:\nInput: n = 3\nOutput: [\"((()))\",\"(()())\",\"(())()\",\"()(())\",\"()()()\"]\nExample 2:\nInput: n = 1\nOutput: [\"()\"]\n\n\u00a0\nConstraints:\n\n1 <= n <= 8\n\n",
        "images": {
            "image": [],
            "previous_element": []
        }
    },
    "23": {
        "title": "Merge k Sorted Lists",
        "title_slug": "merge-k-sorted-lists",
        "link": "https://leetcode.com/problems/merge-k-sorted-lists",
        "difficulty": "Hard",
        "similar_topics": [
            "Linked List",
            "Divide and Conquer",
            "Heap (Priority Queue)",
            "Merge Sort"
        ],
        "question": "You are given an array of k linked-lists lists, each linked-list is sorted in ascending order.\nMerge all the linked-lists into one sorted linked-list and return it.\n\u00a0\nExample 1:\nInput: lists = [[1,4,5],[1,3,4],[2,6]]\nOutput: [1,1,2,3,4,4,5,6]\nExplanation: The linked-lists are:\n[\n  1->4->5,\n  1->3->4,\n  2->6\n]\nmerging them into one sorted list:\n1->1->2->3->4->4->5->6\n\nExample 2:\nInput: lists = []\nOutput: []\n\nExample 3:\nInput: lists = [[]]\nOutput: []\n\n\u00a0\nConstraints:\n\nk == lists.length\n0 <= k <= 104\n0 <= lists[i].length <= 500\n-104 <= lists[i][j] <= 104\nlists[i] is sorted in ascending order.\nThe sum of lists[i].length will not exceed 104.\n\n",
        "images": {
            "image": [],
            "previous_element": []
        }
    },
    "24": {
        "title": "Swap Nodes in Pairs",
        "title_slug": "swap-nodes-in-pairs",
        "link": "https://leetcode.com/problems/swap-nodes-in-pairs",
        "difficulty": "Medium",
        "similar_topics": [
            "Linked List",
            "Recursion"
        ],
        "question": "Given a\u00a0linked list, swap every two adjacent nodes and return its head. You must solve the problem without\u00a0modifying the values in the list's nodes (i.e., only nodes themselves may be changed.)\n\u00a0\nExample 1:\n\nInput: head = [1,2,3,4]\nOutput: [2,1,4,3]\n\nExample 2:\nInput: head = []\nOutput: []\n\nExample 3:\nInput: head = [1]\nOutput: [1]\n\n\u00a0\nConstraints:\n\nThe number of nodes in the\u00a0list\u00a0is in the range [0, 100].\n0 <= Node.val <= 100\n\n",
        "images": {
            "image": [
                "https://assets.leetcode.com/uploads/2020/10/03/swap_ex1.jpg"
            ],
            "previous_element": [
                "Example 1:"
            ]
        }
    },
    "25": {
        "title": "Reverse Nodes in k-Group",
        "title_slug": "reverse-nodes-in-k-group",
        "link": "https://leetcode.com/problems/reverse-nodes-in-k-group",
        "difficulty": "Hard",
        "similar_topics": [
            "Linked List",
            "Recursion"
        ],
        "question": "Given the head of a linked list, reverse the nodes of the list k at a time, and return the modified list.\nk is a positive integer and is less than or equal to the length of the linked list. If the number of nodes is not a multiple of k then left-out nodes, in the end, should remain as it is.\nYou may not alter the values in the list's nodes, only nodes themselves may be changed.\n\u00a0\nExample 1:\n\nInput: head = [1,2,3,4,5], k = 2\nOutput: [2,1,4,3,5]\n\nExample 2:\n\nInput: head = [1,2,3,4,5], k = 3\nOutput: [3,2,1,4,5]\n\n\u00a0\nConstraints:\n\nThe number of nodes in the list is n.\n1 <= k <= n <= 5000\n0 <= Node.val <= 1000\n\n\u00a0\nFollow-up: Can you solve the problem in O(1) extra memory space?\n",
        "images": {
            "image": [
                "https://assets.leetcode.com/uploads/2020/10/03/reverse_ex1.jpg",
                "https://assets.leetcode.com/uploads/2020/10/03/reverse_ex2.jpg"
            ],
            "previous_element": [
                "Example 1:",
                "Example 2:"
            ]
        }
    },
    "26": {
        "title": "Remove Duplicates from Sorted Array",
        "title_slug": "remove-duplicates-from-sorted-array",
        "link": "https://leetcode.com/problems/remove-duplicates-from-sorted-array",
        "difficulty": "Easy",
        "similar_topics": [
            "Array",
            "Two Pointers"
        ],
        "question": "Given an integer array nums sorted in non-decreasing order, remove the duplicates in-place such that each unique element appears only once. The relative order of the elements should be kept the same.\nSince it is impossible to change the length of the array in some languages, you must instead have the result be placed in the first part of the array nums. More formally, if there are k elements after removing the duplicates, then the first k elements of nums\u00a0should hold the final result. It does not matter what you leave beyond the first\u00a0k\u00a0elements.\nReturn k after placing the final result in the first k slots of nums.\nDo not allocate extra space for another array. You must do this by modifying the input array in-place with O(1) extra memory.\nCustom Judge:\nThe judge will test your solution with the following code:\nint[] nums = [...]; // Input array\nint[] expectedNums = [...]; // The expected answer with correct length\n\nint k = removeDuplicates(nums); // Calls your implementation\n\nassert k == expectedNums.length;\nfor (int i = 0; i < k; i++) {\n    assert nums[i] == expectedNums[i];\n}\n\nIf all assertions pass, then your solution will be accepted.\n\u00a0\nExample 1:\nInput: nums = [1,1,2]\nOutput: 2, nums = [1,2,_]\nExplanation: Your function should return k = 2, with the first two elements of nums being 1 and 2 respectively.\nIt does not matter what you leave beyond the returned k (hence they are underscores).\n\nExample 2:\nInput: nums = [0,0,1,1,1,2,2,3,3,4]\nOutput: 5, nums = [0,1,2,3,4,_,_,_,_,_]\nExplanation: Your function should return k = 5, with the first five elements of nums being 0, 1, 2, 3, and 4 respectively.\nIt does not matter what you leave beyond the returned k (hence they are underscores).\n\n\u00a0\nConstraints:\n\n1 <= nums.length <= 3 * 104\n-100 <= nums[i] <= 100\nnums is sorted in non-decreasing order.\n\n",
        "images": {
            "image": [],
            "previous_element": []
        }
    },
    "27": {
        "title": "Remove Element",
        "title_slug": "remove-element",
        "link": "https://leetcode.com/problems/remove-element",
        "difficulty": "Easy",
        "similar_topics": [
            "Array",
            "Two Pointers"
        ],
        "question": "Given an integer array nums and an integer val, remove all occurrences of val in nums in-place. The relative order of the elements may be changed.\nSince it is impossible to change the length of the array in some languages, you must instead have the result be placed in the first part of the array nums. More formally, if there are k elements after removing the duplicates, then the first k elements of nums should hold the final result. It does not matter what you leave beyond the first k elements.\nReturn k after placing the final result in the first k slots of nums.\nDo not allocate extra space for another array. You must do this by modifying the input array in-place with O(1) extra memory.\nCustom Judge:\nThe judge will test your solution with the following code:\nint[] nums = [...]; // Input array\nint val = ...; // Value to remove\nint[] expectedNums = [...]; // The expected answer with correct length.\n                            // It is sorted with no values equaling val.\n\nint k = removeElement(nums, val); // Calls your implementation\n\nassert k == expectedNums.length;\nsort(nums, 0, k); // Sort the first k elements of nums\nfor (int i = 0; i < actualLength; i++) {\n    assert nums[i] == expectedNums[i];\n}\n\nIf all assertions pass, then your solution will be accepted.\n\u00a0\nExample 1:\nInput: nums = [3,2,2,3], val = 3\nOutput: 2, nums = [2,2,_,_]\nExplanation: Your function should return k = 2, with the first two elements of nums being 2.\nIt does not matter what you leave beyond the returned k (hence they are underscores).\n\nExample 2:\nInput: nums = [0,1,2,2,3,0,4,2], val = 2\nOutput: 5, nums = [0,1,4,0,3,_,_,_]\nExplanation: Your function should return k = 5, with the first five elements of nums containing 0, 0, 1, 3, and 4.\nNote that the five elements can be returned in any order.\nIt does not matter what you leave beyond the returned k (hence they are underscores).\n\n\u00a0\nConstraints:\n\n0 <= nums.length <= 100\n0 <= nums[i] <= 50\n0 <= val <= 100\n\n",
        "images": {
            "image": [],
            "previous_element": []
        }
    },
    "28": {
        "title": "Find the Index of the First Occurrence in a String",
        "title_slug": "find-the-index-of-the-first-occurrence-in-a-string",
        "link": "https://leetcode.com/problems/find-the-index-of-the-first-occurrence-in-a-string",
        "difficulty": "Medium",
        "similar_topics": [
            "Two Pointers",
            "String",
            "String Matching"
        ],
        "question": "Given two strings needle and haystack, return the index of the first occurrence of needle in haystack, or -1 if needle is not part of haystack.\n\u00a0\nExample 1:\nInput: haystack = \"sadbutsad\", needle = \"sad\"\nOutput: 0\nExplanation: \"sad\" occurs at index 0 and 6.\nThe first occurrence is at index 0, so we return 0.\n\nExample 2:\nInput: haystack = \"leetcode\", needle = \"leeto\"\nOutput: -1\nExplanation: \"leeto\" did not occur in \"leetcode\", so we return -1.\n\n\u00a0\nConstraints:\n\n1 <= haystack.length, needle.length <= 104\nhaystack and needle consist of only lowercase English characters.\n\n",
        "images": {
            "image": [],
            "previous_element": []
        }
    },
    "29": {
        "title": "Divide Two Integers",
        "title_slug": "divide-two-integers",
        "link": "https://leetcode.com/problems/divide-two-integers",
        "difficulty": "Medium",
        "similar_topics": [
            "Math",
            "Bit Manipulation"
        ],
        "question": "Given two integers dividend and divisor, divide two integers without using multiplication, division, and mod operator.\nThe integer division should truncate toward zero, which means losing its fractional part. For example, 8.345 would be truncated to 8, and -2.7335 would be truncated to -2.\nReturn the quotient after dividing dividend by divisor.\nNote: Assume we are dealing with an environment that could only store integers within the 32-bit signed integer range: [\u2212231, 231 \u2212 1]. For this problem, if the quotient is strictly greater than 231 - 1, then return 231 - 1, and if the quotient is strictly less than -231, then return -231.\n\u00a0\nExample 1:\nInput: dividend = 10, divisor = 3\nOutput: 3\nExplanation: 10/3 = 3.33333.. which is truncated to 3.\n\nExample 2:\nInput: dividend = 7, divisor = -3\nOutput: -2\nExplanation: 7/-3 = -2.33333.. which is truncated to -2.\n\n\u00a0\nConstraints:\n\n-231 <= dividend, divisor <= 231 - 1\ndivisor != 0\n\n",
        "images": {
            "image": [],
            "previous_element": []
        }
    },
    "30": {
        "title": "Substring with Concatenation of All Words",
        "title_slug": "substring-with-concatenation-of-all-words",
        "link": "https://leetcode.com/problems/substring-with-concatenation-of-all-words",
        "difficulty": "Hard",
        "similar_topics": [
            "Hash Table",
            "String",
            "Sliding Window"
        ],
        "question": "You are given a string s and an array of strings words. All the strings of words are of the same length.\nA concatenated substring in s is a substring that contains all the strings of any permutation of words concatenated.\n\nFor example, if words = [\"ab\",\"cd\",\"ef\"], then \"abcdef\", \"abefcd\", \"cdabef\", \"cdefab\", \"efabcd\", and \"efcdab\" are all concatenated strings. \"acdbef\" is not a concatenated substring because it is not the concatenation of any permutation of words.\n\nReturn the starting indices of all the concatenated substrings in s. You can return the answer in any order.\n\u00a0\nExample 1:\nInput: s = \"barfoothefoobarman\", words = [\"foo\",\"bar\"]\nOutput: [0,9]\nExplanation: Since words.length == 2 and words[i].length == 3, the concatenated substring has to be of length 6.\nThe substring starting at 0 is \"barfoo\". It is the concatenation of [\"bar\",\"foo\"] which is a permutation of words.\nThe substring starting at 9 is \"foobar\". It is the concatenation of [\"foo\",\"bar\"] which is a permutation of words.\nThe output order does not matter. Returning [9,0] is fine too.\n\nExample 2:\nInput: s = \"wordgoodgoodgoodbestword\", words = [\"word\",\"good\",\"best\",\"word\"]\nOutput: []\nExplanation: Since words.length == 4 and words[i].length == 4, the concatenated substring has to be of length 16.\nThere is no substring of length 16 is s that is equal to the concatenation of any permutation of words.\nWe return an empty array.\n\nExample 3:\nInput: s = \"barfoofoobarthefoobarman\", words = [\"bar\",\"foo\",\"the\"]\nOutput: [6,9,12]\nExplanation: Since words.length == 3 and words[i].length == 3, the concatenated substring has to be of length 9.\nThe substring starting at 6 is \"foobarthe\". It is the concatenation of [\"foo\",\"bar\",\"the\"] which is a permutation of words.\nThe substring starting at 9 is \"barthefoo\". It is the concatenation of [\"bar\",\"the\",\"foo\"] which is a permutation of words.\nThe substring starting at 12 is \"thefoobar\". It is the concatenation of [\"the\",\"foo\",\"bar\"] which is a permutation of words.\n\n\u00a0\nConstraints:\n\n1 <= s.length <= 104\n1 <= words.length <= 5000\n1 <= words[i].length <= 30\ns and words[i] consist of lowercase English letters.\n\n",
        "images": {
            "image": [],
            "previous_element": []
        }
    },
    "31": {
        "title": "Next Permutation",
        "title_slug": "next-permutation",
        "link": "https://leetcode.com/problems/next-permutation",
        "difficulty": "Medium",
        "similar_topics": [
            "Array",
            "Two Pointers"
        ],
        "question": "A permutation of an array of integers is an arrangement of its members into a sequence or linear order.\n\nFor example, for arr = [1,2,3], the following are all the permutations of arr: [1,2,3], [1,3,2], [2, 1, 3], [2, 3, 1], [3,1,2], [3,2,1].\n\nThe next permutation of an array of integers is the next lexicographically greater permutation of its integer. More formally, if all the permutations of the array are sorted in one container according to their lexicographical order, then the next permutation of that array is the permutation that follows it in the sorted container. If such arrangement is not possible, the array must be rearranged as the lowest possible order (i.e., sorted in ascending order).\n\nFor example, the next permutation of arr = [1,2,3] is [1,3,2].\nSimilarly, the next permutation of arr = [2,3,1] is [3,1,2].\nWhile the next permutation of arr = [3,2,1] is [1,2,3] because [3,2,1] does not have a lexicographical larger rearrangement.\n\nGiven an array of integers nums, find the next permutation of nums.\nThe replacement must be in place and use only constant extra memory.\n\u00a0\nExample 1:\nInput: nums = [1,2,3]\nOutput: [1,3,2]\n\nExample 2:\nInput: nums = [3,2,1]\nOutput: [1,2,3]\n\nExample 3:\nInput: nums = [1,1,5]\nOutput: [1,5,1]\n\n\u00a0\nConstraints:\n\n1 <= nums.length <= 100\n0 <= nums[i] <= 100\n\n",
        "images": {
            "image": [],
            "previous_element": []
        }
    },
    "32": {
        "title": "Longest Valid Parentheses",
        "title_slug": "longest-valid-parentheses",
        "link": "https://leetcode.com/problems/longest-valid-parentheses",
        "difficulty": "Hard",
        "similar_topics": [
            "String",
            "Dynamic Programming",
            "Stack"
        ],
        "question": "Given a string containing just the characters '(' and ')', find the length of the longest valid (well-formed) parentheses substring.\n\u00a0\nExample 1:\nInput: s = \"(()\"\nOutput: 2\nExplanation: The longest valid parentheses substring is \"()\".\n\nExample 2:\nInput: s = \")()())\"\nOutput: 4\nExplanation: The longest valid parentheses substring is \"()()\".\n\nExample 3:\nInput: s = \"\"\nOutput: 0\n\n\u00a0\nConstraints:\n\n0 <= s.length <= 3 * 104\ns[i] is '(', or ')'.\n\n",
        "images": {
            "image": [],
            "previous_element": []
        }
    },
    "33": {
        "title": "Search in Rotated Sorted Array",
        "title_slug": "search-in-rotated-sorted-array",
        "link": "https://leetcode.com/problems/search-in-rotated-sorted-array",
        "difficulty": "Medium",
        "similar_topics": [
            "Array",
            "Binary Search"
        ],
        "question": "There is an integer array nums sorted in ascending order (with distinct values).\nPrior to being passed to your function, nums is possibly rotated at an unknown pivot index k (1 <= k < nums.length) such that the resulting array is [nums[k], nums[k+1], ..., nums[n-1], nums[0], nums[1], ..., nums[k-1]] (0-indexed). For example, [0,1,2,4,5,6,7] might be rotated at pivot index 3 and become [4,5,6,7,0,1,2].\nGiven the array nums after the possible rotation and an integer target, return the index of target if it is in nums, or -1 if it is not in nums.\nYou must write an algorithm with O(log n) runtime complexity.\n\u00a0\nExample 1:\nInput: nums = [4,5,6,7,0,1,2], target = 0\nOutput: 4\nExample 2:\nInput: nums = [4,5,6,7,0,1,2], target = 3\nOutput: -1\nExample 3:\nInput: nums = [1], target = 0\nOutput: -1\n\n\u00a0\nConstraints:\n\n1 <= nums.length <= 5000\n-104 <= nums[i] <= 104\nAll values of nums are unique.\nnums is an ascending array that is possibly rotated.\n-104 <= target <= 104\n\n",
        "images": {
            "image": [],
            "previous_element": []
        }
    },
    "34": {
        "title": "Find First and Last Position of Element in Sorted Array",
        "title_slug": "find-first-and-last-position-of-element-in-sorted-array",
        "link": "https://leetcode.com/problems/find-first-and-last-position-of-element-in-sorted-array",
        "difficulty": "Medium",
        "similar_topics": [
            "Array",
            "Binary Search"
        ],
        "question": "Given an array of integers nums sorted in non-decreasing order, find the starting and ending position of a given target value.\nIf target is not found in the array, return [-1, -1].\nYou must\u00a0write an algorithm with\u00a0O(log n) runtime complexity.\n\u00a0\nExample 1:\nInput: nums = [5,7,7,8,8,10], target = 8\nOutput: [3,4]\nExample 2:\nInput: nums = [5,7,7,8,8,10], target = 6\nOutput: [-1,-1]\nExample 3:\nInput: nums = [], target = 0\nOutput: [-1,-1]\n\n\u00a0\nConstraints:\n\n0 <= nums.length <= 105\n-109\u00a0<= nums[i]\u00a0<= 109\nnums is a non-decreasing array.\n-109\u00a0<= target\u00a0<= 109\n\n",
        "images": {
            "image": [],
            "previous_element": []
        }
    },
    "35": {
        "title": "Search Insert Position",
        "title_slug": "search-insert-position",
        "link": "https://leetcode.com/problems/search-insert-position",
        "difficulty": "Easy",
        "similar_topics": [
            "Array",
            "Binary Search"
        ],
        "question": "Given a sorted array of distinct integers and a target value, return the index if the target is found. If not, return the index where it would be if it were inserted in order.\nYou must\u00a0write an algorithm with\u00a0O(log n) runtime complexity.\n\u00a0\nExample 1:\nInput: nums = [1,3,5,6], target = 5\nOutput: 2\n\nExample 2:\nInput: nums = [1,3,5,6], target = 2\nOutput: 1\n\nExample 3:\nInput: nums = [1,3,5,6], target = 7\nOutput: 4\n\n\u00a0\nConstraints:\n\n1 <= nums.length <= 104\n-104 <= nums[i] <= 104\nnums contains distinct values sorted in ascending order.\n-104 <= target <= 104\n\n",
        "images": {
            "image": [],
            "previous_element": []
        }
    },
    "36": {
        "title": "Valid Sudoku",
        "title_slug": "valid-sudoku",
        "link": "https://leetcode.com/problems/valid-sudoku",
        "difficulty": "Medium",
        "similar_topics": [
            "Array",
            "Hash Table",
            "Matrix"
        ],
        "question": "Determine if a\u00a09 x 9 Sudoku board\u00a0is valid.\u00a0Only the filled cells need to be validated\u00a0according to the following rules:\n\nEach row\u00a0must contain the\u00a0digits\u00a01-9 without repetition.\nEach column must contain the digits\u00a01-9\u00a0without repetition.\nEach of the nine\u00a03 x 3 sub-boxes of the grid must contain the digits\u00a01-9\u00a0without repetition.\n\nNote:\n\nA Sudoku board (partially filled) could be valid but is not necessarily solvable.\nOnly the filled cells need to be validated according to the mentioned\u00a0rules.\n\n\u00a0\nExample 1:\n\nInput: board = \n[[\"5\",\"3\",\".\",\".\",\"7\",\".\",\".\",\".\",\".\"]\n,[\"6\",\".\",\".\",\"1\",\"9\",\"5\",\".\",\".\",\".\"]\n,[\".\",\"9\",\"8\",\".\",\".\",\".\",\".\",\"6\",\".\"]\n,[\"8\",\".\",\".\",\".\",\"6\",\".\",\".\",\".\",\"3\"]\n,[\"4\",\".\",\".\",\"8\",\".\",\"3\",\".\",\".\",\"1\"]\n,[\"7\",\".\",\".\",\".\",\"2\",\".\",\".\",\".\",\"6\"]\n,[\".\",\"6\",\".\",\".\",\".\",\".\",\"2\",\"8\",\".\"]\n,[\".\",\".\",\".\",\"4\",\"1\",\"9\",\".\",\".\",\"5\"]\n,[\".\",\".\",\".\",\".\",\"8\",\".\",\".\",\"7\",\"9\"]]\nOutput: true\n\nExample 2:\nInput: board = \n[[\"8\",\"3\",\".\",\".\",\"7\",\".\",\".\",\".\",\".\"]\n,[\"6\",\".\",\".\",\"1\",\"9\",\"5\",\".\",\".\",\".\"]\n,[\".\",\"9\",\"8\",\".\",\".\",\".\",\".\",\"6\",\".\"]\n,[\"8\",\".\",\".\",\".\",\"6\",\".\",\".\",\".\",\"3\"]\n,[\"4\",\".\",\".\",\"8\",\".\",\"3\",\".\",\".\",\"1\"]\n,[\"7\",\".\",\".\",\".\",\"2\",\".\",\".\",\".\",\"6\"]\n,[\".\",\"6\",\".\",\".\",\".\",\".\",\"2\",\"8\",\".\"]\n,[\".\",\".\",\".\",\"4\",\"1\",\"9\",\".\",\".\",\"5\"]\n,[\".\",\".\",\".\",\".\",\"8\",\".\",\".\",\"7\",\"9\"]]\nOutput: false\nExplanation: Same as Example 1, except with the 5 in the top left corner being modified to 8. Since there are two 8's in the top left 3x3 sub-box, it is invalid.\n\n\u00a0\nConstraints:\n\nboard.length == 9\nboard[i].length == 9\nboard[i][j] is a digit 1-9 or '.'.\n\n",
        "images": {
            "image": [
                "https://upload.wikimedia.org/wikipedia/commons/thumb/f/ff/Sudoku-by-L2G-20050714.svg/250px-Sudoku-by-L2G-20050714.svg.png"
            ],
            "previous_element": [
                "Example 1:"
            ]
        }
    },
    "37": {
        "title": "Sudoku Solver",
        "title_slug": "sudoku-solver",
        "link": "https://leetcode.com/problems/sudoku-solver",
        "difficulty": "Hard",
        "similar_topics": [
            "Array",
            "Backtracking",
            "Matrix"
        ],
        "question": "Write a program to solve a Sudoku puzzle by filling the empty cells.\nA sudoku solution must satisfy all of the following rules:\n\nEach of the digits 1-9 must occur exactly once in each row.\nEach of the digits 1-9 must occur exactly once in each column.\nEach of the digits 1-9 must occur exactly once in each of the 9 3x3 sub-boxes of the grid.\n\nThe '.' character indicates empty cells.\n\u00a0\nExample 1:\n\nInput: board = [[\"5\",\"3\",\".\",\".\",\"7\",\".\",\".\",\".\",\".\"],[\"6\",\".\",\".\",\"1\",\"9\",\"5\",\".\",\".\",\".\"],[\".\",\"9\",\"8\",\".\",\".\",\".\",\".\",\"6\",\".\"],[\"8\",\".\",\".\",\".\",\"6\",\".\",\".\",\".\",\"3\"],[\"4\",\".\",\".\",\"8\",\".\",\"3\",\".\",\".\",\"1\"],[\"7\",\".\",\".\",\".\",\"2\",\".\",\".\",\".\",\"6\"],[\".\",\"6\",\".\",\".\",\".\",\".\",\"2\",\"8\",\".\"],[\".\",\".\",\".\",\"4\",\"1\",\"9\",\".\",\".\",\"5\"],[\".\",\".\",\".\",\".\",\"8\",\".\",\".\",\"7\",\"9\"]]\nOutput: [[\"5\",\"3\",\"4\",\"6\",\"7\",\"8\",\"9\",\"1\",\"2\"],[\"6\",\"7\",\"2\",\"1\",\"9\",\"5\",\"3\",\"4\",\"8\"],[\"1\",\"9\",\"8\",\"3\",\"4\",\"2\",\"5\",\"6\",\"7\"],[\"8\",\"5\",\"9\",\"7\",\"6\",\"1\",\"4\",\"2\",\"3\"],[\"4\",\"2\",\"6\",\"8\",\"5\",\"3\",\"7\",\"9\",\"1\"],[\"7\",\"1\",\"3\",\"9\",\"2\",\"4\",\"8\",\"5\",\"6\"],[\"9\",\"6\",\"1\",\"5\",\"3\",\"7\",\"2\",\"8\",\"4\"],[\"2\",\"8\",\"7\",\"4\",\"1\",\"9\",\"6\",\"3\",\"5\"],[\"3\",\"4\",\"5\",\"2\",\"8\",\"6\",\"1\",\"7\",\"9\"]]\nExplanation:\u00a0The input board is shown above and the only valid solution is shown below:\n\n\n\n\u00a0\nConstraints:\n\nboard.length == 9\nboard[i].length == 9\nboard[i][j] is a digit or '.'.\nIt is guaranteed that the input board has only one solution.\n\n",
        "images": {
            "image": [
                "https://upload.wikimedia.org/wikipedia/commons/thumb/f/ff/Sudoku-by-L2G-20050714.svg/250px-Sudoku-by-L2G-20050714.svg.png",
                "https://upload.wikimedia.org/wikipedia/commons/thumb/3/31/Sudoku-by-L2G-20050714_solution.svg/250px-Sudoku-by-L2G-20050714_solution.svg.png"
            ],
            "previous_element": [
                "Example 1:",
                "Explanation:"
            ]
        }
    },
    "38": {
        "title": "Count and Say",
        "title_slug": "count-and-say",
        "link": "https://leetcode.com/problems/count-and-say",
        "difficulty": "Medium",
        "similar_topics": [
            "String"
        ],
        "question": "The count-and-say sequence is a sequence of digit strings defined by the recursive formula:\n\ncountAndSay(1) = \"1\"\ncountAndSay(n) is the way you would \"say\" the digit string from countAndSay(n-1), which is then converted into a different digit string.\n\nTo determine how you \"say\" a digit string, split it into the minimal number of substrings such that each substring contains exactly one unique digit. Then for each substring, say the number of digits, then say the digit. Finally, concatenate every said digit.\nFor example, the saying and conversion for digit string \"3322251\":\n\nGiven a positive integer n, return the nth term of the count-and-say sequence.\n\u00a0\nExample 1:\nInput: n = 1\nOutput: \"1\"\nExplanation: This is the base case.\n\nExample 2:\nInput: n = 4\nOutput: \"1211\"\nExplanation:\ncountAndSay(1) = \"1\"\ncountAndSay(2) = say \"1\" = one 1 = \"11\"\ncountAndSay(3) = say \"11\" = two 1's = \"21\"\ncountAndSay(4) = say \"21\" = one 2 + one 1 = \"12\" + \"11\" = \"1211\"\n\n\u00a0\nConstraints:\n\n1 <= n <= 30\n\n",
        "images": {
            "image": [
                "https://assets.leetcode.com/uploads/2020/10/23/countandsay.jpg"
            ],
            "previous_element": [
                "\"3322251\""
            ]
        }
    },
    "39": {
        "title": "Combination Sum",
        "title_slug": "combination-sum",
        "link": "https://leetcode.com/problems/combination-sum",
        "difficulty": "Medium",
        "similar_topics": [
            "Array",
            "Backtracking"
        ],
        "question": "Given an array of distinct integers candidates and a target integer target, return a list of all unique combinations of candidates where the chosen numbers sum to target. You may return the combinations in any order.\nThe same number may be chosen from candidates an unlimited number of times. Two combinations are unique if the frequency of at least one of the chosen numbers is different.\nThe test cases are generated such that the number of unique combinations that sum up to target is less than 150 combinations for the given input.\n\u00a0\nExample 1:\nInput: candidates = [2,3,6,7], target = 7\nOutput: [[2,2,3],[7]]\nExplanation:\n2 and 3 are candidates, and 2 + 2 + 3 = 7. Note that 2 can be used multiple times.\n7 is a candidate, and 7 = 7.\nThese are the only two combinations.\n\nExample 2:\nInput: candidates = [2,3,5], target = 8\nOutput: [[2,2,2,2],[2,3,3],[3,5]]\n\nExample 3:\nInput: candidates = [2], target = 1\nOutput: []\n\n\u00a0\nConstraints:\n\n1 <= candidates.length <= 30\n2 <= candidates[i] <= 40\nAll elements of candidates are distinct.\n1 <= target <= 500\n\n",
        "images": {
            "image": [],
            "previous_element": []
        }
    },
    "40": {
        "title": "Combination Sum II",
        "title_slug": "combination-sum-ii",
        "link": "https://leetcode.com/problems/combination-sum-ii",
        "difficulty": "Medium",
        "similar_topics": [
            "Array",
            "Backtracking"
        ],
        "question": "Given a collection of candidate numbers (candidates) and a target number (target), find all unique combinations in candidates\u00a0where the candidate numbers sum to target.\nEach number in candidates\u00a0may only be used once in the combination.\nNote:\u00a0The solution set must not contain duplicate combinations.\n\u00a0\nExample 1:\nInput: candidates = [10,1,2,7,6,1,5], target = 8\nOutput: \n[\n[1,1,6],\n[1,2,5],\n[1,7],\n[2,6]\n]\n\nExample 2:\nInput: candidates = [2,5,2,1,2], target = 5\nOutput: \n[\n[1,2,2],\n[5]\n]\n\n\u00a0\nConstraints:\n\n1 <=\u00a0candidates.length <= 100\n1 <=\u00a0candidates[i] <= 50\n1 <= target <= 30\n\n",
        "images": {
            "image": [],
            "previous_element": []
        }
    },
    "41": {
        "title": "First Missing Positive",
        "title_slug": "first-missing-positive",
        "link": "https://leetcode.com/problems/first-missing-positive",
        "difficulty": "Hard",
        "similar_topics": [
            "Array",
            "Hash Table"
        ],
        "question": "Given an unsorted integer array nums, return the smallest missing positive integer.\nYou must implement an algorithm that runs in O(n) time and uses constant extra space.\n\u00a0\nExample 1:\nInput: nums = [1,2,0]\nOutput: 3\nExplanation: The numbers in the range [1,2] are all in the array.\n\nExample 2:\nInput: nums = [3,4,-1,1]\nOutput: 2\nExplanation: 1 is in the array but 2 is missing.\n\nExample 3:\nInput: nums = [7,8,9,11,12]\nOutput: 1\nExplanation: The smallest positive integer 1 is missing.\n\n\u00a0\nConstraints:\n\n1 <= nums.length <= 105\n-231 <= nums[i] <= 231 - 1\n\n",
        "images": {
            "image": [],
            "previous_element": []
        }
    },
    "42": {
        "title": "Trapping Rain Water",
        "title_slug": "trapping-rain-water",
        "link": "https://leetcode.com/problems/trapping-rain-water",
        "difficulty": "Hard",
        "similar_topics": [
            "Array",
            "Two Pointers",
            "Dynamic Programming",
            "Stack",
            "Monotonic Stack"
        ],
        "question": "Given n non-negative integers representing an elevation map where the width of each bar is 1, compute how much water it can trap after raining.\n\u00a0\nExample 1:\n\nInput: height = [0,1,0,2,1,0,1,3,2,1,2,1]\nOutput: 6\nExplanation: The above elevation map (black section) is represented by array [0,1,0,2,1,0,1,3,2,1,2,1]. In this case, 6 units of rain water (blue section) are being trapped.\n\nExample 2:\nInput: height = [4,2,0,3,2,5]\nOutput: 9\n\n\u00a0\nConstraints:\n\nn == height.length\n1 <= n <= 2 * 104\n0 <= height[i] <= 105\n\n",
        "images": {
            "image": [
                "https://assets.leetcode.com/uploads/2018/10/22/rainwatertrap.png"
            ],
            "previous_element": [
                "Example 1:"
            ]
        }
    },
    "43": {
        "title": "Multiply Strings",
        "title_slug": "multiply-strings",
        "link": "https://leetcode.com/problems/multiply-strings",
        "difficulty": "Medium",
        "similar_topics": [
            "Math",
            "String",
            "Simulation"
        ],
        "question": "Given two non-negative integers num1 and num2 represented as strings, return the product of num1 and num2, also represented as a string.\nNote:\u00a0You must not use any built-in BigInteger library or convert the inputs to integer directly.\n\u00a0\nExample 1:\nInput: num1 = \"2\", num2 = \"3\"\nOutput: \"6\"\nExample 2:\nInput: num1 = \"123\", num2 = \"456\"\nOutput: \"56088\"\n\n\u00a0\nConstraints:\n\n1 <= num1.length, num2.length <= 200\nnum1 and num2 consist of digits only.\nBoth num1 and num2\u00a0do not contain any leading zero, except the number 0 itself.\n\n",
        "images": {
            "image": [],
            "previous_element": []
        }
    },
    "44": {
        "title": "Wildcard Matching",
        "title_slug": "wildcard-matching",
        "link": "https://leetcode.com/problems/wildcard-matching",
        "difficulty": "Hard",
        "similar_topics": [
            "String",
            "Dynamic Programming",
            "Greedy",
            "Recursion"
        ],
        "question": "Given an input string (s) and a pattern (p), implement wildcard pattern matching with support for '?' and '*' where:\n\n'?' Matches any single character.\n'*' Matches any sequence of characters (including the empty sequence).\n\nThe matching should cover the entire input string (not partial).\n\u00a0\nExample 1:\nInput: s = \"aa\", p = \"a\"\nOutput: false\nExplanation: \"a\" does not match the entire string \"aa\".\n\nExample 2:\nInput: s = \"aa\", p = \"*\"\nOutput: true\nExplanation:\u00a0'*' matches any sequence.\n\nExample 3:\nInput: s = \"cb\", p = \"?a\"\nOutput: false\nExplanation:\u00a0'?' matches 'c', but the second letter is 'a', which does not match 'b'.\n\n\u00a0\nConstraints:\n\n0 <= s.length, p.length <= 2000\ns contains only lowercase English letters.\np contains only lowercase English letters, '?' or '*'.\n\n",
        "images": {
            "image": [],
            "previous_element": []
        }
    },
    "45": {
        "title": "Jump Game II",
        "title_slug": "jump-game-ii",
        "link": "https://leetcode.com/problems/jump-game-ii",
        "difficulty": "Medium",
        "similar_topics": [
            "Array",
            "Dynamic Programming",
            "Greedy"
        ],
        "question": "Given an array of non-negative integers nums, you are initially positioned at the first index of the array.\nEach element in the array represents your maximum jump length at that position.\nYour goal is to reach the last index in the minimum number of jumps.\nYou can assume that you can always reach the last index.\n\u00a0\nExample 1:\nInput: nums = [2,3,1,1,4]\nOutput: 2\nExplanation: The minimum number of jumps to reach the last index is 2. Jump 1 step from index 0 to 1, then 3 steps to the last index.\n\nExample 2:\nInput: nums = [2,3,0,1,4]\nOutput: 2\n\n\u00a0\nConstraints:\n\n1 <= nums.length <= 104\n0 <= nums[i] <= 1000\n\n",
        "images": {
            "image": [],
            "previous_element": []
        }
    },
    "46": {
        "title": "Permutations",
        "title_slug": "permutations",
        "link": "https://leetcode.com/problems/permutations",
        "difficulty": "Medium",
        "similar_topics": [
            "Array",
            "Backtracking"
        ],
        "question": "Given an array nums of distinct integers, return all the possible permutations. You can return the answer in any order.\n\u00a0\nExample 1:\nInput: nums = [1,2,3]\nOutput: [[1,2,3],[1,3,2],[2,1,3],[2,3,1],[3,1,2],[3,2,1]]\nExample 2:\nInput: nums = [0,1]\nOutput: [[0,1],[1,0]]\nExample 3:\nInput: nums = [1]\nOutput: [[1]]\n\n\u00a0\nConstraints:\n\n1 <= nums.length <= 6\n-10 <= nums[i] <= 10\nAll the integers of nums are unique.\n\n",
        "images": {
            "image": [],
            "previous_element": []
        }
    },
    "47": {
        "title": "Permutations II",
        "title_slug": "permutations-ii",
        "link": "https://leetcode.com/problems/permutations-ii",
        "difficulty": "Medium",
        "similar_topics": [
            "Array",
            "Backtracking"
        ],
        "question": "Given a collection of numbers, nums,\u00a0that might contain duplicates, return all possible unique permutations in any order.\n\u00a0\nExample 1:\nInput: nums = [1,1,2]\nOutput:\n[[1,1,2],\n [1,2,1],\n [2,1,1]]\n\nExample 2:\nInput: nums = [1,2,3]\nOutput: [[1,2,3],[1,3,2],[2,1,3],[2,3,1],[3,1,2],[3,2,1]]\n\n\u00a0\nConstraints:\n\n1 <= nums.length <= 8\n-10 <= nums[i] <= 10\n\n",
        "images": {
            "image": [],
            "previous_element": []
        }
    },
    "48": {
        "title": "Rotate Image",
        "title_slug": "rotate-image",
        "link": "https://leetcode.com/problems/rotate-image",
        "difficulty": "Medium",
        "similar_topics": [
            "Array",
            "Math",
            "Matrix"
        ],
        "question": "You are given an n x n 2D matrix representing an image, rotate the image by 90 degrees (clockwise).\nYou have to rotate the image in-place, which means you have to modify the input 2D matrix directly. DO NOT allocate another 2D matrix and do the rotation.\n\u00a0\nExample 1:\n\nInput: matrix = [[1,2,3],[4,5,6],[7,8,9]]\nOutput: [[7,4,1],[8,5,2],[9,6,3]]\n\nExample 2:\n\nInput: matrix = [[5,1,9,11],[2,4,8,10],[13,3,6,7],[15,14,12,16]]\nOutput: [[15,13,2,5],[14,3,4,1],[12,6,8,9],[16,7,10,11]]\n\n\u00a0\nConstraints:\n\nn == matrix.length == matrix[i].length\n1 <= n <= 20\n-1000 <= matrix[i][j] <= 1000\n\n",
        "images": {
            "image": [
                "https://assets.leetcode.com/uploads/2020/08/28/mat1.jpg",
                "https://assets.leetcode.com/uploads/2020/08/28/mat2.jpg"
            ],
            "previous_element": [
                "Example 1:",
                "Example 2:"
            ]
        }
    },
    "49": {
        "title": "Group Anagrams",
        "title_slug": "group-anagrams",
        "link": "https://leetcode.com/problems/group-anagrams",
        "difficulty": "Medium",
        "similar_topics": [
            "Array",
            "Hash Table",
            "String",
            "Sorting"
        ],
        "question": "Given an array of strings strs, group the anagrams together. You can return the answer in any order.\nAn Anagram is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once.\n\u00a0\nExample 1:\nInput: strs = [\"eat\",\"tea\",\"tan\",\"ate\",\"nat\",\"bat\"]\nOutput: [[\"bat\"],[\"nat\",\"tan\"],[\"ate\",\"eat\",\"tea\"]]\nExample 2:\nInput: strs = [\"\"]\nOutput: [[\"\"]]\nExample 3:\nInput: strs = [\"a\"]\nOutput: [[\"a\"]]\n\n\u00a0\nConstraints:\n\n1 <= strs.length <= 104\n0 <= strs[i].length <= 100\nstrs[i] consists of lowercase English letters.\n\n",
        "images": {
            "image": [],
            "previous_element": []
        }
    },
    "50": {
        "title": "Pow(x, n)",
        "title_slug": "pow(x,-n)",
        "link": "https://leetcode.com/problems/pow(x,-n)",
        "difficulty": "Medium",
        "similar_topics": [
            "Math",
            "Recursion"
        ],
        "question": "Implement pow(x, n), which calculates x raised to the power n (i.e., xn).\n\u00a0\nExample 1:\nInput: x = 2.00000, n = 10\nOutput: 1024.00000\n\nExample 2:\nInput: x = 2.10000, n = 3\nOutput: 9.26100\n\nExample 3:\nInput: x = 2.00000, n = -2\nOutput: 0.25000\nExplanation: 2-2 = 1/22 = 1/4 = 0.25\n\n\u00a0\nConstraints:\n\n-100.0 < x < 100.0\n-231 <= n <= 231-1\nn is an integer.\n-104 <= xn <= 104\n\n",
        "images": {
            "image": [],
            "previous_element": []
        }
    },
    "51": {
        "title": "N-Queens",
        "title_slug": "n-queens",
        "link": "https://leetcode.com/problems/n-queens",
        "difficulty": "Hard",
        "similar_topics": [
            "Array",
            "Backtracking"
        ],
        "question": "The n-queens puzzle is the problem of placing n queens on an n x n chessboard such that no two queens attack each other.\nGiven an integer n, return all distinct solutions to the n-queens puzzle. You may return the answer in any order.\nEach solution contains a distinct board configuration of the n-queens' placement, where 'Q' and '.' both indicate a queen and an empty space, respectively.\n\u00a0\nExample 1:\n\nInput: n = 4\nOutput: [[\".Q..\",\"...Q\",\"Q...\",\"..Q.\"],[\"..Q.\",\"Q...\",\"...Q\",\".Q..\"]]\nExplanation: There exist two distinct solutions to the 4-queens puzzle as shown above\n\nExample 2:\nInput: n = 1\nOutput: [[\"Q\"]]\n\n\u00a0\nConstraints:\n\n1 <= n <= 9\n\n",
        "images": {
            "image": [
                "https://assets.leetcode.com/uploads/2020/11/13/queens.jpg"
            ],
            "previous_element": [
                "Example 1:"
            ]
        }
    },
    "52": {
        "title": "N-Queens II",
        "title_slug": "n-queens-ii",
        "link": "https://leetcode.com/problems/n-queens-ii",
        "difficulty": "Hard",
        "similar_topics": [
            "Backtracking"
        ],
        "question": "The n-queens puzzle is the problem of placing n queens on an n x n chessboard such that no two queens attack each other.\nGiven an integer n, return the number of distinct solutions to the\u00a0n-queens puzzle.\n\u00a0\nExample 1:\n\nInput: n = 4\nOutput: 2\nExplanation: There are two distinct solutions to the 4-queens puzzle as shown.\n\nExample 2:\nInput: n = 1\nOutput: 1\n\n\u00a0\nConstraints:\n\n1 <= n <= 9\n\n",
        "images": {
            "image": [
                "https://assets.leetcode.com/uploads/2020/11/13/queens.jpg"
            ],
            "previous_element": [
                "Example 1:"
            ]
        }
    },
    "53": {
        "title": "Maximum Subarray",
        "title_slug": "maximum-subarray",
        "link": "https://leetcode.com/problems/maximum-subarray",
        "difficulty": "Medium",
        "similar_topics": [
            "Array",
            "Divide and Conquer",
            "Dynamic Programming"
        ],
        "question": "Given an integer array nums, find the contiguous subarray (containing at least one number) which has the largest sum and return its sum.\nA subarray is a contiguous part of an array.\n\u00a0\nExample 1:\nInput: nums = [-2,1,-3,4,-1,2,1,-5,4]\nOutput: 6\nExplanation: [4,-1,2,1] has the largest sum = 6.\n\nExample 2:\nInput: nums = [1]\nOutput: 1\n\nExample 3:\nInput: nums = [5,4,-1,7,8]\nOutput: 23\n\n\u00a0\nConstraints:\n\n1 <= nums.length <= 105\n-104 <= nums[i] <= 104\n\n\u00a0\nFollow up: If you have figured out the O(n) solution, try coding another solution using the divide and conquer approach, which is more subtle.\n",
        "images": {
            "image": [],
            "previous_element": []
        }
    },
    "54": {
        "title": "Spiral Matrix",
        "title_slug": "spiral-matrix",
        "link": "https://leetcode.com/problems/spiral-matrix",
        "difficulty": "Medium",
        "similar_topics": [
            "Array",
            "Matrix",
            "Simulation"
        ],
        "question": "Given an m x n matrix, return all elements of the matrix in spiral order.\n\u00a0\nExample 1:\n\nInput: matrix = [[1,2,3],[4,5,6],[7,8,9]]\nOutput: [1,2,3,6,9,8,7,4,5]\n\nExample 2:\n\nInput: matrix = [[1,2,3,4],[5,6,7,8],[9,10,11,12]]\nOutput: [1,2,3,4,8,12,11,10,9,5,6,7]\n\n\u00a0\nConstraints:\n\nm == matrix.length\nn == matrix[i].length\n1 <= m, n <= 10\n-100 <= matrix[i][j] <= 100\n\n",
        "images": {
            "image": [
                "https://assets.leetcode.com/uploads/2020/11/13/spiral1.jpg",
                "https://assets.leetcode.com/uploads/2020/11/13/spiral.jpg"
            ],
            "previous_element": [
                "Example 1:",
                "Example 2:"
            ]
        }
    },
    "55": {
        "title": "Jump Game",
        "title_slug": "jump-game",
        "link": "https://leetcode.com/problems/jump-game",
        "difficulty": "Medium",
        "similar_topics": [
            "Array",
            "Dynamic Programming",
            "Greedy"
        ],
        "question": "You are given an integer array nums. You are initially positioned at the array's first index, and each element in the array represents your maximum jump length at that position.\nReturn true if you can reach the last index, or false otherwise.\n\u00a0\nExample 1:\nInput: nums = [2,3,1,1,4]\nOutput: true\nExplanation: Jump 1 step from index 0 to 1, then 3 steps to the last index.\n\nExample 2:\nInput: nums = [3,2,1,0,4]\nOutput: false\nExplanation: You will always arrive at index 3 no matter what. Its maximum jump length is 0, which makes it impossible to reach the last index.\n\n\u00a0\nConstraints:\n\n1 <= nums.length <= 104\n0 <= nums[i] <= 105\n\n",
        "images": {
            "image": [],
            "previous_element": []
        }
    },
    "56": {
        "title": "Merge Intervals",
        "title_slug": "merge-intervals",
        "link": "https://leetcode.com/problems/merge-intervals",
        "difficulty": "Medium",
        "similar_topics": [
            "Array",
            "Sorting"
        ],
        "question": "Given an array\u00a0of intervals\u00a0where intervals[i] = [starti, endi], merge all overlapping intervals, and return an array of the non-overlapping intervals that cover all the intervals in the input.\n\u00a0\nExample 1:\nInput: intervals = [[1,3],[2,6],[8,10],[15,18]]\nOutput: [[1,6],[8,10],[15,18]]\nExplanation: Since intervals [1,3] and [2,6] overlap, merge them into [1,6].\n\nExample 2:\nInput: intervals = [[1,4],[4,5]]\nOutput: [[1,5]]\nExplanation: Intervals [1,4] and [4,5] are considered overlapping.\n\n\u00a0\nConstraints:\n\n1 <= intervals.length <= 104\nintervals[i].length == 2\n0 <= starti <= endi <= 104\n\n",
        "images": {
            "image": [],
            "previous_element": []
        }
    },
    "57": {
        "title": "Insert Interval",
        "title_slug": "insert-interval",
        "link": "https://leetcode.com/problems/insert-interval",
        "difficulty": "Medium",
        "similar_topics": [
            "Array"
        ],
        "question": "You are given an array of non-overlapping intervals intervals where intervals[i] = [starti, endi] represent the start and the end of the ith interval and intervals is sorted in ascending order by starti. You are also given an interval newInterval = [start, end] that represents the start and end of another interval.\nInsert newInterval into intervals such that intervals is still sorted in ascending order by starti and intervals still does not have any overlapping intervals (merge overlapping intervals if necessary).\nReturn intervals after the insertion.\n\u00a0\nExample 1:\nInput: intervals = [[1,3],[6,9]], newInterval = [2,5]\nOutput: [[1,5],[6,9]]\n\nExample 2:\nInput: intervals = [[1,2],[3,5],[6,7],[8,10],[12,16]], newInterval = [4,8]\nOutput: [[1,2],[3,10],[12,16]]\nExplanation: Because the new interval [4,8] overlaps with [3,5],[6,7],[8,10].\n\n\u00a0\nConstraints:\n\n0 <= intervals.length <= 104\nintervals[i].length == 2\n0 <= starti <= endi <= 105\nintervals is sorted by starti in ascending order.\nnewInterval.length == 2\n0 <= start <= end <= 105\n\n",
        "images": {
            "image": [],
            "previous_element": []
        }
    },
    "58": {
        "title": "Length of Last Word",
        "title_slug": "length-of-last-word",
        "link": "https://leetcode.com/problems/length-of-last-word",
        "difficulty": "Easy",
        "similar_topics": [
            "String"
        ],
        "question": "Given a string s consisting of words and spaces, return the length of the last word in the string.\nA word is a maximal substring consisting of non-space characters only.\n\u00a0\nExample 1:\nInput: s = \"Hello World\"\nOutput: 5\nExplanation: The last word is \"World\" with length 5.\n\nExample 2:\nInput: s = \"   fly me   to   the moon  \"\nOutput: 4\nExplanation: The last word is \"moon\" with length 4.\n\nExample 3:\nInput: s = \"luffy is still joyboy\"\nOutput: 6\nExplanation: The last word is \"joyboy\" with length 6.\n\n\u00a0\nConstraints:\n\n1 <= s.length <= 104\ns consists of only English letters and spaces ' '.\nThere will be at least one word in s.\n\n",
        "images": {
            "image": [],
            "previous_element": []
        }
    },
    "59": {
        "title": "Spiral Matrix II",
        "title_slug": "spiral-matrix-ii",
        "link": "https://leetcode.com/problems/spiral-matrix-ii",
        "difficulty": "Medium",
        "similar_topics": [
            "Array",
            "Matrix",
            "Simulation"
        ],
        "question": "Given a positive integer n, generate an n x n matrix filled with elements from 1 to n2 in spiral order.\n\u00a0\nExample 1:\n\nInput: n = 3\nOutput: [[1,2,3],[8,9,4],[7,6,5]]\n\nExample 2:\nInput: n = 1\nOutput: [[1]]\n\n\u00a0\nConstraints:\n\n1 <= n <= 20\n\n",
        "images": {
            "image": [
                "https://assets.leetcode.com/uploads/2020/11/13/spiraln.jpg"
            ],
            "previous_element": [
                "Example 1:"
            ]
        }
    },
    "60": {
        "title": "Permutation Sequence",
        "title_slug": "permutation-sequence",
        "link": "https://leetcode.com/problems/permutation-sequence",
        "difficulty": "Hard",
        "similar_topics": [
            "Math",
            "Recursion"
        ],
        "question": "The set [1, 2, 3, ...,\u00a0n] contains a total of n! unique permutations.\nBy listing and labeling all of the permutations in order, we get the following sequence for n = 3:\n\n\"123\"\n\"132\"\n\"213\"\n\"231\"\n\"312\"\n\"321\"\n\nGiven n and k, return the kth permutation sequence.\n\u00a0\nExample 1:\nInput: n = 3, k = 3\nOutput: \"213\"\nExample 2:\nInput: n = 4, k = 9\nOutput: \"2314\"\nExample 3:\nInput: n = 3, k = 1\nOutput: \"123\"\n\n\u00a0\nConstraints:\n\n1 <= n <= 9\n1 <= k <= n!\n\n",
        "images": {
            "image": [],
            "previous_element": []
        }
    },
    "61": {
        "title": "Rotate List",
        "title_slug": "rotate-list",
        "link": "https://leetcode.com/problems/rotate-list",
        "difficulty": "Medium",
        "similar_topics": [
            "Linked List",
            "Two Pointers"
        ],
        "question": "Given the head of a linked\u00a0list, rotate the list to the right by k places.\n\u00a0\nExample 1:\n\nInput: head = [1,2,3,4,5], k = 2\nOutput: [4,5,1,2,3]\n\nExample 2:\n\nInput: head = [0,1,2], k = 4\nOutput: [2,0,1]\n\n\u00a0\nConstraints:\n\nThe number of nodes in the list is in the range [0, 500].\n-100 <= Node.val <= 100\n0 <= k <= 2 * 109\n\n",
        "images": {
            "image": [
                "https://assets.leetcode.com/uploads/2020/11/13/rotate1.jpg",
                "https://assets.leetcode.com/uploads/2020/11/13/roate2.jpg"
            ],
            "previous_element": [
                "Example 1:",
                "Example 2:"
            ]
        }
    },
    "62": {
        "title": "Unique Paths",
        "title_slug": "unique-paths",
        "link": "https://leetcode.com/problems/unique-paths",
        "difficulty": "Medium",
        "similar_topics": [
            "Math",
            "Dynamic Programming",
            "Combinatorics"
        ],
        "question": "There is a robot on an m x n grid. The robot is initially located at the top-left corner (i.e., grid[0][0]). The robot tries to move to the bottom-right corner (i.e., grid[m - 1][n - 1]). The robot can only move either down or right at any point in time.\nGiven the two integers m and n, return the number of possible unique paths that the robot can take to reach the bottom-right corner.\nThe test cases are generated so that the answer will be less than or equal to 2 * 109.\n\u00a0\nExample 1:\n\nInput: m = 3, n = 7\nOutput: 28\n\nExample 2:\nInput: m = 3, n = 2\nOutput: 3\nExplanation: From the top-left corner, there are a total of 3 ways to reach the bottom-right corner:\n1. Right -> Down -> Down\n2. Down -> Down -> Right\n3. Down -> Right -> Down\n\n\u00a0\nConstraints:\n\n1 <= m, n <= 100\n\n",
        "images": {
            "image": [
                "https://assets.leetcode.com/uploads/2018/10/22/robot_maze.png"
            ],
            "previous_element": [
                "Example 1:"
            ]
        }
    },
    "63": {
        "title": "Unique Paths II",
        "title_slug": "unique-paths-ii",
        "link": "https://leetcode.com/problems/unique-paths-ii",
        "difficulty": "Medium",
        "similar_topics": [
            "Array",
            "Dynamic Programming",
            "Matrix"
        ],
        "question": "You are given an m x n integer array grid. There is a robot initially located at the top-left corner (i.e., grid[0][0]). The robot tries to move to the bottom-right corner (i.e., grid[m-1][n-1]). The robot can only move either down or right at any point in time.\nAn obstacle and space are marked as 1 or 0 respectively in grid. A path that the robot takes cannot include any square that is an obstacle.\nReturn the number of possible unique paths that the robot can take to reach the bottom-right corner.\nThe testcases are generated so that the answer will be less than or equal to 2 * 109.\n\u00a0\nExample 1:\n\nInput: obstacleGrid = [[0,0,0],[0,1,0],[0,0,0]]\nOutput: 2\nExplanation: There is one obstacle in the middle of the 3x3 grid above.\nThere are two ways to reach the bottom-right corner:\n1. Right -> Right -> Down -> Down\n2. Down -> Down -> Right -> Right\n\nExample 2:\n\nInput: obstacleGrid = [[0,1],[0,0]]\nOutput: 1\n\n\u00a0\nConstraints:\n\nm == obstacleGrid.length\nn == obstacleGrid[i].length\n1 <= m, n <= 100\nobstacleGrid[i][j] is 0 or 1.\n\n",
        "images": {
            "image": [
                "https://assets.leetcode.com/uploads/2020/11/04/robot1.jpg",
                "https://assets.leetcode.com/uploads/2020/11/04/robot2.jpg"
            ],
            "previous_element": [
                "Example 1:",
                "Example 2:"
            ]
        }
    },
    "64": {
        "title": "Minimum Path Sum",
        "title_slug": "minimum-path-sum",
        "link": "https://leetcode.com/problems/minimum-path-sum",
        "difficulty": "Medium",
        "similar_topics": [
            "Array",
            "Dynamic Programming",
            "Matrix"
        ],
        "question": "Given a m x n grid filled with non-negative numbers, find a path from top left to bottom right, which minimizes the sum of all numbers along its path.\nNote: You can only move either down or right at any point in time.\n\u00a0\nExample 1:\n\nInput: grid = [[1,3,1],[1,5,1],[4,2,1]]\nOutput: 7\nExplanation: Because the path 1 \u2192 3 \u2192 1 \u2192 1 \u2192 1 minimizes the sum.\n\nExample 2:\nInput: grid = [[1,2,3],[4,5,6]]\nOutput: 12\n\n\u00a0\nConstraints:\n\nm == grid.length\nn == grid[i].length\n1 <= m, n <= 200\n0 <= grid[i][j] <= 100\n\n",
        "images": {
            "image": [
                "https://assets.leetcode.com/uploads/2020/11/05/minpath.jpg"
            ],
            "previous_element": [
                "Example 1:"
            ]
        }
    },
    "65": {
        "title": "Valid Number",
        "title_slug": "valid-number",
        "link": "https://leetcode.com/problems/valid-number",
        "difficulty": "Hard",
        "similar_topics": [
            "String"
        ],
        "question": "A valid number can be split up into these components (in order):\n\nA decimal number or an integer.\n(Optional) An 'e' or 'E', followed by an integer.\n\nA decimal number can be split up into these components (in order):\n\n(Optional) A sign character (either '+' or '-').\nOne of the following formats:\n\t\nOne or more digits, followed by a dot '.'.\nOne or more digits, followed by a dot '.', followed by one or more digits.\nA dot '.', followed by one or more digits.\n\n\n\nAn integer can be split up into these components (in order):\n\n(Optional) A sign character (either '+' or '-').\nOne or more digits.\n\nFor example, all the following are valid numbers: [\"2\", \"0089\", \"-0.1\", \"+3.14\", \"4.\", \"-.9\", \"2e10\", \"-90E3\", \"3e+7\", \"+6e-1\", \"53.5e93\", \"-123.456e789\"], while the following are not valid numbers: [\"abc\", \"1a\", \"1e\", \"e3\", \"99e2.5\", \"--6\", \"-+3\", \"95a54e53\"].\nGiven a string s, return true if s is a valid number.\n\u00a0\nExample 1:\nInput: s = \"0\"\nOutput: true\n\nExample 2:\nInput: s = \"e\"\nOutput: false\n\nExample 3:\nInput: s = \".\"\nOutput: false\n\n\u00a0\nConstraints:\n\n1 <= s.length <= 20\ns consists of only English letters (both uppercase and lowercase), digits (0-9), plus '+', minus '-', or dot '.'.\n\n",
        "images": {
            "image": [],
            "previous_element": []
        }
    },
    "66": {
        "title": "Plus One",
        "title_slug": "plus-one",
        "link": "https://leetcode.com/problems/plus-one",
        "difficulty": "Easy",
        "similar_topics": [
            "Array",
            "Math"
        ],
        "question": "You are given a large integer represented as an integer array digits, where each digits[i] is the ith digit of the integer. The digits are ordered from most significant to least significant in left-to-right order. The large integer does not contain any leading 0's.\nIncrement the large integer by one and return the resulting array of digits.\n\u00a0\nExample 1:\nInput: digits = [1,2,3]\nOutput: [1,2,4]\nExplanation: The array represents the integer 123.\nIncrementing by one gives 123 + 1 = 124.\nThus, the result should be [1,2,4].\n\nExample 2:\nInput: digits = [4,3,2,1]\nOutput: [4,3,2,2]\nExplanation: The array represents the integer 4321.\nIncrementing by one gives 4321 + 1 = 4322.\nThus, the result should be [4,3,2,2].\n\nExample 3:\nInput: digits = [9]\nOutput: [1,0]\nExplanation: The array represents the integer 9.\nIncrementing by one gives 9 + 1 = 10.\nThus, the result should be [1,0].\n\n\u00a0\nConstraints:\n\n1 <= digits.length <= 100\n0 <= digits[i] <= 9\ndigits does not contain any leading 0's.\n\n",
        "images": {
            "image": [],
            "previous_element": []
        }
    },
    "67": {
        "title": "Add Binary",
        "title_slug": "add-binary",
        "link": "https://leetcode.com/problems/add-binary",
        "difficulty": "Easy",
        "similar_topics": [
            "Math",
            "String",
            "Bit Manipulation",
            "Simulation"
        ],
        "question": "Given two binary strings a and b, return their sum as a binary string.\n\u00a0\nExample 1:\nInput: a = \"11\", b = \"1\"\nOutput: \"100\"\nExample 2:\nInput: a = \"1010\", b = \"1011\"\nOutput: \"10101\"\n\n\u00a0\nConstraints:\n\n1 <= a.length, b.length <= 104\na and b consist\u00a0only of '0' or '1' characters.\nEach string does not contain leading zeros except for the zero itself.\n\n",
        "images": {
            "image": [],
            "previous_element": []
        }
    },
    "68": {
        "title": "Text Justification",
        "title_slug": "text-justification",
        "link": "https://leetcode.com/problems/text-justification",
        "difficulty": "Hard",
        "similar_topics": [
            "Array",
            "String",
            "Simulation"
        ],
        "question": "Given an array of strings words and a width maxWidth, format the text such that each line has exactly maxWidth characters and is fully (left and right) justified.\nYou should pack your words in a greedy approach; that is, pack as many words as you can in each line. Pad extra spaces ' ' when necessary so that each line has exactly maxWidth characters.\nExtra spaces between words should be distributed as evenly as possible. If the number of spaces on a line does not divide evenly between words, the empty slots on the left will be assigned more spaces than the slots on the right.\nFor the last line of text, it should be left-justified, and no extra space is inserted between words.\nNote:\n\nA word is defined as a character sequence consisting of non-space characters only.\nEach word's length is guaranteed to be greater than 0 and not exceed maxWidth.\nThe input array words contains at least one word.\n\n\u00a0\nExample 1:\nInput: words = [\"This\", \"is\", \"an\", \"example\", \"of\", \"text\", \"justification.\"], maxWidth = 16\nOutput:\n[\n\u00a0 \u00a0\"This \u00a0 \u00a0is \u00a0 \u00a0an\",\n\u00a0 \u00a0\"example \u00a0of text\",\n\u00a0 \u00a0\"justification. \u00a0\"\n]\nExample 2:\nInput: words = [\"What\",\"must\",\"be\",\"acknowledgment\",\"shall\",\"be\"], maxWidth = 16\nOutput:\n[\n\u00a0 \"What \u00a0 must \u00a0 be\",\n\u00a0 \"acknowledgment \u00a0\",\n\u00a0 \"shall be \u00a0 \u00a0 \u00a0 \u00a0\"\n]\nExplanation: Note that the last line is \"shall be    \" instead of \"shall     be\", because the last line must be left-justified instead of fully-justified.\nNote that the second line is also left-justified because it contains only one word.\nExample 3:\nInput: words = [\"Science\",\"is\",\"what\",\"we\",\"understand\",\"well\",\"enough\",\"to\",\"explain\",\"to\",\"a\",\"computer.\",\"Art\",\"is\",\"everything\",\"else\",\"we\",\"do\"], maxWidth = 20\nOutput:\n[\n\u00a0 \"Science \u00a0is \u00a0what we\",\n  \"understand \u00a0 \u00a0 \u00a0well\",\n\u00a0 \"enough to explain to\",\n\u00a0 \"a \u00a0computer. \u00a0Art is\",\n\u00a0 \"everything \u00a0else \u00a0we\",\n\u00a0 \"do \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0\"\n]\n\u00a0\nConstraints:\n\n1 <= words.length <= 300\n1 <= words[i].length <= 20\nwords[i] consists of only English letters and symbols.\n1 <= maxWidth <= 100\nwords[i].length <= maxWidth\n\n",
        "images": {
            "image": [],
            "previous_element": []
        }
    },
    "69": {
        "title": "Sqrt(x)",
        "title_slug": "sqrt(x)",
        "link": "https://leetcode.com/problems/sqrt(x)",
        "difficulty": "Easy",
        "similar_topics": [
            "Math",
            "Binary Search"
        ],
        "question": "Given a non-negative integer x,\u00a0compute and return the square root of x.\nSince the return type\u00a0is an integer, the decimal digits are truncated, and only the integer part of the result\u00a0is returned.\nNote:\u00a0You are not allowed to use any built-in exponent function or operator, such as pow(x, 0.5) or\u00a0x ** 0.5.\n\u00a0\nExample 1:\nInput: x = 4\nOutput: 2\n\nExample 2:\nInput: x = 8\nOutput: 2\nExplanation: The square root of 8 is 2.82842..., and since the decimal part is truncated, 2 is returned.\n\u00a0\nConstraints:\n\n0 <= x <= 231 - 1\n\n",
        "images": {
            "image": [],
            "previous_element": []
        }
    },
    "70": {
        "title": "Climbing Stairs",
        "title_slug": "climbing-stairs",
        "link": "https://leetcode.com/problems/climbing-stairs",
        "difficulty": "Easy",
        "similar_topics": [
            "Math",
            "Dynamic Programming",
            "Memoization"
        ],
        "question": "You are climbing a staircase. It takes n steps to reach the top.\nEach time you can either climb 1 or 2 steps. In how many distinct ways can you climb to the top?\n\u00a0\nExample 1:\nInput: n = 2\nOutput: 2\nExplanation: There are two ways to climb to the top.\n1. 1 step + 1 step\n2. 2 steps\n\nExample 2:\nInput: n = 3\nOutput: 3\nExplanation: There are three ways to climb to the top.\n1. 1 step + 1 step + 1 step\n2. 1 step + 2 steps\n3. 2 steps + 1 step\n\n\u00a0\nConstraints:\n\n1 <= n <= 45\n\n",
        "images": {
            "image": [],
            "previous_element": []
        }
    },
    "71": {
        "title": "Simplify Path",
        "title_slug": "simplify-path",
        "link": "https://leetcode.com/problems/simplify-path",
        "difficulty": "Medium",
        "similar_topics": [
            "String",
            "Stack"
        ],
        "question": "Given a string path, which is an absolute path (starting with a slash '/') to a file or directory in a Unix-style file system, convert it to the simplified canonical path.\nIn a Unix-style file system, a period '.' refers to the current directory, a double period '..' refers to the directory up a level, and any multiple consecutive slashes (i.e. '//') are treated as a single slash '/'. For this problem, any other format of periods such as '...' are treated as file/directory names.\nThe canonical path should have the following format:\n\nThe path starts with a single slash '/'.\nAny two directories are separated by a single slash '/'.\nThe path does not end with a trailing '/'.\nThe path only contains the directories on the path from the root directory to the target file or directory (i.e., no period '.' or double period '..')\n\nReturn the simplified canonical path.\n\u00a0\nExample 1:\nInput: path = \"/home/\"\nOutput: \"/home\"\nExplanation: Note that there is no trailing slash after the last directory name.\n\nExample 2:\nInput: path = \"/../\"\nOutput: \"/\"\nExplanation: Going one level up from the root directory is a no-op, as the root level is the highest level you can go.\n\nExample 3:\nInput: path = \"/home//foo/\"\nOutput: \"/home/foo\"\nExplanation: In the canonical path, multiple consecutive slashes are replaced by a single one.\n\n\u00a0\nConstraints:\n\n1 <= path.length <= 3000\npath consists of English letters, digits, period '.', slash '/' or '_'.\npath is a valid absolute Unix path.\n\n",
        "images": {
            "image": [],
            "previous_element": []
        }
    },
    "72": {
        "title": "Edit Distance",
        "title_slug": "edit-distance",
        "link": "https://leetcode.com/problems/edit-distance",
        "difficulty": "Hard",
        "similar_topics": [
            "String",
            "Dynamic Programming"
        ],
        "question": "Given two strings word1 and word2, return the minimum number of operations required to convert word1 to word2.\nYou have the following three operations permitted on a word:\n\nInsert a character\nDelete a character\nReplace a character\n\n\u00a0\nExample 1:\nInput: word1 = \"horse\", word2 = \"ros\"\nOutput: 3\nExplanation: \nhorse -> rorse (replace 'h' with 'r')\nrorse -> rose (remove 'r')\nrose -> ros (remove 'e')\n\nExample 2:\nInput: word1 = \"intention\", word2 = \"execution\"\nOutput: 5\nExplanation: \nintention -> inention (remove 't')\ninention -> enention (replace 'i' with 'e')\nenention -> exention (replace 'n' with 'x')\nexention -> exection (replace 'n' with 'c')\nexection -> execution (insert 'u')\n\n\u00a0\nConstraints:\n\n0 <= word1.length, word2.length <= 500\nword1 and word2 consist of lowercase English letters.\n\n",
        "images": {
            "image": [],
            "previous_element": []
        }
    },
    "73": {
        "title": "Set Matrix Zeroes",
        "title_slug": "set-matrix-zeroes",
        "link": "https://leetcode.com/problems/set-matrix-zeroes",
        "difficulty": "Medium",
        "similar_topics": [
            "Array",
            "Hash Table",
            "Matrix"
        ],
        "question": "Given an m x n integer matrix matrix, if an element is 0, set its entire row and column to 0's.\nYou must do it in place.\n\u00a0\nExample 1:\n\nInput: matrix = [[1,1,1],[1,0,1],[1,1,1]]\nOutput: [[1,0,1],[0,0,0],[1,0,1]]\n\nExample 2:\n\nInput: matrix = [[0,1,2,0],[3,4,5,2],[1,3,1,5]]\nOutput: [[0,0,0,0],[0,4,5,0],[0,3,1,0]]\n\n\u00a0\nConstraints:\n\nm == matrix.length\nn == matrix[0].length\n1 <= m, n <= 200\n-231 <= matrix[i][j] <= 231 - 1\n\n\u00a0\nFollow up:\n\nA straightforward solution using O(mn) space is probably a bad idea.\nA simple improvement uses O(m + n) space, but still not the best solution.\nCould you devise a constant space solution?\n\n",
        "images": {
            "image": [
                "https://assets.leetcode.com/uploads/2020/08/17/mat1.jpg",
                "https://assets.leetcode.com/uploads/2020/08/17/mat2.jpg"
            ],
            "previous_element": [
                "Example 1:",
                "Example 2:"
            ]
        }
    },
    "74": {
        "title": "Search a 2D Matrix",
        "title_slug": "search-a-2d-matrix",
        "link": "https://leetcode.com/problems/search-a-2d-matrix",
        "difficulty": "Medium",
        "similar_topics": [
            "Array",
            "Binary Search",
            "Matrix"
        ],
        "question": "Write an efficient algorithm that searches for a value target in an m x n integer matrix matrix. This matrix has the following properties:\n\nIntegers in each row are sorted from left to right.\nThe first integer of each row is greater than the last integer of the previous row.\n\n\u00a0\nExample 1:\n\nInput: matrix = [[1,3,5,7],[10,11,16,20],[23,30,34,60]], target = 3\nOutput: true\n\nExample 2:\n\nInput: matrix = [[1,3,5,7],[10,11,16,20],[23,30,34,60]], target = 13\nOutput: false\n\n\u00a0\nConstraints:\n\nm == matrix.length\nn == matrix[i].length\n1 <= m, n <= 100\n-104 <= matrix[i][j], target <= 104\n\n",
        "images": {
            "image": [
                "https://assets.leetcode.com/uploads/2020/10/05/mat.jpg",
                "https://assets.leetcode.com/uploads/2020/10/05/mat2.jpg"
            ],
            "previous_element": [
                "Example 1:",
                "Example 2:"
            ]
        }
    },
    "75": {
        "title": "Sort Colors",
        "title_slug": "sort-colors",
        "link": "https://leetcode.com/problems/sort-colors",
        "difficulty": "Medium",
        "similar_topics": [
            "Array",
            "Two Pointers",
            "Sorting"
        ],
        "question": "Given an array nums with n objects colored red, white, or blue, sort them in-place so that objects of the same color are adjacent, with the colors in the order red, white, and blue.\nWe will use the integers 0, 1, and 2 to represent the color red, white, and blue, respectively.\nYou must solve this problem without using the library's sort function.\n\u00a0\nExample 1:\nInput: nums = [2,0,2,1,1,0]\nOutput: [0,0,1,1,2,2]\n\nExample 2:\nInput: nums = [2,0,1]\nOutput: [0,1,2]\n\n\u00a0\nConstraints:\n\nn == nums.length\n1 <= n <= 300\nnums[i] is either 0, 1, or 2.\n\n\u00a0\nFollow up:\u00a0Could you come up with a one-pass algorithm using only\u00a0constant extra space?\n",
        "images": {
            "image": [],
            "previous_element": []
        }
    },
    "76": {
        "title": "Minimum Window Substring",
        "title_slug": "minimum-window-substring",
        "link": "https://leetcode.com/problems/minimum-window-substring",
        "difficulty": "Hard",
        "similar_topics": [
            "Hash Table",
            "String",
            "Sliding Window"
        ],
        "question": "Given two strings s and t of lengths m and n respectively, return the minimum window substring of s such that every character in t (including duplicates) is included in the window. If there is no such substring, return the empty string \"\".\nThe testcases will be generated such that the answer is unique.\nA substring is a contiguous sequence of characters within the string.\n\u00a0\nExample 1:\nInput: s = \"ADOBECODEBANC\", t = \"ABC\"\nOutput: \"BANC\"\nExplanation: The minimum window substring \"BANC\" includes 'A', 'B', and 'C' from string t.\n\nExample 2:\nInput: s = \"a\", t = \"a\"\nOutput: \"a\"\nExplanation: The entire string s is the minimum window.\n\nExample 3:\nInput: s = \"a\", t = \"aa\"\nOutput: \"\"\nExplanation: Both 'a's from t must be included in the window.\nSince the largest window of s only has one 'a', return empty string.\n\n\u00a0\nConstraints:\n\nm == s.length\nn == t.length\n1 <= m, n\u00a0<= 105\ns and t consist of uppercase and lowercase English letters.\n\n\u00a0\nFollow up: Could you find an algorithm that runs in O(m + n) time?\n",
        "images": {
            "image": [],
            "previous_element": []
        }
    },
    "77": {
        "title": "Combinations",
        "title_slug": "combinations",
        "link": "https://leetcode.com/problems/combinations",
        "difficulty": "Medium",
        "similar_topics": [
            "Backtracking"
        ],
        "question": "Given two integers n and k, return all possible combinations of k numbers chosen from the range [1, n].\nYou may return the answer in any order.\n\u00a0\nExample 1:\nInput: n = 4, k = 2\nOutput: [[1,2],[1,3],[1,4],[2,3],[2,4],[3,4]]\nExplanation: There are 4 choose 2 = 6 total combinations.\nNote that combinations are unordered, i.e., [1,2] and [2,1] are considered to be the same combination.\n\nExample 2:\nInput: n = 1, k = 1\nOutput: [[1]]\nExplanation: There is 1 choose 1 = 1 total combination.\n\n\u00a0\nConstraints:\n\n1 <= n <= 20\n1 <= k <= n\n\n",
        "images": {
            "image": [],
            "previous_element": []
        }
    },
    "78": {
        "title": "Subsets",
        "title_slug": "subsets",
        "link": "https://leetcode.com/problems/subsets",
        "difficulty": "Medium",
        "similar_topics": [
            "Array",
            "Backtracking",
            "Bit Manipulation"
        ],
        "question": "Given an integer array nums of unique elements, return all possible subsets (the power set).\nThe solution set must not contain duplicate subsets. Return the solution in any order.\n\u00a0\nExample 1:\nInput: nums = [1,2,3]\nOutput: [[],[1],[2],[1,2],[3],[1,3],[2,3],[1,2,3]]\n\nExample 2:\nInput: nums = [0]\nOutput: [[],[0]]\n\n\u00a0\nConstraints:\n\n1 <= nums.length <= 10\n-10 <= nums[i] <= 10\nAll the numbers of\u00a0nums are unique.\n\n",
        "images": {
            "image": [],
            "previous_element": []
        }
    },
    "79": {
        "title": "Word Search",
        "title_slug": "word-search",
        "link": "https://leetcode.com/problems/word-search",
        "difficulty": "Medium",
        "similar_topics": [
            "Array",
            "Backtracking",
            "Matrix"
        ],
        "question": "Given an m x n grid of characters board and a string word, return true if word exists in the grid.\nThe word can be constructed from letters of sequentially adjacent cells, where adjacent cells are horizontally or vertically neighboring. The same letter cell may not be used more than once.\n\u00a0\nExample 1:\n\nInput: board = [[\"A\",\"B\",\"C\",\"E\"],[\"S\",\"F\",\"C\",\"S\"],[\"A\",\"D\",\"E\",\"E\"]], word = \"ABCCED\"\nOutput: true\n\nExample 2:\n\nInput: board = [[\"A\",\"B\",\"C\",\"E\"],[\"S\",\"F\",\"C\",\"S\"],[\"A\",\"D\",\"E\",\"E\"]], word = \"SEE\"\nOutput: true\n\nExample 3:\n\nInput: board = [[\"A\",\"B\",\"C\",\"E\"],[\"S\",\"F\",\"C\",\"S\"],[\"A\",\"D\",\"E\",\"E\"]], word = \"ABCB\"\nOutput: false\n\n\u00a0\nConstraints:\n\nm == board.length\nn = board[i].length\n1 <= m, n <= 6\n1 <= word.length <= 15\nboard and word consists of only lowercase and uppercase English letters.\n\n\u00a0\nFollow up: Could you use search pruning to make your solution faster with a larger board?\n",
        "images": {
            "image": [
                "https://assets.leetcode.com/uploads/2020/11/04/word2.jpg",
                "https://assets.leetcode.com/uploads/2020/11/04/word-1.jpg",
                "https://assets.leetcode.com/uploads/2020/10/15/word3.jpg"
            ],
            "previous_element": [
                "Example 1:",
                "Example 2:",
                "Example 3:"
            ]
        }
    },
    "80": {
        "title": "Remove Duplicates from Sorted Array II",
        "title_slug": "remove-duplicates-from-sorted-array-ii",
        "link": "https://leetcode.com/problems/remove-duplicates-from-sorted-array-ii",
        "difficulty": "Medium",
        "similar_topics": [
            "Array",
            "Two Pointers"
        ],
        "question": "Given an integer array nums sorted in non-decreasing order, remove some duplicates in-place such that each unique element appears at most twice. The relative order of the elements should be kept the same.\nSince it is impossible to change the length of the array in some languages, you must instead have the result be placed in the first part of the array nums. More formally, if there are k elements after removing the duplicates, then the first k elements of nums\u00a0should hold the final result. It does not matter what you leave beyond the first\u00a0k\u00a0elements.\nReturn k after placing the final result in the first k slots of nums.\nDo not allocate extra space for another array. You must do this by modifying the input array in-place with O(1) extra memory.\nCustom Judge:\nThe judge will test your solution with the following code:\nint[] nums = [...]; // Input array\nint[] expectedNums = [...]; // The expected answer with correct length\n\nint k = removeDuplicates(nums); // Calls your implementation\n\nassert k == expectedNums.length;\nfor (int i = 0; i < k; i++) {\n    assert nums[i] == expectedNums[i];\n}\n\nIf all assertions pass, then your solution will be accepted.\n\u00a0\nExample 1:\nInput: nums = [1,1,1,2,2,3]\nOutput: 5, nums = [1,1,2,2,3,_]\nExplanation: Your function should return k = 5, with the first five elements of nums being 1, 1, 2, 2 and 3 respectively.\nIt does not matter what you leave beyond the returned k (hence they are underscores).\n\nExample 2:\nInput: nums = [0,0,1,1,1,1,2,3,3]\nOutput: 7, nums = [0,0,1,1,2,3,3,_,_]\nExplanation: Your function should return k = 7, with the first seven elements of nums being 0, 0, 1, 1, 2, 3 and 3 respectively.\nIt does not matter what you leave beyond the returned k (hence they are underscores).\n\n\u00a0\nConstraints:\n\n1 <= nums.length <= 3 * 104\n-104 <= nums[i] <= 104\nnums is sorted in non-decreasing order.\n\n",
        "images": {
            "image": [],
            "previous_element": []
        }
    },
    "81": {
        "title": "Search in Rotated Sorted Array II",
        "title_slug": "search-in-rotated-sorted-array-ii",
        "link": "https://leetcode.com/problems/search-in-rotated-sorted-array-ii",
        "difficulty": "Medium",
        "similar_topics": [
            "Array",
            "Binary Search"
        ],
        "question": "There is an integer array nums sorted in non-decreasing order (not necessarily with distinct values).\nBefore being passed to your function, nums is rotated at an unknown pivot index k (0 <= k < nums.length) such that the resulting array is [nums[k], nums[k+1], ..., nums[n-1], nums[0], nums[1], ..., nums[k-1]] (0-indexed). For example, [0,1,2,4,4,4,5,6,6,7] might be rotated at pivot index 5 and become [4,5,6,6,7,0,1,2,4,4].\nGiven the array nums after the rotation and an integer target, return true if target is in nums, or false if it is not in nums.\nYou must decrease the overall operation steps as much as possible.\n\u00a0\nExample 1:\nInput: nums = [2,5,6,0,0,1,2], target = 0\nOutput: true\nExample 2:\nInput: nums = [2,5,6,0,0,1,2], target = 3\nOutput: false\n\n\u00a0\nConstraints:\n\n1 <= nums.length <= 5000\n-104 <= nums[i] <= 104\nnums is guaranteed to be rotated at some pivot.\n-104 <= target <= 104\n\n\u00a0\nFollow up: This problem is similar to\u00a0Search in Rotated Sorted Array, but\u00a0nums may contain duplicates. Would this affect the runtime complexity? How and why?\n",
        "images": {
            "image": [],
            "previous_element": []
        }
    },
    "82": {
        "title": "Remove Duplicates from Sorted List II",
        "title_slug": "remove-duplicates-from-sorted-list-ii",
        "link": "https://leetcode.com/problems/remove-duplicates-from-sorted-list-ii",
        "difficulty": "Medium",
        "similar_topics": [
            "Linked List",
            "Two Pointers"
        ],
        "question": "Given the head of a sorted linked list, delete all nodes that have duplicate numbers, leaving only distinct numbers from the original list. Return the linked list sorted as well.\n\u00a0\nExample 1:\n\nInput: head = [1,2,3,3,4,4,5]\nOutput: [1,2,5]\n\nExample 2:\n\nInput: head = [1,1,1,2,3]\nOutput: [2,3]\n\n\u00a0\nConstraints:\n\nThe number of nodes in the list is in the range [0, 300].\n-100 <= Node.val <= 100\nThe list is guaranteed to be sorted in ascending order.\n\n",
        "images": {
            "image": [
                "https://assets.leetcode.com/uploads/2021/01/04/linkedlist1.jpg",
                "https://assets.leetcode.com/uploads/2021/01/04/linkedlist2.jpg"
            ],
            "previous_element": [
                "Example 1:",
                "Example 2:"
            ]
        }
    },
    "83": {
        "title": "Remove Duplicates from Sorted List",
        "title_slug": "remove-duplicates-from-sorted-list",
        "link": "https://leetcode.com/problems/remove-duplicates-from-sorted-list",
        "difficulty": "Easy",
        "similar_topics": [
            "Linked List"
        ],
        "question": "Given the head of a sorted linked list, delete all duplicates such that each element appears only once. Return the linked list sorted as well.\n\u00a0\nExample 1:\n\nInput: head = [1,1,2]\nOutput: [1,2]\n\nExample 2:\n\nInput: head = [1,1,2,3,3]\nOutput: [1,2,3]\n\n\u00a0\nConstraints:\n\nThe number of nodes in the list is in the range [0, 300].\n-100 <= Node.val <= 100\nThe list is guaranteed to be sorted in ascending order.\n\n",
        "images": {
            "image": [
                "https://assets.leetcode.com/uploads/2021/01/04/list1.jpg",
                "https://assets.leetcode.com/uploads/2021/01/04/list2.jpg"
            ],
            "previous_element": [
                "Example 1:",
                "Example 2:"
            ]
        }
    },
    "84": {
        "title": "Largest Rectangle in Histogram",
        "title_slug": "largest-rectangle-in-histogram",
        "link": "https://leetcode.com/problems/largest-rectangle-in-histogram",
        "difficulty": "Hard",
        "similar_topics": [
            "Array",
            "Stack",
            "Monotonic Stack"
        ],
        "question": "Given an array of integers heights representing the histogram's bar height where the width of each bar is 1, return the area of the largest rectangle in the histogram.\n\u00a0\nExample 1:\n\nInput: heights = [2,1,5,6,2,3]\nOutput: 10\nExplanation: The above is a histogram where width of each bar is 1.\nThe largest rectangle is shown in the red area, which has an area = 10 units.\n\nExample 2:\n\nInput: heights = [2,4]\nOutput: 4\n\n\u00a0\nConstraints:\n\n1 <= heights.length <= 105\n0 <= heights[i] <= 104\n\n",
        "images": {
            "image": [
                "https://assets.leetcode.com/uploads/2021/01/04/histogram.jpg",
                "https://assets.leetcode.com/uploads/2021/01/04/histogram-1.jpg"
            ],
            "previous_element": [
                "Example 1:",
                "Example 2:"
            ]
        }
    },
    "85": {
        "title": "Maximal Rectangle",
        "title_slug": "maximal-rectangle",
        "link": "https://leetcode.com/problems/maximal-rectangle",
        "difficulty": "Hard",
        "similar_topics": [
            "Array",
            "Dynamic Programming",
            "Stack",
            "Matrix",
            "Monotonic Stack"
        ],
        "question": "Given a rows x cols\u00a0binary matrix filled with 0's and 1's, find the largest rectangle containing only 1's and return its area.\n\u00a0\nExample 1:\n\nInput: matrix = [[\"1\",\"0\",\"1\",\"0\",\"0\"],[\"1\",\"0\",\"1\",\"1\",\"1\"],[\"1\",\"1\",\"1\",\"1\",\"1\"],[\"1\",\"0\",\"0\",\"1\",\"0\"]]\nOutput: 6\nExplanation: The maximal rectangle is shown in the above picture.\n\nExample 2:\nInput: matrix = [[\"0\"]]\nOutput: 0\n\nExample 3:\nInput: matrix = [[\"1\"]]\nOutput: 1\n\n\u00a0\nConstraints:\n\nrows == matrix.length\ncols == matrix[i].length\n1 <= row, cols <= 200\nmatrix[i][j] is '0' or '1'.\n\n",
        "images": {
            "image": [
                "https://assets.leetcode.com/uploads/2020/09/14/maximal.jpg"
            ],
            "previous_element": [
                "Example 1:"
            ]
        }
    },
    "86": {
        "title": "Partition List",
        "title_slug": "partition-list",
        "link": "https://leetcode.com/problems/partition-list",
        "difficulty": "Medium",
        "similar_topics": [
            "Linked List",
            "Two Pointers"
        ],
        "question": "Given the head of a linked list and a value x, partition it such that all nodes less than x come before nodes greater than or equal to x.\nYou should preserve the original relative order of the nodes in each of the two partitions.\n\u00a0\nExample 1:\n\nInput: head = [1,4,3,2,5,2], x = 3\nOutput: [1,2,2,4,3,5]\n\nExample 2:\nInput: head = [2,1], x = 2\nOutput: [1,2]\n\n\u00a0\nConstraints:\n\nThe number of nodes in the list is in the range [0, 200].\n-100 <= Node.val <= 100\n-200 <= x <= 200\n\n",
        "images": {
            "image": [
                "https://assets.leetcode.com/uploads/2021/01/04/partition.jpg"
            ],
            "previous_element": [
                "Example 1:"
            ]
        }
    },
    "87": {
        "title": "Scramble String",
        "title_slug": "scramble-string",
        "link": "https://leetcode.com/problems/scramble-string",
        "difficulty": "Hard",
        "similar_topics": [
            "String",
            "Dynamic Programming"
        ],
        "question": "We can scramble a string s to get a string t using the following algorithm:\n\nIf the length of the string is 1, stop.\nIf the length of the string is > 1, do the following:\n\t\nSplit the string into two non-empty substrings at a random index, i.e., if the string is s, divide it to x and y where s = x + y.\nRandomly\u00a0decide to swap the two substrings or to keep them in the same order. i.e., after this step, s may become s = x + y or s = y + x.\nApply step 1 recursively on each of the two substrings x and y.\n\n\n\nGiven two strings s1 and s2 of the same length, return true if s2 is a scrambled string of s1, otherwise, return false.\n\u00a0\nExample 1:\nInput: s1 = \"great\", s2 = \"rgeat\"\nOutput: true\nExplanation: One possible scenario applied on s1 is:\n\"great\" --> \"gr/eat\" // divide at random index.\n\"gr/eat\" --> \"gr/eat\" // random decision is not to swap the two substrings and keep them in order.\n\"gr/eat\" --> \"g/r / e/at\" // apply the same algorithm recursively on both substrings. divide at random index each of them.\n\"g/r / e/at\" --> \"r/g / e/at\" // random decision was to swap the first substring and to keep the second substring in the same order.\n\"r/g / e/at\" --> \"r/g / e/ a/t\" // again apply the algorithm recursively, divide \"at\" to \"a/t\".\n\"r/g / e/ a/t\" --> \"r/g / e/ a/t\" // random decision is to keep both substrings in the same order.\nThe algorithm stops now, and the result string is \"rgeat\" which is s2.\nAs one possible scenario led s1 to be scrambled to s2, we return true.\n\nExample 2:\nInput: s1 = \"abcde\", s2 = \"caebd\"\nOutput: false\n\nExample 3:\nInput: s1 = \"a\", s2 = \"a\"\nOutput: true\n\n\u00a0\nConstraints:\n\ns1.length == s2.length\n1 <= s1.length <= 30\ns1 and s2 consist of lowercase English letters.\n\n",
        "images": {
            "image": [],
            "previous_element": []
        }
    },
    "88": {
        "title": "Merge Sorted Array",
        "title_slug": "merge-sorted-array",
        "link": "https://leetcode.com/problems/merge-sorted-array",
        "difficulty": "Easy",
        "similar_topics": [
            "Array",
            "Two Pointers",
            "Sorting"
        ],
        "question": "You are given two integer arrays nums1 and nums2, sorted in non-decreasing order, and two integers m and n, representing the number of elements in nums1 and nums2 respectively.\nMerge nums1 and nums2 into a single array sorted in non-decreasing order.\nThe final sorted array should not be returned by the function, but instead be stored inside the array nums1. To accommodate this, nums1 has a length of m + n, where the first m elements denote the elements that should be merged, and the last n elements are set to 0 and should be ignored. nums2 has a length of n.\n\u00a0\nExample 1:\nInput: nums1 = [1,2,3,0,0,0], m = 3, nums2 = [2,5,6], n = 3\nOutput: [1,2,2,3,5,6]\nExplanation: The arrays we are merging are [1,2,3] and [2,5,6].\nThe result of the merge is [1,2,2,3,5,6] with the underlined elements coming from nums1.\n\nExample 2:\nInput: nums1 = [1], m = 1, nums2 = [], n = 0\nOutput: [1]\nExplanation: The arrays we are merging are [1] and [].\nThe result of the merge is [1].\n\nExample 3:\nInput: nums1 = [0], m = 0, nums2 = [1], n = 1\nOutput: [1]\nExplanation: The arrays we are merging are [] and [1].\nThe result of the merge is [1].\nNote that because m = 0, there are no elements in nums1. The 0 is only there to ensure the merge result can fit in nums1.\n\n\u00a0\nConstraints:\n\nnums1.length == m + n\nnums2.length == n\n0 <= m, n <= 200\n1 <= m + n <= 200\n-109 <= nums1[i], nums2[j] <= 109\n\n\u00a0\nFollow up: Can you come up with an algorithm that runs in O(m + n) time?\n",
        "images": {
            "image": [],
            "previous_element": []
        }
    },
    "89": {
        "title": "Gray Code",
        "title_slug": "gray-code",
        "link": "https://leetcode.com/problems/gray-code",
        "difficulty": "Medium",
        "similar_topics": [
            "Math",
            "Backtracking",
            "Bit Manipulation"
        ],
        "question": "An n-bit gray code sequence is a sequence of 2n integers where:\n\nEvery integer is in the inclusive range [0, 2n - 1],\nThe first integer is 0,\nAn integer appears no more than once in the sequence,\nThe binary representation of every pair of adjacent integers differs by exactly one bit, and\nThe binary representation of the first and last integers differs by exactly one bit.\n\nGiven an integer n, return any valid n-bit gray code sequence.\n\u00a0\nExample 1:\nInput: n = 2\nOutput: [0,1,3,2]\nExplanation:\nThe binary representation of [0,1,3,2] is [00,01,11,10].\n- 00 and 01 differ by one bit\n- 01 and 11 differ by one bit\n- 11 and 10 differ by one bit\n- 10 and 00 differ by one bit\n[0,2,3,1] is also a valid gray code sequence, whose binary representation is [00,10,11,01].\n- 00 and 10 differ by one bit\n- 10 and 11 differ by one bit\n- 11 and 01 differ by one bit\n- 01 and 00 differ by one bit\n\nExample 2:\nInput: n = 1\nOutput: [0,1]\n\n\u00a0\nConstraints:\n\n1 <= n <= 16\n\n",
        "images": {
            "image": [],
            "previous_element": []
        }
    },
    "90": {
        "title": "Subsets II",
        "title_slug": "subsets-ii",
        "link": "https://leetcode.com/problems/subsets-ii",
        "difficulty": "Medium",
        "similar_topics": [
            "Array",
            "Backtracking",
            "Bit Manipulation"
        ],
        "question": "Given an integer array nums that may contain duplicates, return all possible subsets (the power set).\nThe solution set must not contain duplicate subsets. Return the solution in any order.\n\u00a0\nExample 1:\nInput: nums = [1,2,2]\nOutput: [[],[1],[1,2],[1,2,2],[2],[2,2]]\nExample 2:\nInput: nums = [0]\nOutput: [[],[0]]\n\n\u00a0\nConstraints:\n\n1 <= nums.length <= 10\n-10 <= nums[i] <= 10\n\n",
        "images": {
            "image": [],
            "previous_element": []
        }
    },
    "91": {
        "title": "Decode Ways",
        "title_slug": "decode-ways",
        "link": "https://leetcode.com/problems/decode-ways",
        "difficulty": "Medium",
        "similar_topics": [
            "String",
            "Dynamic Programming"
        ],
        "question": "A message containing letters from A-Z can be encoded into numbers using the following mapping:\n'A' -> \"1\"\n'B' -> \"2\"\n...\n'Z' -> \"26\"\n\nTo decode an encoded message, all the digits must be grouped then mapped back into letters using the reverse of the mapping above (there may be multiple ways). For example, \"11106\" can be mapped into:\n\n\"AAJF\" with the grouping (1 1 10 6)\n\"KJF\" with the grouping (11 10 6)\n\nNote that the grouping (1 11 06) is invalid because \"06\" cannot be mapped into 'F' since \"6\" is different from \"06\".\nGiven a string s containing only digits, return the number of ways to decode it.\nThe test cases are generated so that the answer fits in a 32-bit integer.\n\u00a0\nExample 1:\nInput: s = \"12\"\nOutput: 2\nExplanation: \"12\" could be decoded as \"AB\" (1 2) or \"L\" (12).\n\nExample 2:\nInput: s = \"226\"\nOutput: 3\nExplanation: \"226\" could be decoded as \"BZ\" (2 26), \"VF\" (22 6), or \"BBF\" (2 2 6).\n\nExample 3:\nInput: s = \"06\"\nOutput: 0\nExplanation: \"06\" cannot be mapped to \"F\" because of the leading zero (\"6\" is different from \"06\").\n\n\u00a0\nConstraints:\n\n1 <= s.length <= 100\ns contains only digits and may contain leading zero(s).\n\n",
        "images": {
            "image": [],
            "previous_element": []
        }
    },
    "92": {
        "title": "Reverse Linked List II",
        "title_slug": "reverse-linked-list-ii",
        "link": "https://leetcode.com/problems/reverse-linked-list-ii",
        "difficulty": "Medium",
        "similar_topics": [
            "Linked List"
        ],
        "question": "Given the head of a singly linked list and two integers left and right where left <= right, reverse the nodes of the list from position left to position right, and return the reversed list.\n\u00a0\nExample 1:\n\nInput: head = [1,2,3,4,5], left = 2, right = 4\nOutput: [1,4,3,2,5]\n\nExample 2:\nInput: head = [5], left = 1, right = 1\nOutput: [5]\n\n\u00a0\nConstraints:\n\nThe number of nodes in the list is n.\n1 <= n <= 500\n-500 <= Node.val <= 500\n1 <= left <= right <= n\n\n\u00a0\nFollow up: Could you do it in one pass?",
        "images": {
            "image": [
                "https://assets.leetcode.com/uploads/2021/02/19/rev2ex2.jpg"
            ],
            "previous_element": [
                "Example 1:"
            ]
        }
    },
    "93": {
        "title": "Restore IP Addresses",
        "title_slug": "restore-ip-addresses",
        "link": "https://leetcode.com/problems/restore-ip-addresses",
        "difficulty": "Medium",
        "similar_topics": [
            "String",
            "Backtracking"
        ],
        "question": "A valid IP address consists of exactly four integers separated by single dots. Each integer is between 0 and 255 (inclusive) and cannot have leading zeros.\n\nFor example, \"0.1.2.201\" and \"192.168.1.1\" are valid IP addresses, but \"0.011.255.245\", \"192.168.1.312\" and \"192.168@1.1\" are invalid IP addresses.\n\nGiven a string s containing only digits, return all possible valid IP addresses that can be formed by inserting dots into s. You are not allowed to reorder or remove any digits in s. You may return the valid IP addresses in any order.\n\u00a0\nExample 1:\nInput: s = \"25525511135\"\nOutput: [\"255.255.11.135\",\"255.255.111.35\"]\n\nExample 2:\nInput: s = \"0000\"\nOutput: [\"0.0.0.0\"]\n\nExample 3:\nInput: s = \"101023\"\nOutput: [\"1.0.10.23\",\"1.0.102.3\",\"10.1.0.23\",\"10.10.2.3\",\"101.0.2.3\"]\n\n\u00a0\nConstraints:\n\n1 <= s.length <= 20\ns consists of digits only.\n\n",
        "images": {
            "image": [],
            "previous_element": []
        }
    },
    "94": {
        "title": "Binary Tree Inorder Traversal",
        "title_slug": "binary-tree-inorder-traversal",
        "link": "https://leetcode.com/problems/binary-tree-inorder-traversal",
        "difficulty": "Easy",
        "similar_topics": [
            "Stack",
            "Tree",
            "Depth-First Search",
            "Binary Tree"
        ],
        "question": "Given the root of a binary tree, return the inorder traversal of its nodes' values.\n\u00a0\nExample 1:\n\nInput: root = [1,null,2,3]\nOutput: [1,3,2]\n\nExample 2:\nInput: root = []\nOutput: []\n\nExample 3:\nInput: root = [1]\nOutput: [1]\n\n\u00a0\nConstraints:\n\nThe number of nodes in the tree is in the range [0, 100].\n-100 <= Node.val <= 100\n\n\u00a0\nFollow up: Recursive solution is trivial, could you do it iteratively?",
        "images": {
            "image": [
                "https://assets.leetcode.com/uploads/2020/09/15/inorder_1.jpg"
            ],
            "previous_element": [
                "Example 1:"
            ]
        }
    },
    "95": {
        "title": "Unique Binary Search Trees II",
        "title_slug": "unique-binary-search-trees-ii",
        "link": "https://leetcode.com/problems/unique-binary-search-trees-ii",
        "difficulty": "Medium",
        "similar_topics": [
            "Dynamic Programming",
            "Backtracking",
            "Tree",
            "Binary Search Tree",
            "Binary Tree"
        ],
        "question": "Given an integer n, return all the structurally unique BST's (binary search trees), which has exactly n nodes of unique values from 1 to n. Return the answer in any order.\n\u00a0\nExample 1:\n\nInput: n = 3\nOutput: [[1,null,2,null,3],[1,null,3,2],[2,1,3],[3,1,null,null,2],[3,2,null,1]]\n\nExample 2:\nInput: n = 1\nOutput: [[1]]\n\n\u00a0\nConstraints:\n\n1 <= n <= 8\n\n",
        "images": {
            "image": [
                "https://assets.leetcode.com/uploads/2021/01/18/uniquebstn3.jpg"
            ],
            "previous_element": [
                "Example 1:"
            ]
        }
    },
    "96": {
        "title": "Unique Binary Search Trees",
        "title_slug": "unique-binary-search-trees",
        "link": "https://leetcode.com/problems/unique-binary-search-trees",
        "difficulty": "Medium",
        "similar_topics": [
            "Math",
            "Dynamic Programming",
            "Tree",
            "Binary Search Tree",
            "Binary Tree"
        ],
        "question": "Given an integer n, return the number of structurally unique BST's (binary search trees) which has exactly n nodes of unique values from 1 to n.\n\u00a0\nExample 1:\n\nInput: n = 3\nOutput: 5\n\nExample 2:\nInput: n = 1\nOutput: 1\n\n\u00a0\nConstraints:\n\n1 <= n <= 19\n\n",
        "images": {
            "image": [
                "https://assets.leetcode.com/uploads/2021/01/18/uniquebstn3.jpg"
            ],
            "previous_element": [
                "Example 1:"
            ]
        }
    },
    "97": {
        "title": "Interleaving String",
        "title_slug": "interleaving-string",
        "link": "https://leetcode.com/problems/interleaving-string",
        "difficulty": "Medium",
        "similar_topics": [
            "String",
            "Dynamic Programming"
        ],
        "question": "Given strings s1, s2, and s3, find whether s3 is formed by an interleaving of s1 and s2.\nAn interleaving of two strings s and t is a configuration where s and t are divided into n and m non-empty substrings respectively, such that:\n\ns = s1 + s2 + ... + sn\nt = t1 + t2 + ... + tm\n|n - m| <= 1\nThe interleaving is s1 + t1 + s2 + t2 + s3 + t3 + ... or t1 + s1 + t2 + s2 + t3 + s3 + ...\n\nNote: a + b is the concatenation of strings a and b.\n\u00a0\nExample 1:\n\nInput: s1 = \"aabcc\", s2 = \"dbbca\", s3 = \"aadbbcbcac\"\nOutput: true\nExplanation: One way to obtain s3 is:\nSplit s1 into s1 = \"aa\" + \"bc\" + \"c\", and s2 into s2 = \"dbbc\" + \"a\".\nInterleaving the two splits, we get \"aa\" + \"dbbc\" + \"bc\" + \"a\" + \"c\" = \"aadbbcbcac\".\nSince s3 can be obtained by interleaving s1 and s2, we return true.\n\nExample 2:\nInput: s1 = \"aabcc\", s2 = \"dbbca\", s3 = \"aadbbbaccc\"\nOutput: false\nExplanation: Notice how it is impossible to interleave s2 with any other string to obtain s3.\n\nExample 3:\nInput: s1 = \"\", s2 = \"\", s3 = \"\"\nOutput: true\n\n\u00a0\nConstraints:\n\n0 <= s1.length, s2.length <= 100\n0 <= s3.length <= 200\ns1, s2, and s3 consist of lowercase English letters.\n\n\u00a0\nFollow up: Could you solve it using only O(s2.length) additional memory space?\n",
        "images": {
            "image": [
                "https://assets.leetcode.com/uploads/2020/09/02/interleave.jpg"
            ],
            "previous_element": [
                "Example 1:"
            ]
        }
    },
    "98": {
        "title": "Validate Binary Search Tree",
        "title_slug": "validate-binary-search-tree",
        "link": "https://leetcode.com/problems/validate-binary-search-tree",
        "difficulty": "Medium",
        "similar_topics": [
            "Tree",
            "Depth-First Search",
            "Binary Search Tree",
            "Binary Tree"
        ],
        "question": "Given the root of a binary tree, determine if it is a valid binary search tree (BST).\nA valid BST is defined as follows:\n\nThe left subtree of a node contains only nodes with keys less than the node's key.\nThe right subtree of a node contains only nodes with keys greater than the node's key.\nBoth the left and right subtrees must also be binary search trees.\n\n\u00a0\nExample 1:\n\nInput: root = [2,1,3]\nOutput: true\n\nExample 2:\n\nInput: root = [5,1,4,null,null,3,6]\nOutput: false\nExplanation: The root node's value is 5 but its right child's value is 4.\n\n\u00a0\nConstraints:\n\nThe number of nodes in the tree is in the range [1, 104].\n-231 <= Node.val <= 231 - 1\n\n",
        "images": {
            "image": [
                "https://assets.leetcode.com/uploads/2020/12/01/tree1.jpg",
                "https://assets.leetcode.com/uploads/2020/12/01/tree2.jpg"
            ],
            "previous_element": [
                "Example 1:",
                "Example 2:"
            ]
        }
    },
    "99": {
        "title": "Recover Binary Search Tree",
        "title_slug": "recover-binary-search-tree",
        "link": "https://leetcode.com/problems/recover-binary-search-tree",
        "difficulty": "Medium",
        "similar_topics": [
            "Tree",
            "Depth-First Search",
            "Binary Search Tree",
            "Binary Tree"
        ],
        "question": "You are given the root of a binary search tree (BST), where the values of exactly two nodes of the tree were swapped by mistake. Recover the tree without changing its structure.\n\u00a0\nExample 1:\n\nInput: root = [1,3,null,null,2]\nOutput: [3,1,null,null,2]\nExplanation: 3 cannot be a left child of 1 because 3 > 1. Swapping 1 and 3 makes the BST valid.\n\nExample 2:\n\nInput: root = [3,1,4,null,null,2]\nOutput: [2,1,4,null,null,3]\nExplanation: 2 cannot be in the right subtree of 3 because 2 < 3. Swapping 2 and 3 makes the BST valid.\n\n\u00a0\nConstraints:\n\nThe number of nodes in the tree is in the range [2, 1000].\n-231 <= Node.val <= 231 - 1\n\n\u00a0\nFollow up: A solution using O(n) space is pretty straight-forward. Could you devise a constant O(1) space solution?",
        "images": {
            "image": [
                "https://assets.leetcode.com/uploads/2020/10/28/recover1.jpg",
                "https://assets.leetcode.com/uploads/2020/10/28/recover2.jpg"
            ],
            "previous_element": [
                "Example 1:",
                "Example 2:"
            ]
        }
    },
    "100": {
        "title": "Same Tree",
        "title_slug": "same-tree",
        "link": "https://leetcode.com/problems/same-tree",
        "difficulty": "Easy",
        "similar_topics": [
            "Tree",
            "Depth-First Search",
            "Breadth-First Search",
            "Binary Tree"
        ],
        "question": "Given the roots of two binary trees p and q, write a function to check if they are the same or not.\nTwo binary trees are considered the same if they are structurally identical, and the nodes have the same value.\n\u00a0\nExample 1:\n\nInput: p = [1,2,3], q = [1,2,3]\nOutput: true\n\nExample 2:\n\nInput: p = [1,2], q = [1,null,2]\nOutput: false\n\nExample 3:\n\nInput: p = [1,2,1], q = [1,1,2]\nOutput: false\n\n\u00a0\nConstraints:\n\nThe number of nodes in both trees is in the range [0, 100].\n-104 <= Node.val <= 104\n\n",
        "images": {
            "image": [
                "https://assets.leetcode.com/uploads/2020/12/20/ex1.jpg",
                "https://assets.leetcode.com/uploads/2020/12/20/ex2.jpg",
                "https://assets.leetcode.com/uploads/2020/12/20/ex3.jpg"
            ],
            "previous_element": [
                "Example 1:",
                "Example 2:",
                "Example 3:"
            ]
        }
    },
    "101": {
        "title": "Symmetric Tree",
        "title_slug": "symmetric-tree",
        "link": "https://leetcode.com/problems/symmetric-tree",
        "difficulty": "Easy",
        "similar_topics": [
            "Tree",
            "Depth-First Search",
            "Breadth-First Search",
            "Binary Tree"
        ],
        "question": "Given the root of a binary tree, check whether it is a mirror of itself (i.e., symmetric around its center).\n\u00a0\nExample 1:\n\nInput: root = [1,2,2,3,4,4,3]\nOutput: true\n\nExample 2:\n\nInput: root = [1,2,2,null,3,null,3]\nOutput: false\n\n\u00a0\nConstraints:\n\nThe number of nodes in the tree is in the range [1, 1000].\n-100 <= Node.val <= 100\n\n\u00a0\nFollow up: Could you solve it both recursively and iteratively?",
        "images": {
            "image": [
                "https://assets.leetcode.com/uploads/2021/02/19/symtree1.jpg",
                "https://assets.leetcode.com/uploads/2021/02/19/symtree2.jpg"
            ],
            "previous_element": [
                "Example 1:",
                "Example 2:"
            ]
        }
    },
    "102": {
        "title": "Binary Tree Level Order Traversal",
        "title_slug": "binary-tree-level-order-traversal",
        "link": "https://leetcode.com/problems/binary-tree-level-order-traversal",
        "difficulty": "Medium",
        "similar_topics": [
            "Tree",
            "Breadth-First Search",
            "Binary Tree"
        ],
        "question": "Given the root of a binary tree, return the level order traversal of its nodes' values. (i.e., from left to right, level by level).\n\u00a0\nExample 1:\n\nInput: root = [3,9,20,null,null,15,7]\nOutput: [[3],[9,20],[15,7]]\n\nExample 2:\nInput: root = [1]\nOutput: [[1]]\n\nExample 3:\nInput: root = []\nOutput: []\n\n\u00a0\nConstraints:\n\nThe number of nodes in the tree is in the range [0, 2000].\n-1000 <= Node.val <= 1000\n\n",
        "images": {
            "image": [
                "https://assets.leetcode.com/uploads/2021/02/19/tree1.jpg"
            ],
            "previous_element": [
                "Example 1:"
            ]
        }
    },
    "103": {
        "title": "Binary Tree Zigzag Level Order Traversal",
        "title_slug": "binary-tree-zigzag-level-order-traversal",
        "link": "https://leetcode.com/problems/binary-tree-zigzag-level-order-traversal",
        "difficulty": "Medium",
        "similar_topics": [
            "Tree",
            "Breadth-First Search",
            "Binary Tree"
        ],
        "question": "Given the root of a binary tree, return the zigzag level order traversal of its nodes' values. (i.e., from left to right, then right to left for the next level and alternate between).\n\u00a0\nExample 1:\n\nInput: root = [3,9,20,null,null,15,7]\nOutput: [[3],[20,9],[15,7]]\n\nExample 2:\nInput: root = [1]\nOutput: [[1]]\n\nExample 3:\nInput: root = []\nOutput: []\n\n\u00a0\nConstraints:\n\nThe number of nodes in the tree is in the range [0, 2000].\n-100 <= Node.val <= 100\n\n",
        "images": {
            "image": [
                "https://assets.leetcode.com/uploads/2021/02/19/tree1.jpg"
            ],
            "previous_element": [
                "Example 1:"
            ]
        }
    },
    "104": {
        "title": "Maximum Depth of Binary Tree",
        "title_slug": "maximum-depth-of-binary-tree",
        "link": "https://leetcode.com/problems/maximum-depth-of-binary-tree",
        "difficulty": "Easy",
        "similar_topics": [
            "Tree",
            "Depth-First Search",
            "Breadth-First Search",
            "Binary Tree"
        ],
        "question": "Given the root of a binary tree, return its maximum depth.\nA binary tree's maximum depth\u00a0is the number of nodes along the longest path from the root node down to the farthest leaf node.\n\u00a0\nExample 1:\n\nInput: root = [3,9,20,null,null,15,7]\nOutput: 3\n\nExample 2:\nInput: root = [1,null,2]\nOutput: 2\n\n\u00a0\nConstraints:\n\nThe number of nodes in the tree is in the range [0, 104].\n-100 <= Node.val <= 100\n\n",
        "images": {
            "image": [
                "https://assets.leetcode.com/uploads/2020/11/26/tmp-tree.jpg"
            ],
            "previous_element": [
                "Example 1:"
            ]
        }
    },
    "105": {
        "title": "Construct Binary Tree from Preorder and Inorder Traversal",
        "title_slug": "construct-binary-tree-from-preorder-and-inorder-traversal",
        "link": "https://leetcode.com/problems/construct-binary-tree-from-preorder-and-inorder-traversal",
        "difficulty": "Medium",
        "similar_topics": [
            "Array",
            "Hash Table",
            "Divide and Conquer",
            "Tree",
            "Binary Tree"
        ],
        "question": "Given two integer arrays preorder and inorder where preorder is the preorder traversal of a binary tree and inorder is the inorder traversal of the same tree, construct and return the binary tree.\n\u00a0\nExample 1:\n\nInput: preorder = [3,9,20,15,7], inorder = [9,3,15,20,7]\nOutput: [3,9,20,null,null,15,7]\n\nExample 2:\nInput: preorder = [-1], inorder = [-1]\nOutput: [-1]\n\n\u00a0\nConstraints:\n\n1 <= preorder.length <= 3000\ninorder.length == preorder.length\n-3000 <= preorder[i], inorder[i] <= 3000\npreorder and inorder consist of unique values.\nEach value of inorder also appears in preorder.\npreorder is guaranteed to be the preorder traversal of the tree.\ninorder is guaranteed to be the inorder traversal of the tree.\n\n",
        "images": {
            "image": [
                "https://assets.leetcode.com/uploads/2021/02/19/tree.jpg"
            ],
            "previous_element": [
                "Example 1:"
            ]
        }
    },
    "106": {
        "title": "Construct Binary Tree from Inorder and Postorder Traversal",
        "title_slug": "construct-binary-tree-from-inorder-and-postorder-traversal",
        "link": "https://leetcode.com/problems/construct-binary-tree-from-inorder-and-postorder-traversal",
        "difficulty": "Medium",
        "similar_topics": [
            "Array",
            "Hash Table",
            "Divide and Conquer",
            "Tree",
            "Binary Tree"
        ],
        "question": "Given two integer arrays inorder and postorder where inorder is the inorder traversal of a binary tree and postorder is the postorder traversal of the same tree, construct and return the binary tree.\n\u00a0\nExample 1:\n\nInput: inorder = [9,3,15,20,7], postorder = [9,15,7,20,3]\nOutput: [3,9,20,null,null,15,7]\n\nExample 2:\nInput: inorder = [-1], postorder = [-1]\nOutput: [-1]\n\n\u00a0\nConstraints:\n\n1 <= inorder.length <= 3000\npostorder.length == inorder.length\n-3000 <= inorder[i], postorder[i] <= 3000\ninorder and postorder consist of unique values.\nEach value of postorder also appears in inorder.\ninorder is guaranteed to be the inorder traversal of the tree.\npostorder is guaranteed to be the postorder traversal of the tree.\n\n",
        "images": {
            "image": [
                "https://assets.leetcode.com/uploads/2021/02/19/tree.jpg"
            ],
            "previous_element": [
                "Example 1:"
            ]
        }
    },
    "107": {
        "title": "Binary Tree Level Order Traversal II",
        "title_slug": "binary-tree-level-order-traversal-ii",
        "link": "https://leetcode.com/problems/binary-tree-level-order-traversal-ii",
        "difficulty": "Medium",
        "similar_topics": [
            "Tree",
            "Breadth-First Search",
            "Binary Tree"
        ],
        "question": "Given the root of a binary tree, return the bottom-up level order traversal of its nodes' values. (i.e., from left to right, level by level from leaf to root).\n\u00a0\nExample 1:\n\nInput: root = [3,9,20,null,null,15,7]\nOutput: [[15,7],[9,20],[3]]\n\nExample 2:\nInput: root = [1]\nOutput: [[1]]\n\nExample 3:\nInput: root = []\nOutput: []\n\n\u00a0\nConstraints:\n\nThe number of nodes in the tree is in the range [0, 2000].\n-1000 <= Node.val <= 1000\n\n",
        "images": {
            "image": [
                "https://assets.leetcode.com/uploads/2021/02/19/tree1.jpg"
            ],
            "previous_element": [
                "Example 1:"
            ]
        }
    },
    "108": {
        "title": "Convert Sorted Array to Binary Search Tree",
        "title_slug": "convert-sorted-array-to-binary-search-tree",
        "link": "https://leetcode.com/problems/convert-sorted-array-to-binary-search-tree",
        "difficulty": "Easy",
        "similar_topics": [
            "Array",
            "Divide and Conquer",
            "Tree",
            "Binary Search Tree",
            "Binary Tree"
        ],
        "question": "Given an integer array nums where the elements are sorted in ascending order, convert it to a height-balanced binary search tree.\nA height-balanced binary tree is a binary tree in which the depth of the two subtrees of every node never differs by more than one.\n\u00a0\nExample 1:\n\nInput: nums = [-10,-3,0,5,9]\nOutput: [0,-3,9,-10,null,5]\nExplanation: [0,-10,5,null,-3,null,9] is also accepted:\n\n\nExample 2:\n\nInput: nums = [1,3]\nOutput: [3,1]\nExplanation: [1,null,3] and [3,1] are both height-balanced BSTs.\n\n\u00a0\nConstraints:\n\n1 <= nums.length <= 104\n-104 <= nums[i] <= 104\nnums is sorted in a strictly increasing order.\n\n",
        "images": {
            "image": [
                "https://assets.leetcode.com/uploads/2021/02/18/btree1.jpg",
                "https://assets.leetcode.com/uploads/2021/02/18/btree2.jpg",
                "https://assets.leetcode.com/uploads/2021/02/18/btree.jpg"
            ],
            "previous_element": [
                "Example 1:",
                "Explanation:",
                "Example 2:"
            ]
        }
    },
    "109": {
        "title": "Convert Sorted List to Binary Search Tree",
        "title_slug": "convert-sorted-list-to-binary-search-tree",
        "link": "https://leetcode.com/problems/convert-sorted-list-to-binary-search-tree",
        "difficulty": "Medium",
        "similar_topics": [
            "Linked List",
            "Divide and Conquer",
            "Tree",
            "Binary Search Tree",
            "Binary Tree"
        ],
        "question": "Given the head of a singly linked list where elements are sorted in ascending order, convert it to a height balanced BST.\nFor this problem, a height-balanced binary tree is defined as a binary tree in which the depth of the two subtrees of every node never differ by more than 1.\n\u00a0\nExample 1:\n\nInput: head = [-10,-3,0,5,9]\nOutput: [0,-3,9,-10,null,5]\nExplanation: One possible answer is [0,-3,9,-10,null,5], which represents the shown height balanced BST.\n\nExample 2:\nInput: head = []\nOutput: []\n\n\u00a0\nConstraints:\n\nThe number of nodes in head is in the range [0, 2 * 104].\n-105 <= Node.val <= 105\n\n",
        "images": {
            "image": [
                "https://assets.leetcode.com/uploads/2020/08/17/linked.jpg"
            ],
            "previous_element": [
                "Example 1:"
            ]
        }
    },
    "110": {
        "title": "Balanced Binary Tree",
        "title_slug": "balanced-binary-tree",
        "link": "https://leetcode.com/problems/balanced-binary-tree",
        "difficulty": "Easy",
        "similar_topics": [
            "Tree",
            "Depth-First Search",
            "Binary Tree"
        ],
        "question": "Given a binary tree, determine if it is height-balanced.\nFor this problem, a height-balanced binary tree is defined as:\n\na binary tree in which the left and right subtrees of every node differ in height by no more than 1.\n\n\u00a0\nExample 1:\n\nInput: root = [3,9,20,null,null,15,7]\nOutput: true\n\nExample 2:\n\nInput: root = [1,2,2,3,3,null,null,4,4]\nOutput: false\n\nExample 3:\nInput: root = []\nOutput: true\n\n\u00a0\nConstraints:\n\nThe number of nodes in the tree is in the range [0, 5000].\n-104 <= Node.val <= 104\n\n",
        "images": {
            "image": [
                "https://assets.leetcode.com/uploads/2020/10/06/balance_1.jpg",
                "https://assets.leetcode.com/uploads/2020/10/06/balance_2.jpg"
            ],
            "previous_element": [
                "Example 1:",
                "Example 2:"
            ]
        }
    },
    "111": {
        "title": "Minimum Depth of Binary Tree",
        "title_slug": "minimum-depth-of-binary-tree",
        "link": "https://leetcode.com/problems/minimum-depth-of-binary-tree",
        "difficulty": "Easy",
        "similar_topics": [
            "Tree",
            "Depth-First Search",
            "Breadth-First Search",
            "Binary Tree"
        ],
        "question": "Given a binary tree, find its minimum depth.\nThe minimum depth is the number of nodes along the shortest path from the root node down to the nearest leaf node.\nNote:\u00a0A leaf is a node with no children.\n\u00a0\nExample 1:\n\nInput: root = [3,9,20,null,null,15,7]\nOutput: 2\n\nExample 2:\nInput: root = [2,null,3,null,4,null,5,null,6]\nOutput: 5\n\n\u00a0\nConstraints:\n\nThe number of nodes in the tree is in the range [0, 105].\n-1000 <= Node.val <= 1000\n\n",
        "images": {
            "image": [
                "https://assets.leetcode.com/uploads/2020/10/12/ex_depth.jpg"
            ],
            "previous_element": [
                "Example 1:"
            ]
        }
    },
    "112": {
        "title": "Path Sum",
        "title_slug": "path-sum",
        "link": "https://leetcode.com/problems/path-sum",
        "difficulty": "Easy",
        "similar_topics": [
            "Tree",
            "Depth-First Search",
            "Breadth-First Search",
            "Binary Tree"
        ],
        "question": "Given the root of a binary tree and an integer targetSum, return true if the tree has a root-to-leaf path such that adding up all the values along the path equals targetSum.\nA leaf is a node with no children.\n\u00a0\nExample 1:\n\nInput: root = [5,4,8,11,null,13,4,7,2,null,null,null,1], targetSum = 22\nOutput: true\nExplanation: The root-to-leaf path with the target sum is shown.\n\nExample 2:\n\nInput: root = [1,2,3], targetSum = 5\nOutput: false\nExplanation: There two root-to-leaf paths in the tree:\n(1 --> 2): The sum is 3.\n(1 --> 3): The sum is 4.\nThere is no root-to-leaf path with sum = 5.\n\nExample 3:\nInput: root = [], targetSum = 0\nOutput: false\nExplanation: Since the tree is empty, there are no root-to-leaf paths.\n\n\u00a0\nConstraints:\n\nThe number of nodes in the tree is in the range [0, 5000].\n-1000 <= Node.val <= 1000\n-1000 <= targetSum <= 1000\n\n",
        "images": {
            "image": [
                "https://assets.leetcode.com/uploads/2021/01/18/pathsum1.jpg",
                "https://assets.leetcode.com/uploads/2021/01/18/pathsum2.jpg"
            ],
            "previous_element": [
                "Example 1:",
                "Example 2:"
            ]
        }
    },
    "113": {
        "title": "Path Sum II",
        "title_slug": "path-sum-ii",
        "link": "https://leetcode.com/problems/path-sum-ii",
        "difficulty": "Medium",
        "similar_topics": [
            "Backtracking",
            "Tree",
            "Depth-First Search",
            "Binary Tree"
        ],
        "question": "Given the root of a binary tree and an integer targetSum, return all root-to-leaf paths where the sum of the node values in the path equals targetSum. Each path should be returned as a list of the node values, not node references.\nA root-to-leaf path is a path starting from the root and ending at any leaf node. A leaf is a node with no children.\n\u00a0\nExample 1:\n\nInput: root = [5,4,8,11,null,13,4,7,2,null,null,5,1], targetSum = 22\nOutput: [[5,4,11,2],[5,8,4,5]]\nExplanation: There are two paths whose sum equals targetSum:\n5 + 4 + 11 + 2 = 22\n5 + 8 + 4 + 5 = 22\n\nExample 2:\n\nInput: root = [1,2,3], targetSum = 5\nOutput: []\n\nExample 3:\nInput: root = [1,2], targetSum = 0\nOutput: []\n\n\u00a0\nConstraints:\n\nThe number of nodes in the tree is in the range [0, 5000].\n-1000 <= Node.val <= 1000\n-1000 <= targetSum <= 1000\n\n",
        "images": {
            "image": [
                "https://assets.leetcode.com/uploads/2021/01/18/pathsumii1.jpg",
                "https://assets.leetcode.com/uploads/2021/01/18/pathsum2.jpg"
            ],
            "previous_element": [
                "Example 1:",
                "Example 2:"
            ]
        }
    },
    "114": {
        "title": "Flatten Binary Tree to Linked List",
        "title_slug": "flatten-binary-tree-to-linked-list",
        "link": "https://leetcode.com/problems/flatten-binary-tree-to-linked-list",
        "difficulty": "Medium",
        "similar_topics": [
            "Linked List",
            "Stack",
            "Tree",
            "Depth-First Search",
            "Binary Tree"
        ],
        "question": "Given the root of a binary tree, flatten the tree into a \"linked list\":\n\nThe \"linked list\" should use the same TreeNode class where the right child pointer points to the next node in the list and the left child pointer is always null.\nThe \"linked list\" should be in the same order as a pre-order traversal of the binary tree.\n\n\u00a0\nExample 1:\n\nInput: root = [1,2,5,3,4,null,6]\nOutput: [1,null,2,null,3,null,4,null,5,null,6]\n\nExample 2:\nInput: root = []\nOutput: []\n\nExample 3:\nInput: root = [0]\nOutput: [0]\n\n\u00a0\nConstraints:\n\nThe number of nodes in the tree is in the range [0, 2000].\n-100 <= Node.val <= 100\n\n\u00a0\nFollow up: Can you flatten the tree in-place (with O(1) extra space)?",
        "images": {
            "image": [
                "https://assets.leetcode.com/uploads/2021/01/14/flaten.jpg"
            ],
            "previous_element": [
                "Example 1:"
            ]
        }
    },
    "115": {
        "title": "Distinct Subsequences",
        "title_slug": "distinct-subsequences",
        "link": "https://leetcode.com/problems/distinct-subsequences",
        "difficulty": "Hard",
        "similar_topics": [
            "String",
            "Dynamic Programming"
        ],
        "question": "Given two strings s and t, return the number of distinct subsequences of s which equals t.\nA string's subsequence is a new string formed from the original string by deleting some (can be none) of the characters without disturbing the remaining characters' relative positions. (i.e., \"ACE\" is a subsequence of \"ABCDE\" while \"AEC\" is not).\nThe test cases are generated so that the answer fits on a 32-bit signed integer.\n\u00a0\nExample 1:\nInput: s = \"rabbbit\", t = \"rabbit\"\nOutput: 3\nExplanation:\nAs shown below, there are 3 ways you can generate \"rabbit\" from s.\nrabbbit\nrabbbit\nrabbbit\n\nExample 2:\nInput: s = \"babgbag\", t = \"bag\"\nOutput: 5\nExplanation:\nAs shown below, there are 5 ways you can generate \"bag\" from s.\nbabgbag\nbabgbag\nbabgbag\nbabgbag\nbabgbag\n\u00a0\nConstraints:\n\n1 <= s.length, t.length <= 1000\ns and t consist of English letters.\n\n",
        "images": {
            "image": [],
            "previous_element": []
        }
    },
    "116": {
        "title": "Populating Next Right Pointers in Each Node",
        "title_slug": "populating-next-right-pointers-in-each-node",
        "link": "https://leetcode.com/problems/populating-next-right-pointers-in-each-node",
        "difficulty": "Medium",
        "similar_topics": [
            "Linked List",
            "Tree",
            "Depth-First Search",
            "Breadth-First Search",
            "Binary Tree"
        ],
        "question": "You are given a perfect binary tree where all leaves are on the same level, and every parent has two children. The binary tree has the following definition:\nstruct Node {\n  int val;\n  Node *left;\n  Node *right;\n  Node *next;\n}\n\nPopulate each next pointer to point to its next right node. If there is no next right node, the next pointer should be set to NULL.\nInitially, all next pointers are set to NULL.\n\u00a0\nExample 1:\n\nInput: root = [1,2,3,4,5,6,7]\nOutput: [1,#,2,3,#,4,5,6,7,#]\nExplanation: Given the above perfect binary tree (Figure A), your function should populate each next pointer to point to its next right node, just like in Figure B. The serialized output is in level order as connected by the next pointers, with '#' signifying the end of each level.\n\nExample 2:\nInput: root = []\nOutput: []\n\n\u00a0\nConstraints:\n\nThe number of nodes in the tree is in the range [0, 212 - 1].\n-1000 <= Node.val <= 1000\n\n\u00a0\nFollow-up:\n\nYou may only use constant extra space.\nThe recursive approach is fine. You may assume implicit stack space does not count as extra space for this problem.\n\n",
        "images": {
            "image": [
                "https://assets.leetcode.com/uploads/2019/02/14/116_sample.png"
            ],
            "previous_element": [
                "Example 1:"
            ]
        }
    },
    "117": {
        "title": "Populating Next Right Pointers in Each Node II",
        "title_slug": "populating-next-right-pointers-in-each-node-ii",
        "link": "https://leetcode.com/problems/populating-next-right-pointers-in-each-node-ii",
        "difficulty": "Medium",
        "similar_topics": [
            "Linked List",
            "Tree",
            "Depth-First Search",
            "Breadth-First Search",
            "Binary Tree"
        ],
        "question": "Given a binary tree\nstruct Node {\n  int val;\n  Node *left;\n  Node *right;\n  Node *next;\n}\n\nPopulate each next pointer to point to its next right node. If there is no next right node, the next pointer should be set to NULL.\nInitially, all next pointers are set to NULL.\n\u00a0\nExample 1:\n\nInput: root = [1,2,3,4,5,null,7]\nOutput: [1,#,2,3,#,4,5,7,#]\nExplanation: Given the above binary tree (Figure A), your function should populate each next pointer to point to its next right node, just like in Figure B. The serialized output is in level order as connected by the next pointers, with '#' signifying the end of each level.\n\nExample 2:\nInput: root = []\nOutput: []\n\n\u00a0\nConstraints:\n\nThe number of nodes in the tree is in the range [0, 6000].\n-100 <= Node.val <= 100\n\n\u00a0\nFollow-up:\n\nYou may only use constant extra space.\nThe recursive approach is fine. You may assume implicit stack space does not count as extra space for this problem.\n\n",
        "images": {
            "image": [
                "https://assets.leetcode.com/uploads/2019/02/15/117_sample.png"
            ],
            "previous_element": [
                "Example 1:"
            ]
        }
    },
    "118": {
        "title": "Pascal's Triangle",
        "title_slug": "pascal's-triangle",
        "link": "https://leetcode.com/problems/pascal's-triangle",
        "difficulty": "Easy",
        "similar_topics": [
            "Array",
            "Dynamic Programming"
        ],
        "question": "Given an integer numRows, return the first numRows of Pascal's triangle.\nIn Pascal's triangle, each number is the sum of the two numbers directly above it as shown:\n\n\u00a0\nExample 1:\nInput: numRows = 5\nOutput: [[1],[1,1],[1,2,1],[1,3,3,1],[1,4,6,4,1]]\nExample 2:\nInput: numRows = 1\nOutput: [[1]]\n\n\u00a0\nConstraints:\n\n1 <= numRows <= 30\n\n",
        "images": {
            "image": [
                "https://upload.wikimedia.org/wikipedia/commons/0/0d/PascalTriangleAnimated2.gif"
            ],
            "previous_element": [
                "Pascal's triangle"
            ]
        }
    },
    "119": {
        "title": "Pascal's Triangle II",
        "title_slug": "pascal's-triangle-ii",
        "link": "https://leetcode.com/problems/pascal's-triangle-ii",
        "difficulty": "Easy",
        "similar_topics": [
            "Array",
            "Dynamic Programming"
        ],
        "question": "Given an integer rowIndex, return the rowIndexth (0-indexed) row of the Pascal's triangle.\nIn Pascal's triangle, each number is the sum of the two numbers directly above it as shown:\n\n\u00a0\nExample 1:\nInput: rowIndex = 3\nOutput: [1,3,3,1]\nExample 2:\nInput: rowIndex = 0\nOutput: [1]\nExample 3:\nInput: rowIndex = 1\nOutput: [1,1]\n\n\u00a0\nConstraints:\n\n0 <= rowIndex <= 33\n\n\u00a0\nFollow up: Could you optimize your algorithm to use only O(rowIndex) extra space?\n",
        "images": {
            "image": [
                "https://upload.wikimedia.org/wikipedia/commons/0/0d/PascalTriangleAnimated2.gif"
            ],
            "previous_element": [
                "Pascal's triangle"
            ]
        }
    },
    "120": {
        "title": "Triangle",
        "title_slug": "triangle",
        "link": "https://leetcode.com/problems/triangle",
        "difficulty": "Medium",
        "similar_topics": [
            "Array",
            "Dynamic Programming"
        ],
        "question": "Given a triangle array, return the minimum path sum from top to bottom.\nFor each step, you may move to an adjacent number of the row below. More formally, if you are on index i on the current row, you may move to either index i or index i + 1 on the next row.\n\u00a0\nExample 1:\nInput: triangle = [[2],[3,4],[6,5,7],[4,1,8,3]]\nOutput: 11\nExplanation: The triangle looks like:\n   2\n  3 4\n 6 5 7\n4 1 8 3\nThe minimum path sum from top to bottom is 2 + 3 + 5 + 1 = 11 (underlined above).\n\nExample 2:\nInput: triangle = [[-10]]\nOutput: -10\n\n\u00a0\nConstraints:\n\n1 <= triangle.length <= 200\ntriangle[0].length == 1\ntriangle[i].length == triangle[i - 1].length + 1\n-104 <= triangle[i][j] <= 104\n\n\u00a0\nFollow up: Could you\u00a0do this using only O(n) extra space, where n is the total number of rows in the triangle?",
        "images": {
            "image": [],
            "previous_element": []
        }
    },
    "121": {
        "title": "Best Time to Buy and Sell Stock",
        "title_slug": "best-time-to-buy-and-sell-stock",
        "link": "https://leetcode.com/problems/best-time-to-buy-and-sell-stock",
        "difficulty": "Easy",
        "similar_topics": [
            "Array",
            "Dynamic Programming"
        ],
        "question": "You are given an array prices where prices[i] is the price of a given stock on the ith day.\nYou want to maximize your profit by choosing a single day to buy one stock and choosing a different day in the future to sell that stock.\nReturn the maximum profit you can achieve from this transaction. If you cannot achieve any profit, return 0.\n\u00a0\nExample 1:\nInput: prices = [7,1,5,3,6,4]\nOutput: 5\nExplanation: Buy on day 2 (price = 1) and sell on day 5 (price = 6), profit = 6-1 = 5.\nNote that buying on day 2 and selling on day 1 is not allowed because you must buy before you sell.\n\nExample 2:\nInput: prices = [7,6,4,3,1]\nOutput: 0\nExplanation: In this case, no transactions are done and the max profit = 0.\n\n\u00a0\nConstraints:\n\n1 <= prices.length <= 105\n0 <= prices[i] <= 104\n\n",
        "images": {
            "image": [],
            "previous_element": []
        }
    },
    "122": {
        "title": "Best Time to Buy and Sell Stock II",
        "title_slug": "best-time-to-buy-and-sell-stock-ii",
        "link": "https://leetcode.com/problems/best-time-to-buy-and-sell-stock-ii",
        "difficulty": "Medium",
        "similar_topics": [
            "Array",
            "Dynamic Programming",
            "Greedy"
        ],
        "question": "You are given an integer array prices where prices[i] is the price of a given stock on the ith day.\nOn each day, you may decide to buy and/or sell the stock. You can only hold at most one share of the stock at any time. However, you can buy it then immediately sell it on the same day.\nFind and return the maximum profit you can achieve.\n\u00a0\nExample 1:\nInput: prices = [7,1,5,3,6,4]\nOutput: 7\nExplanation: Buy on day 2 (price = 1) and sell on day 3 (price = 5), profit = 5-1 = 4.\nThen buy on day 4 (price = 3) and sell on day 5 (price = 6), profit = 6-3 = 3.\nTotal profit is 4 + 3 = 7.\n\nExample 2:\nInput: prices = [1,2,3,4,5]\nOutput: 4\nExplanation: Buy on day 1 (price = 1) and sell on day 5 (price = 5), profit = 5-1 = 4.\nTotal profit is 4.\n\nExample 3:\nInput: prices = [7,6,4,3,1]\nOutput: 0\nExplanation: There is no way to make a positive profit, so we never buy the stock to achieve the maximum profit of 0.\n\n\u00a0\nConstraints:\n\n1 <= prices.length <= 3 * 104\n0 <= prices[i] <= 104\n\n",
        "images": {
            "image": [],
            "previous_element": []
        }
    },
    "123": {
        "title": "Best Time to Buy and Sell Stock III",
        "title_slug": "best-time-to-buy-and-sell-stock-iii",
        "link": "https://leetcode.com/problems/best-time-to-buy-and-sell-stock-iii",
        "difficulty": "Hard",
        "similar_topics": [
            "Array",
            "Dynamic Programming"
        ],
        "question": "You are given an array prices where prices[i] is the price of a given stock on the ith day.\nFind the maximum profit you can achieve. You may complete at most two transactions.\nNote: You may not engage in multiple transactions simultaneously (i.e., you must sell the stock before you buy again).\n\u00a0\nExample 1:\nInput: prices = [3,3,5,0,0,3,1,4]\nOutput: 6\nExplanation: Buy on day 4 (price = 0) and sell on day 6 (price = 3), profit = 3-0 = 3.\nThen buy on day 7 (price = 1) and sell on day 8 (price = 4), profit = 4-1 = 3.\nExample 2:\nInput: prices = [1,2,3,4,5]\nOutput: 4\nExplanation: Buy on day 1 (price = 1) and sell on day 5 (price = 5), profit = 5-1 = 4.\nNote that you cannot buy on day 1, buy on day 2 and sell them later, as you are engaging multiple transactions at the same time. You must sell before buying again.\n\nExample 3:\nInput: prices = [7,6,4,3,1]\nOutput: 0\nExplanation: In this case, no transaction is done, i.e. max profit = 0.\n\n\u00a0\nConstraints:\n\n1 <= prices.length <= 105\n0 <= prices[i] <= 105\n\n",
        "images": {
            "image": [],
            "previous_element": []
        }
    },
    "124": {
        "title": "Binary Tree Maximum Path Sum",
        "title_slug": "binary-tree-maximum-path-sum",
        "link": "https://leetcode.com/problems/binary-tree-maximum-path-sum",
        "difficulty": "Hard",
        "similar_topics": [
            "Dynamic Programming",
            "Tree",
            "Depth-First Search",
            "Binary Tree"
        ],
        "question": "A path in a binary tree is a sequence of nodes where each pair of adjacent nodes in the sequence has an edge connecting them. A node can only appear in the sequence at most once. Note that the path does not need to pass through the root.\nThe path sum of a path is the sum of the node's values in the path.\nGiven the root of a binary tree, return the maximum path sum of any non-empty path.\n\u00a0\nExample 1:\n\nInput: root = [1,2,3]\nOutput: 6\nExplanation: The optimal path is 2 -> 1 -> 3 with a path sum of 2 + 1 + 3 = 6.\n\nExample 2:\n\nInput: root = [-10,9,20,null,null,15,7]\nOutput: 42\nExplanation: The optimal path is 15 -> 20 -> 7 with a path sum of 15 + 20 + 7 = 42.\n\n\u00a0\nConstraints:\n\nThe number of nodes in the tree is in the range [1, 3 * 104].\n-1000 <= Node.val <= 1000\n\n",
        "images": {
            "image": [
                "https://assets.leetcode.com/uploads/2020/10/13/exx1.jpg",
                "https://assets.leetcode.com/uploads/2020/10/13/exx2.jpg"
            ],
            "previous_element": [
                "Example 1:",
                "Example 2:"
            ]
        }
    },
    "125": {
        "title": "Valid Palindrome",
        "title_slug": "valid-palindrome",
        "link": "https://leetcode.com/problems/valid-palindrome",
        "difficulty": "Easy",
        "similar_topics": [
            "Two Pointers",
            "String"
        ],
        "question": "A phrase is a palindrome if, after converting all uppercase letters into lowercase letters and removing all non-alphanumeric characters, it reads the same forward and backward. Alphanumeric characters include letters and numbers.\nGiven a string s, return true if it is a palindrome, or false otherwise.\n\u00a0\nExample 1:\nInput: s = \"A man, a plan, a canal: Panama\"\nOutput: true\nExplanation: \"amanaplanacanalpanama\" is a palindrome.\n\nExample 2:\nInput: s = \"race a car\"\nOutput: false\nExplanation: \"raceacar\" is not a palindrome.\n\nExample 3:\nInput: s = \" \"\nOutput: true\nExplanation: s is an empty string \"\" after removing non-alphanumeric characters.\nSince an empty string reads the same forward and backward, it is a palindrome.\n\n\u00a0\nConstraints:\n\n1 <= s.length <= 2 * 105\ns consists only of printable ASCII characters.\n\n",
        "images": {
            "image": [],
            "previous_element": []
        }
    },
    "126": {
        "title": "Word Ladder II",
        "title_slug": "word-ladder-ii",
        "link": "https://leetcode.com/problems/word-ladder-ii",
        "difficulty": "Hard",
        "similar_topics": [
            "Hash Table",
            "String",
            "Backtracking",
            "Breadth-First Search"
        ],
        "question": "A transformation sequence from word beginWord to word endWord using a dictionary wordList is a sequence of words beginWord -> s1 -> s2 -> ... -> sk such that:\n\nEvery adjacent pair of words differs by a single letter.\nEvery si for 1 <= i <= k is in wordList. Note that beginWord does not need to be in wordList.\nsk == endWord\n\nGiven two words, beginWord and endWord, and a dictionary wordList, return all the shortest transformation sequences from beginWord to endWord, or an empty list if no such sequence exists. Each sequence should be returned as a list of the words [beginWord, s1, s2, ..., sk].\n\u00a0\nExample 1:\nInput: beginWord = \"hit\", endWord = \"cog\", wordList = [\"hot\",\"dot\",\"dog\",\"lot\",\"log\",\"cog\"]\nOutput: [[\"hit\",\"hot\",\"dot\",\"dog\",\"cog\"],[\"hit\",\"hot\",\"lot\",\"log\",\"cog\"]]\nExplanation:\u00a0There are 2 shortest transformation sequences:\n\"hit\" -> \"hot\" -> \"dot\" -> \"dog\" -> \"cog\"\n\"hit\" -> \"hot\" -> \"lot\" -> \"log\" -> \"cog\"\n\nExample 2:\nInput: beginWord = \"hit\", endWord = \"cog\", wordList = [\"hot\",\"dot\",\"dog\",\"lot\",\"log\"]\nOutput: []\nExplanation: The endWord \"cog\" is not in wordList, therefore there is no valid transformation sequence.\n\n\u00a0\nConstraints:\n\n1 <= beginWord.length <= 5\nendWord.length == beginWord.length\n1 <= wordList.length <= 500\nwordList[i].length == beginWord.length\nbeginWord, endWord, and wordList[i] consist of lowercase English letters.\nbeginWord != endWord\nAll the words in wordList are unique.\nThe sum of all shortest transformation sequences does not exceed 105.\n\n",
        "images": {
            "image": [],
            "previous_element": []
        }
    },
    "127": {
        "title": "Word Ladder",
        "title_slug": "word-ladder",
        "link": "https://leetcode.com/problems/word-ladder",
        "difficulty": "Hard",
        "similar_topics": [
            "Hash Table",
            "String",
            "Breadth-First Search"
        ],
        "question": "A transformation sequence from word beginWord to word endWord using a dictionary wordList is a sequence of words beginWord -> s1 -> s2 -> ... -> sk such that:\n\nEvery adjacent pair of words differs by a single letter.\nEvery si for 1 <= i <= k is in wordList. Note that beginWord does not need to be in wordList.\nsk == endWord\n\nGiven two words, beginWord and endWord, and a dictionary wordList, return the number of words in the shortest transformation sequence from beginWord to endWord, or 0 if no such sequence exists.\n\u00a0\nExample 1:\nInput: beginWord = \"hit\", endWord = \"cog\", wordList = [\"hot\",\"dot\",\"dog\",\"lot\",\"log\",\"cog\"]\nOutput: 5\nExplanation: One shortest transformation sequence is \"hit\" -> \"hot\" -> \"dot\" -> \"dog\" -> cog\", which is 5 words long.\n\nExample 2:\nInput: beginWord = \"hit\", endWord = \"cog\", wordList = [\"hot\",\"dot\",\"dog\",\"lot\",\"log\"]\nOutput: 0\nExplanation: The endWord \"cog\" is not in wordList, therefore there is no valid transformation sequence.\n\n\u00a0\nConstraints:\n\n1 <= beginWord.length <= 10\nendWord.length == beginWord.length\n1 <= wordList.length <= 5000\nwordList[i].length == beginWord.length\nbeginWord, endWord, and wordList[i] consist of lowercase English letters.\nbeginWord != endWord\nAll the words in wordList are unique.\n\n",
        "images": {
            "image": [],
            "previous_element": []
        }
    },
    "128": {
        "title": "Longest Consecutive Sequence",
        "title_slug": "longest-consecutive-sequence",
        "link": "https://leetcode.com/problems/longest-consecutive-sequence",
        "difficulty": "Medium",
        "similar_topics": [
            "Array",
            "Hash Table",
            "Union Find"
        ],
        "question": "Given an unsorted array of integers nums, return the length of the longest consecutive elements sequence.\nYou must write an algorithm that runs in\u00a0O(n)\u00a0time.\n\u00a0\nExample 1:\nInput: nums = [100,4,200,1,3,2]\nOutput: 4\nExplanation: The longest consecutive elements sequence is [1, 2, 3, 4]. Therefore its length is 4.\n\nExample 2:\nInput: nums = [0,3,7,2,5,8,4,6,0,1]\nOutput: 9\n\n\u00a0\nConstraints:\n\n0 <= nums.length <= 105\n-109 <= nums[i] <= 109\n\n",
        "images": {
            "image": [],
            "previous_element": []
        }
    },
    "129": {
        "title": "Sum Root to Leaf Numbers",
        "title_slug": "sum-root-to-leaf-numbers",
        "link": "https://leetcode.com/problems/sum-root-to-leaf-numbers",
        "difficulty": "Medium",
        "similar_topics": [
            "Tree",
            "Depth-First Search",
            "Binary Tree"
        ],
        "question": "You are given the root of a binary tree containing digits from 0 to 9 only.\nEach root-to-leaf path in the tree represents a number.\n\nFor example, the root-to-leaf path 1 -> 2 -> 3 represents the number 123.\n\nReturn the total sum of all root-to-leaf numbers. Test cases are generated so that the answer will fit in a 32-bit integer.\nA leaf node is a node with no children.\n\u00a0\nExample 1:\n\nInput: root = [1,2,3]\nOutput: 25\nExplanation:\nThe root-to-leaf path 1->2 represents the number 12.\nThe root-to-leaf path 1->3 represents the number 13.\nTherefore, sum = 12 + 13 = 25.\n\nExample 2:\n\nInput: root = [4,9,0,5,1]\nOutput: 1026\nExplanation:\nThe root-to-leaf path 4->9->5 represents the number 495.\nThe root-to-leaf path 4->9->1 represents the number 491.\nThe root-to-leaf path 4->0 represents the number 40.\nTherefore, sum = 495 + 491 + 40 = 1026.\n\n\u00a0\nConstraints:\n\nThe number of nodes in the tree is in the range [1, 1000].\n0 <= Node.val <= 9\nThe depth of the tree will not exceed 10.\n\n",
        "images": {
            "image": [
                "https://assets.leetcode.com/uploads/2021/02/19/num1tree.jpg",
                "https://assets.leetcode.com/uploads/2021/02/19/num2tree.jpg"
            ],
            "previous_element": [
                "Example 1:",
                "Example 2:"
            ]
        }
    },
    "130": {
        "title": "Surrounded Regions",
        "title_slug": "surrounded-regions",
        "link": "https://leetcode.com/problems/surrounded-regions",
        "difficulty": "Medium",
        "similar_topics": [
            "Array",
            "Depth-First Search",
            "Breadth-First Search",
            "Union Find",
            "Matrix"
        ],
        "question": "Given an m x n matrix board containing 'X' and 'O', capture all regions that are 4-directionally\u00a0surrounded by 'X'.\nA region is captured by flipping all 'O's into 'X's in that surrounded region.\n\u00a0\nExample 1:\n\nInput: board = [[\"X\",\"X\",\"X\",\"X\"],[\"X\",\"O\",\"O\",\"X\"],[\"X\",\"X\",\"O\",\"X\"],[\"X\",\"O\",\"X\",\"X\"]]\nOutput: [[\"X\",\"X\",\"X\",\"X\"],[\"X\",\"X\",\"X\",\"X\"],[\"X\",\"X\",\"X\",\"X\"],[\"X\",\"O\",\"X\",\"X\"]]\nExplanation: Notice that an 'O' should not be flipped if:\n- It is on the border, or\n- It is adjacent to an 'O' that should not be flipped.\nThe bottom 'O' is on the border, so it is not flipped.\nThe other three 'O' form a surrounded region, so they are flipped.\n\nExample 2:\nInput: board = [[\"X\"]]\nOutput: [[\"X\"]]\n\n\u00a0\nConstraints:\n\nm == board.length\nn == board[i].length\n1 <= m, n <= 200\nboard[i][j] is 'X' or 'O'.\n\n",
        "images": {
            "image": [
                "https://assets.leetcode.com/uploads/2021/02/19/xogrid.jpg"
            ],
            "previous_element": [
                "Example 1:"
            ]
        }
    },
    "131": {
        "title": "Palindrome Partitioning",
        "title_slug": "palindrome-partitioning",
        "link": "https://leetcode.com/problems/palindrome-partitioning",
        "difficulty": "Medium",
        "similar_topics": [
            "String",
            "Dynamic Programming",
            "Backtracking"
        ],
        "question": "Given a string s, partition s such that every substring of the partition is a palindrome. Return all possible palindrome partitioning of s.\nA palindrome string is a string that reads the same backward as forward.\n\u00a0\nExample 1:\nInput: s = \"aab\"\nOutput: [[\"a\",\"a\",\"b\"],[\"aa\",\"b\"]]\nExample 2:\nInput: s = \"a\"\nOutput: [[\"a\"]]\n\n\u00a0\nConstraints:\n\n1 <= s.length <= 16\ns contains only lowercase English letters.\n\n",
        "images": {
            "image": [],
            "previous_element": []
        }
    },
    "132": {
        "title": "Palindrome Partitioning II",
        "title_slug": "palindrome-partitioning-ii",
        "link": "https://leetcode.com/problems/palindrome-partitioning-ii",
        "difficulty": "Hard",
        "similar_topics": [
            "String",
            "Dynamic Programming"
        ],
        "question": "Given a string s, partition s such that every substring of the partition is a palindrome.\nReturn the minimum cuts needed for a palindrome partitioning of s.\n\u00a0\nExample 1:\nInput: s = \"aab\"\nOutput: 1\nExplanation: The palindrome partitioning [\"aa\",\"b\"] could be produced using 1 cut.\n\nExample 2:\nInput: s = \"a\"\nOutput: 0\n\nExample 3:\nInput: s = \"ab\"\nOutput: 1\n\n\u00a0\nConstraints:\n\n1 <= s.length <= 2000\ns consists of lowercase English letters only.\n\n",
        "images": {
            "image": [],
            "previous_element": []
        }
    },
    "133": {
        "title": "Clone Graph",
        "title_slug": "clone-graph",
        "link": "https://leetcode.com/problems/clone-graph",
        "difficulty": "Medium",
        "similar_topics": [
            "Hash Table",
            "Depth-First Search",
            "Breadth-First Search",
            "Graph"
        ],
        "question": "Given a reference of a node in a connected undirected graph.\nReturn a deep copy (clone) of the graph.\nEach node in the graph contains a value (int) and a list (List[Node]) of its neighbors.\nclass Node {\n    public int val;\n    public List<Node> neighbors;\n}\n\n\u00a0\nTest case format:\nFor simplicity, each node's value is the same as the node's index (1-indexed). For example, the first node with val == 1, the second node with val == 2, and so on. The graph is represented in the test case using an adjacency list.\nAn adjacency list is a collection of unordered lists used to represent a finite graph. Each list describes the set of neighbors of a node in the graph.\nThe given node will always be the first node with val = 1. You must return the copy of the given node as a reference to the cloned graph.\n\u00a0\nExample 1:\n\nInput: adjList = [[2,4],[1,3],[2,4],[1,3]]\nOutput: [[2,4],[1,3],[2,4],[1,3]]\nExplanation: There are 4 nodes in the graph.\n1st node (val = 1)'s neighbors are 2nd node (val = 2) and 4th node (val = 4).\n2nd node (val = 2)'s neighbors are 1st node (val = 1) and 3rd node (val = 3).\n3rd node (val = 3)'s neighbors are 2nd node (val = 2) and 4th node (val = 4).\n4th node (val = 4)'s neighbors are 1st node (val = 1) and 3rd node (val = 3).\n\nExample 2:\n\nInput: adjList = [[]]\nOutput: [[]]\nExplanation: Note that the input contains one empty list. The graph consists of only one node with val = 1 and it does not have any neighbors.\n\nExample 3:\nInput: adjList = []\nOutput: []\nExplanation: This an empty graph, it does not have any nodes.\n\n\u00a0\nConstraints:\n\nThe number of nodes in the graph is in the range [0, 100].\n1 <= Node.val <= 100\nNode.val is unique for each node.\nThere are no repeated edges and no self-loops in the graph.\nThe Graph is connected and all nodes can be visited starting from the given node.\n\n",
        "images": {
            "image": [
                "https://assets.leetcode.com/uploads/2019/11/04/133_clone_graph_question.png",
                "https://assets.leetcode.com/uploads/2020/01/07/graph.png"
            ],
            "previous_element": [
                "Example 1:",
                "Example 2:"
            ]
        }
    },
    "134": {
        "title": "Gas Station",
        "title_slug": "gas-station",
        "link": "https://leetcode.com/problems/gas-station",
        "difficulty": "Medium",
        "similar_topics": [
            "Array",
            "Greedy"
        ],
        "question": "There are n gas stations along a circular route, where the amount of gas at the ith station is gas[i].\nYou have a car with an unlimited gas tank and it costs cost[i] of gas to travel from the ith station to its next (i + 1)th station. You begin the journey with an empty tank at one of the gas stations.\nGiven two integer arrays gas and cost, return the starting gas station's index if you can travel around the circuit once in the clockwise direction, otherwise return -1. If there exists a solution, it is guaranteed to be unique\n\u00a0\nExample 1:\nInput: gas = [1,2,3,4,5], cost = [3,4,5,1,2]\nOutput: 3\nExplanation:\nStart at station 3 (index 3) and fill up with 4 unit of gas. Your tank = 0 + 4 = 4\nTravel to station 4. Your tank = 4 - 1 + 5 = 8\nTravel to station 0. Your tank = 8 - 2 + 1 = 7\nTravel to station 1. Your tank = 7 - 3 + 2 = 6\nTravel to station 2. Your tank = 6 - 4 + 3 = 5\nTravel to station 3. The cost is 5. Your gas is just enough to travel back to station 3.\nTherefore, return 3 as the starting index.\n\nExample 2:\nInput: gas = [2,3,4], cost = [3,4,3]\nOutput: -1\nExplanation:\nYou can't start at station 0 or 1, as there is not enough gas to travel to the next station.\nLet's start at station 2 and fill up with 4 unit of gas. Your tank = 0 + 4 = 4\nTravel to station 0. Your tank = 4 - 3 + 2 = 3\nTravel to station 1. Your tank = 3 - 3 + 3 = 3\nYou cannot travel back to station 2, as it requires 4 unit of gas but you only have 3.\nTherefore, you can't travel around the circuit once no matter where you start.\n\n\u00a0\nConstraints:\n\nn == gas.length == cost.length\n1 <= n <= 105\n0 <= gas[i], cost[i] <= 104\n\n",
        "images": {
            "image": [],
            "previous_element": []
        }
    },
    "135": {
        "title": "Candy",
        "title_slug": "candy",
        "link": "https://leetcode.com/problems/candy",
        "difficulty": "Hard",
        "similar_topics": [
            "Array",
            "Greedy"
        ],
        "question": "There are n children standing in a line. Each child is assigned a rating value given in the integer array ratings.\nYou are giving candies to these children subjected to the following requirements:\n\nEach child must have at least one candy.\nChildren with a higher rating get more candies than their neighbors.\n\nReturn the minimum number of candies you need to have to distribute the candies to the children.\n\u00a0\nExample 1:\nInput: ratings = [1,0,2]\nOutput: 5\nExplanation: You can allocate to the first, second and third child with 2, 1, 2 candies respectively.\n\nExample 2:\nInput: ratings = [1,2,2]\nOutput: 4\nExplanation: You can allocate to the first, second and third child with 1, 2, 1 candies respectively.\nThe third child gets 1 candy because it satisfies the above two conditions.\n\n\u00a0\nConstraints:\n\nn == ratings.length\n1 <= n <= 2 * 104\n0 <= ratings[i] <= 2 * 104\n\n",
        "images": {
            "image": [],
            "previous_element": []
        }
    },
    "136": {
        "title": "Single Number",
        "title_slug": "single-number",
        "link": "https://leetcode.com/problems/single-number",
        "difficulty": "Easy",
        "similar_topics": [
            "Array",
            "Bit Manipulation"
        ],
        "question": "Given a non-empty\u00a0array of integers nums, every element appears twice except for one. Find that single one.\nYou must\u00a0implement a solution with a linear runtime complexity and use\u00a0only constant\u00a0extra space.\n\u00a0\nExample 1:\nInput: nums = [2,2,1]\nOutput: 1\nExample 2:\nInput: nums = [4,1,2,1,2]\nOutput: 4\nExample 3:\nInput: nums = [1]\nOutput: 1\n\n\u00a0\nConstraints:\n\n1 <= nums.length <= 3 * 104\n-3 * 104 <= nums[i] <= 3 * 104\nEach element in the array appears twice except for one element which appears only once.\n\n",
        "images": {
            "image": [],
            "previous_element": []
        }
    },
    "137": {
        "title": "Single Number II",
        "title_slug": "single-number-ii",
        "link": "https://leetcode.com/problems/single-number-ii",
        "difficulty": "Medium",
        "similar_topics": [
            "Array",
            "Bit Manipulation"
        ],
        "question": "Given an integer array nums where\u00a0every element appears three times except for one, which appears exactly once. Find the single element and return it.\nYou must\u00a0implement a solution with a linear runtime complexity and use\u00a0only constant\u00a0extra space.\n\u00a0\nExample 1:\nInput: nums = [2,2,3,2]\nOutput: 3\nExample 2:\nInput: nums = [0,1,0,1,0,1,99]\nOutput: 99\n\n\u00a0\nConstraints:\n\n1 <= nums.length <= 3 * 104\n-231 <= nums[i] <= 231 - 1\nEach element in nums appears exactly three times except for one element which appears once.\n\n",
        "images": {
            "image": [],
            "previous_element": []
        }
    },
    "138": {
        "title": "Copy List with Random Pointer",
        "title_slug": "copy-list-with-random-pointer",
        "link": "https://leetcode.com/problems/copy-list-with-random-pointer",
        "difficulty": "Medium",
        "similar_topics": [
            "Hash Table",
            "Linked List"
        ],
        "question": "A linked list of length n is given such that each node contains an additional random pointer, which could point to any node in the list, or null.\nConstruct a deep copy of the list. The deep copy should consist of exactly n brand new nodes, where each new node has its value set to the value of its corresponding original node. Both the next and random pointer of the new nodes should point to new nodes in the copied list such that the pointers in the original list and copied list represent the same list state. None of the pointers in the new list should point to nodes in the original list.\nFor example, if there are two nodes X and Y in the original list, where X.random --> Y, then for the corresponding two nodes x and y in the copied list, x.random --> y.\nReturn the head of the copied linked list.\nThe linked list is represented in the input/output as a list of n nodes. Each node is represented as a pair of [val, random_index] where:\n\nval: an integer representing Node.val\nrandom_index: the index of the node (range from 0 to n-1) that the random pointer points to, or null if it does not point to any node.\n\nYour code will only be given the head of the original linked list.\n\u00a0\nExample 1:\n\nInput: head = [[7,null],[13,0],[11,4],[10,2],[1,0]]\nOutput: [[7,null],[13,0],[11,4],[10,2],[1,0]]\n\nExample 2:\n\nInput: head = [[1,1],[2,1]]\nOutput: [[1,1],[2,1]]\n\nExample 3:\n\nInput: head = [[3,null],[3,0],[3,null]]\nOutput: [[3,null],[3,0],[3,null]]\n\n\u00a0\nConstraints:\n\n0 <= n <= 1000\n-104 <= Node.val <= 104\nNode.random is null or is pointing to some node in the linked list.\n\n",
        "images": {
            "image": [
                "https://assets.leetcode.com/uploads/2019/12/18/e1.png",
                "https://assets.leetcode.com/uploads/2019/12/18/e2.png",
                "https://assets.leetcode.com/uploads/2019/12/18/e3.png"
            ],
            "previous_element": [
                "Example 1:",
                "Example 2:",
                ""
            ]
        }
    },
    "139": {
        "title": "Word Break",
        "title_slug": "word-break",
        "link": "https://leetcode.com/problems/word-break",
        "difficulty": "Medium",
        "similar_topics": [
            "Hash Table",
            "String",
            "Dynamic Programming",
            "Trie",
            "Memoization"
        ],
        "question": "Given a string s and a dictionary of strings wordDict, return true if s can be segmented into a space-separated sequence of one or more dictionary words.\nNote that the same word in the dictionary may be reused multiple times in the segmentation.\n\u00a0\nExample 1:\nInput: s = \"leetcode\", wordDict = [\"leet\",\"code\"]\nOutput: true\nExplanation: Return true because \"leetcode\" can be segmented as \"leet code\".\n\nExample 2:\nInput: s = \"applepenapple\", wordDict = [\"apple\",\"pen\"]\nOutput: true\nExplanation: Return true because \"applepenapple\" can be segmented as \"apple pen apple\".\nNote that you are allowed to reuse a dictionary word.\n\nExample 3:\nInput: s = \"catsandog\", wordDict = [\"cats\",\"dog\",\"sand\",\"and\",\"cat\"]\nOutput: false\n\n\u00a0\nConstraints:\n\n1 <= s.length <= 300\n1 <= wordDict.length <= 1000\n1 <= wordDict[i].length <= 20\ns and wordDict[i] consist of only lowercase English letters.\nAll the strings of wordDict are unique.\n\n",
        "images": {
            "image": [],
            "previous_element": []
        }
    },
    "140": {
        "title": "Word Break II",
        "title_slug": "word-break-ii",
        "link": "https://leetcode.com/problems/word-break-ii",
        "difficulty": "Hard",
        "similar_topics": [
            "Hash Table",
            "String",
            "Dynamic Programming",
            "Backtracking",
            "Trie",
            "Memoization"
        ],
        "question": "Given a string s and a dictionary of strings wordDict, add spaces in s to construct a sentence where each word is a valid dictionary word. Return all such possible sentences in any order.\nNote that the same word in the dictionary may be reused multiple times in the segmentation.\n\u00a0\nExample 1:\nInput: s = \"catsanddog\", wordDict = [\"cat\",\"cats\",\"and\",\"sand\",\"dog\"]\nOutput: [\"cats and dog\",\"cat sand dog\"]\n\nExample 2:\nInput: s = \"pineapplepenapple\", wordDict = [\"apple\",\"pen\",\"applepen\",\"pine\",\"pineapple\"]\nOutput: [\"pine apple pen apple\",\"pineapple pen apple\",\"pine applepen apple\"]\nExplanation: Note that you are allowed to reuse a dictionary word.\n\nExample 3:\nInput: s = \"catsandog\", wordDict = [\"cats\",\"dog\",\"sand\",\"and\",\"cat\"]\nOutput: []\n\n\u00a0\nConstraints:\n\n1 <= s.length <= 20\n1 <= wordDict.length <= 1000\n1 <= wordDict[i].length <= 10\ns and wordDict[i] consist of only lowercase English letters.\nAll the strings of wordDict are unique.\n\n",
        "images": {
            "image": [],
            "previous_element": []
        }
    },
    "141": {
        "title": "Linked List Cycle",
        "title_slug": "linked-list-cycle",
        "link": "https://leetcode.com/problems/linked-list-cycle",
        "difficulty": "Easy",
        "similar_topics": [
            "Hash Table",
            "Linked List",
            "Two Pointers"
        ],
        "question": "Given head, the head of a linked list, determine if the linked list has a cycle in it.\nThere is a cycle in a linked list if there is some node in the list that can be reached again by continuously following the\u00a0next\u00a0pointer. Internally, pos\u00a0is used to denote the index of the node that\u00a0tail's\u00a0next\u00a0pointer is connected to.\u00a0Note that\u00a0pos\u00a0is not passed as a parameter.\nReturn\u00a0true if there is a cycle in the linked list. Otherwise, return false.\n\u00a0\nExample 1:\n\nInput: head = [3,2,0,-4], pos = 1\nOutput: true\nExplanation: There is a cycle in the linked list, where the tail connects to the 1st node (0-indexed).\n\nExample 2:\n\nInput: head = [1,2], pos = 0\nOutput: true\nExplanation: There is a cycle in the linked list, where the tail connects to the 0th node.\n\nExample 3:\n\nInput: head = [1], pos = -1\nOutput: false\nExplanation: There is no cycle in the linked list.\n\n\u00a0\nConstraints:\n\nThe number of the nodes in the list is in the range [0, 104].\n-105 <= Node.val <= 105\npos is -1 or a valid index in the linked-list.\n\n\u00a0\nFollow up: Can you solve it using O(1) (i.e. constant) memory?\n",
        "images": {
            "image": [
                "https://assets.leetcode.com/uploads/2018/12/07/circularlinkedlist.png",
                "https://assets.leetcode.com/uploads/2018/12/07/circularlinkedlist_test2.png",
                "https://assets.leetcode.com/uploads/2018/12/07/circularlinkedlist_test3.png"
            ],
            "previous_element": [
                "Example 1:",
                "Example 2:",
                "Example 3:"
            ]
        }
    },
    "142": {
        "title": "Linked List Cycle II",
        "title_slug": "linked-list-cycle-ii",
        "link": "https://leetcode.com/problems/linked-list-cycle-ii",
        "difficulty": "Medium",
        "similar_topics": [
            "Hash Table",
            "Linked List",
            "Two Pointers"
        ],
        "question": "Given the head of a linked list, return the node where the cycle begins. If there is no cycle, return null.\nThere is a cycle in a linked list if there is some node in the list that can be reached again by continuously following the next pointer. Internally, pos is used to denote the index of the node that tail's next pointer is connected to (0-indexed). It is -1 if there is no cycle. Note that pos is not passed as a parameter.\nDo not modify the linked list.\n\u00a0\nExample 1:\n\nInput: head = [3,2,0,-4], pos = 1\nOutput: tail connects to node index 1\nExplanation: There is a cycle in the linked list, where tail connects to the second node.\n\nExample 2:\n\nInput: head = [1,2], pos = 0\nOutput: tail connects to node index 0\nExplanation: There is a cycle in the linked list, where tail connects to the first node.\n\nExample 3:\n\nInput: head = [1], pos = -1\nOutput: no cycle\nExplanation: There is no cycle in the linked list.\n\n\u00a0\nConstraints:\n\nThe number of the nodes in the list is in the range [0, 104].\n-105 <= Node.val <= 105\npos is -1 or a valid index in the linked-list.\n\n\u00a0\nFollow up: Can you solve it using O(1) (i.e. constant) memory?\n",
        "images": {
            "image": [
                "https://assets.leetcode.com/uploads/2018/12/07/circularlinkedlist.png",
                "https://assets.leetcode.com/uploads/2018/12/07/circularlinkedlist_test2.png",
                "https://assets.leetcode.com/uploads/2018/12/07/circularlinkedlist_test3.png"
            ],
            "previous_element": [
                "Example 1:",
                "Example 2:",
                "Example 3:"
            ]
        }
    },
    "143": {
        "title": "Reorder List",
        "title_slug": "reorder-list",
        "link": "https://leetcode.com/problems/reorder-list",
        "difficulty": "Medium",
        "similar_topics": [
            "Linked List",
            "Two Pointers",
            "Stack",
            "Recursion"
        ],
        "question": "You are given the head of a singly linked-list. The list can be represented as:\nL0 \u2192 L1 \u2192 \u2026 \u2192 Ln - 1 \u2192 Ln\n\nReorder the list to be on the following form:\nL0 \u2192 Ln \u2192 L1 \u2192 Ln - 1 \u2192 L2 \u2192 Ln - 2 \u2192 \u2026\n\nYou may not modify the values in the list's nodes. Only nodes themselves may be changed.\n\u00a0\nExample 1:\n\nInput: head = [1,2,3,4]\nOutput: [1,4,2,3]\n\nExample 2:\n\nInput: head = [1,2,3,4,5]\nOutput: [1,5,2,4,3]\n\n\u00a0\nConstraints:\n\nThe number of nodes in the list is in the range [1, 5 * 104].\n1 <= Node.val <= 1000\n\n",
        "images": {
            "image": [
                "https://assets.leetcode.com/uploads/2021/03/04/reorder1linked-list.jpg",
                "https://assets.leetcode.com/uploads/2021/03/09/reorder2-linked-list.jpg"
            ],
            "previous_element": [
                "Example 1:",
                "Example 2:"
            ]
        }
    },
    "144": {
        "title": "Binary Tree Preorder Traversal",
        "title_slug": "binary-tree-preorder-traversal",
        "link": "https://leetcode.com/problems/binary-tree-preorder-traversal",
        "difficulty": "Easy",
        "similar_topics": [
            "Stack",
            "Tree",
            "Depth-First Search",
            "Binary Tree"
        ],
        "question": "Given the root of a binary tree, return the preorder traversal of its nodes' values.\n\u00a0\nExample 1:\n\nInput: root = [1,null,2,3]\nOutput: [1,2,3]\n\nExample 2:\nInput: root = []\nOutput: []\n\nExample 3:\nInput: root = [1]\nOutput: [1]\n\n\u00a0\nConstraints:\n\nThe number of nodes in the tree is in the range [0, 100].\n-100 <= Node.val <= 100\n\n\u00a0\nFollow up: Recursive solution is trivial, could you do it iteratively?\n",
        "images": {
            "image": [
                "https://assets.leetcode.com/uploads/2020/09/15/inorder_1.jpg"
            ],
            "previous_element": [
                "Example 1:"
            ]
        }
    },
    "145": {
        "title": "Binary Tree Postorder Traversal",
        "title_slug": "binary-tree-postorder-traversal",
        "link": "https://leetcode.com/problems/binary-tree-postorder-traversal",
        "difficulty": "Easy",
        "similar_topics": [
            "Stack",
            "Tree",
            "Depth-First Search",
            "Binary Tree"
        ],
        "question": "Given the root of a\u00a0binary tree, return the postorder traversal of its nodes' values.\n\u00a0\nExample 1:\n\nInput: root = [1,null,2,3]\nOutput: [3,2,1]\n\nExample 2:\nInput: root = []\nOutput: []\n\nExample 3:\nInput: root = [1]\nOutput: [1]\n\n\u00a0\nConstraints:\n\nThe number of the nodes in the tree is in the range [0, 100].\n-100 <= Node.val <= 100\n\n\u00a0\nFollow up: Recursive solution is trivial, could you do it iteratively?",
        "images": {
            "image": [
                "https://assets.leetcode.com/uploads/2020/08/28/pre1.jpg"
            ],
            "previous_element": [
                "Example 1:"
            ]
        }
    },
    "146": {
        "title": "LRU Cache",
        "title_slug": "lru-cache",
        "link": "https://leetcode.com/problems/lru-cache",
        "difficulty": "Medium",
        "similar_topics": [
            "Hash Table",
            "Linked List",
            "Design",
            "Doubly-Linked List"
        ],
        "question": "Design a data structure that follows the constraints of a Least Recently Used (LRU) cache.\nImplement the LRUCache class:\n\nLRUCache(int capacity) Initialize the LRU cache with positive size capacity.\nint get(int key) Return the value of the key if the key exists, otherwise return -1.\nvoid put(int key, int value) Update the value of the key if the key exists. Otherwise, add the key-value pair to the cache. If the number of keys exceeds the capacity from this operation, evict the least recently used key.\n\nThe functions get and put must each run in O(1) average time complexity.\n\u00a0\nExample 1:\nInput\n[\"LRUCache\", \"put\", \"put\", \"get\", \"put\", \"get\", \"put\", \"get\", \"get\", \"get\"]\n[[2], [1, 1], [2, 2], [1], [3, 3], [2], [4, 4], [1], [3], [4]]\nOutput\n[null, null, null, 1, null, -1, null, -1, 3, 4]\n\nExplanation\nLRUCache lRUCache = new LRUCache(2);\nlRUCache.put(1, 1); // cache is {1=1}\nlRUCache.put(2, 2); // cache is {1=1, 2=2}\nlRUCache.get(1);    // return 1\nlRUCache.put(3, 3); // LRU key was 2, evicts key 2, cache is {1=1, 3=3}\nlRUCache.get(2);    // returns -1 (not found)\nlRUCache.put(4, 4); // LRU key was 1, evicts key 1, cache is {4=4, 3=3}\nlRUCache.get(1);    // return -1 (not found)\nlRUCache.get(3);    // return 3\nlRUCache.get(4);    // return 4\n\n\u00a0\nConstraints:\n\n1 <= capacity <= 3000\n0 <= key <= 104\n0 <= value <= 105\nAt most 2 * 105 calls will be made to get and put.\n\n",
        "images": {
            "image": [],
            "previous_element": []
        }
    },
    "147": {
        "title": "Insertion Sort List",
        "title_slug": "insertion-sort-list",
        "link": "https://leetcode.com/problems/insertion-sort-list",
        "difficulty": "Medium",
        "similar_topics": [
            "Linked List",
            "Sorting"
        ],
        "question": "Given the head of a singly linked list, sort the list using insertion sort, and return the sorted list's head.\nThe steps of the insertion sort algorithm:\n\nInsertion sort iterates, consuming one input element each repetition and growing a sorted output list.\nAt each iteration, insertion sort removes one element from the input data, finds the location it belongs within the sorted list and inserts it there.\nIt repeats until no input elements remain.\n\nThe following is a graphical example of the insertion sort algorithm. The partially sorted list (black) initially contains only the first element in the list. One element (red) is removed from the input data and inserted in-place into the sorted list with each iteration.\n\n\u00a0\nExample 1:\n\nInput: head = [4,2,1,3]\nOutput: [1,2,3,4]\n\nExample 2:\n\nInput: head = [-1,5,3,4,0]\nOutput: [-1,0,3,4,5]\n\n\u00a0\nConstraints:\n\nThe number of nodes in the list is in the range [1, 5000].\n-5000 <= Node.val <= 5000\n\n",
        "images": {
            "image": [
                "https://upload.wikimedia.org/wikipedia/commons/0/0f/Insertion-sort-example-300px.gif",
                "https://assets.leetcode.com/uploads/2021/03/04/sort1linked-list.jpg",
                "https://assets.leetcode.com/uploads/2021/03/04/sort2linked-list.jpg"
            ],
            "previous_element": [
                "The following is a graphical example of the insertion sort algorithm. The partially sorted list (black) initially contains only the first element in the list. One element (red) is removed from the input data and inserted in-place into the sorted list with each iteration.",
                "Example 1:",
                "Example 2:"
            ]
        }
    },
    "148": {
        "title": "Sort List",
        "title_slug": "sort-list",
        "link": "https://leetcode.com/problems/sort-list",
        "difficulty": "Medium",
        "similar_topics": [
            "Linked List",
            "Two Pointers",
            "Divide and Conquer",
            "Sorting",
            "Merge Sort"
        ],
        "question": "Given the head of a linked list, return the list after sorting it in ascending order.\n\u00a0\nExample 1:\n\nInput: head = [4,2,1,3]\nOutput: [1,2,3,4]\n\nExample 2:\n\nInput: head = [-1,5,3,4,0]\nOutput: [-1,0,3,4,5]\n\nExample 3:\nInput: head = []\nOutput: []\n\n\u00a0\nConstraints:\n\nThe number of nodes in the list is in the range [0, 5 * 104].\n-105 <= Node.val <= 105\n\n\u00a0\nFollow up: Can you sort the linked list in O(n logn) time and O(1) memory (i.e. constant space)?\n",
        "images": {
            "image": [
                "https://assets.leetcode.com/uploads/2020/09/14/sort_list_1.jpg",
                "https://assets.leetcode.com/uploads/2020/09/14/sort_list_2.jpg"
            ],
            "previous_element": [
                "Example 1:",
                "Example 2:"
            ]
        }
    },
    "149": {
        "title": "Max Points on a Line",
        "title_slug": "max-points-on-a-line",
        "link": "https://leetcode.com/problems/max-points-on-a-line",
        "difficulty": "Hard",
        "similar_topics": [
            "Array",
            "Hash Table",
            "Math",
            "Geometry"
        ],
        "question": "Given an array of points where points[i] = [xi, yi] represents a point on the X-Y plane, return the maximum number of points that lie on the same straight line.\n\u00a0\nExample 1:\n\nInput: points = [[1,1],[2,2],[3,3]]\nOutput: 3\n\nExample 2:\n\nInput: points = [[1,1],[3,2],[5,3],[4,1],[2,3],[1,4]]\nOutput: 4\n\n\u00a0\nConstraints:\n\n1 <= points.length <= 300\npoints[i].length == 2\n-104 <= xi, yi <= 104\nAll the points are unique.\n\n",
        "images": {
            "image": [
                "https://assets.leetcode.com/uploads/2021/02/25/plane1.jpg",
                "https://assets.leetcode.com/uploads/2021/02/25/plane2.jpg"
            ],
            "previous_element": [
                "Example 1:",
                "Example 2:"
            ]
        }
    },
    "150": {
        "title": "Evaluate Reverse Polish Notation",
        "title_slug": "evaluate-reverse-polish-notation",
        "link": "https://leetcode.com/problems/evaluate-reverse-polish-notation",
        "difficulty": "Medium",
        "similar_topics": [
            "Array",
            "Math",
            "Stack"
        ],
        "question": "Evaluate the value of an arithmetic expression in Reverse Polish Notation.\nValid operators are +, -, *, and /. Each operand may be an integer or another expression.\nNote that division between two integers should truncate toward zero.\nIt is guaranteed that the given RPN expression is always valid. That means the expression would always evaluate to a result, and there will not be any division by zero operation.\n\u00a0\nExample 1:\nInput: tokens = [\"2\",\"1\",\"+\",\"3\",\"*\"]\nOutput: 9\nExplanation: ((2 + 1) * 3) = 9\n\nExample 2:\nInput: tokens = [\"4\",\"13\",\"5\",\"/\",\"+\"]\nOutput: 6\nExplanation: (4 + (13 / 5)) = 6\n\nExample 3:\nInput: tokens = [\"10\",\"6\",\"9\",\"3\",\"+\",\"-11\",\"*\",\"/\",\"*\",\"17\",\"+\",\"5\",\"+\"]\nOutput: 22\nExplanation: ((10 * (6 / ((9 + 3) * -11))) + 17) + 5\n= ((10 * (6 / (12 * -11))) + 17) + 5\n= ((10 * (6 / -132)) + 17) + 5\n= ((10 * 0) + 17) + 5\n= (0 + 17) + 5\n= 17 + 5\n= 22\n\n\u00a0\nConstraints:\n\n1 <= tokens.length <= 104\ntokens[i] is either an operator: \"+\", \"-\", \"*\", or \"/\", or an integer in the range [-200, 200].\n\n",
        "images": {
            "image": [],
            "previous_element": []
        }
    },
    "151": {
        "title": "Reverse Words in a String",
        "title_slug": "reverse-words-in-a-string",
        "link": "https://leetcode.com/problems/reverse-words-in-a-string",
        "difficulty": "Medium",
        "similar_topics": [
            "Two Pointers",
            "String"
        ],
        "question": "Given an input string s, reverse the order of the words.\nA word is defined as a sequence of non-space characters. The words in s will be separated by at least one space.\nReturn a string of the words in reverse order concatenated by a single space.\nNote that s may contain leading or trailing spaces or multiple spaces between two words. The returned string should only have a single space separating the words. Do not include any extra spaces.\n\u00a0\nExample 1:\nInput: s = \"the sky is blue\"\nOutput: \"blue is sky the\"\n\nExample 2:\nInput: s = \"  hello world  \"\nOutput: \"world hello\"\nExplanation: Your reversed string should not contain leading or trailing spaces.\n\nExample 3:\nInput: s = \"a good   example\"\nOutput: \"example good a\"\nExplanation: You need to reduce multiple spaces between two words to a single space in the reversed string.\n\n\u00a0\nConstraints:\n\n1 <= s.length <= 104\ns contains English letters (upper-case and lower-case), digits, and spaces ' '.\nThere is at least one word in s.\n\n\u00a0\nFollow-up:\u00a0If the string data type is mutable in your language, can\u00a0you solve it\u00a0in-place\u00a0with\u00a0O(1)\u00a0extra space?\n",
        "images": {
            "image": [],
            "previous_element": []
        }
    },
    "152": {
        "title": "Maximum Product Subarray",
        "title_slug": "maximum-product-subarray",
        "link": "https://leetcode.com/problems/maximum-product-subarray",
        "difficulty": "Medium",
        "similar_topics": [
            "Array",
            "Dynamic Programming"
        ],
        "question": "Given an integer array nums, find a contiguous non-empty subarray within the array that has the largest product, and return the product.\nThe test cases are generated so that the answer will fit in a 32-bit integer.\nA subarray is a contiguous subsequence of the array.\n\u00a0\nExample 1:\nInput: nums = [2,3,-2,4]\nOutput: 6\nExplanation: [2,3] has the largest product 6.\n\nExample 2:\nInput: nums = [-2,0,-1]\nOutput: 0\nExplanation: The result cannot be 2, because [-2,-1] is not a subarray.\n\n\u00a0\nConstraints:\n\n1 <= nums.length <= 2 * 104\n-10 <= nums[i] <= 10\nThe product of any prefix or suffix of nums is guaranteed to fit in a 32-bit integer.\n\n",
        "images": {
            "image": [],
            "previous_element": []
        }
    },
    "153": {
        "title": "Find Minimum in Rotated Sorted Array",
        "title_slug": "find-minimum-in-rotated-sorted-array",
        "link": "https://leetcode.com/problems/find-minimum-in-rotated-sorted-array",
        "difficulty": "Medium",
        "similar_topics": [
            "Array",
            "Binary Search"
        ],
        "question": "Suppose an array of length n sorted in ascending order is rotated between 1 and n times. For example, the array nums = [0,1,2,4,5,6,7] might become:\n\n[4,5,6,7,0,1,2] if it was rotated 4 times.\n[0,1,2,4,5,6,7] if it was rotated 7 times.\n\nNotice that rotating an array [a[0], a[1], a[2], ..., a[n-1]] 1 time results in the array [a[n-1], a[0], a[1], a[2], ..., a[n-2]].\nGiven the sorted rotated array nums of unique elements, return the minimum element of this array.\nYou must write an algorithm that runs in\u00a0O(log n) time.\n\u00a0\nExample 1:\nInput: nums = [3,4,5,1,2]\nOutput: 1\nExplanation: The original array was [1,2,3,4,5] rotated 3 times.\n\nExample 2:\nInput: nums = [4,5,6,7,0,1,2]\nOutput: 0\nExplanation: The original array was [0,1,2,4,5,6,7] and it was rotated 4 times.\n\nExample 3:\nInput: nums = [11,13,15,17]\nOutput: 11\nExplanation: The original array was [11,13,15,17] and it was rotated 4 times. \n\n\u00a0\nConstraints:\n\nn == nums.length\n1 <= n <= 5000\n-5000 <= nums[i] <= 5000\nAll the integers of nums are unique.\nnums is sorted and rotated between 1 and n times.\n\n",
        "images": {
            "image": [],
            "previous_element": []
        }
    },
    "154": {
        "title": "Find Minimum in Rotated Sorted Array II",
        "title_slug": "find-minimum-in-rotated-sorted-array-ii",
        "link": "https://leetcode.com/problems/find-minimum-in-rotated-sorted-array-ii",
        "difficulty": "Hard",
        "similar_topics": [
            "Array",
            "Binary Search"
        ],
        "question": "Suppose an array of length n sorted in ascending order is rotated between 1 and n times. For example, the array nums = [0,1,4,4,5,6,7] might become:\n\n[4,5,6,7,0,1,4] if it was rotated 4 times.\n[0,1,4,4,5,6,7] if it was rotated 7 times.\n\nNotice that rotating an array [a[0], a[1], a[2], ..., a[n-1]] 1 time results in the array [a[n-1], a[0], a[1], a[2], ..., a[n-2]].\nGiven the sorted rotated array nums that may contain duplicates, return the minimum element of this array.\nYou must decrease the overall operation steps as much as possible.\n\u00a0\nExample 1:\nInput: nums = [1,3,5]\nOutput: 1\nExample 2:\nInput: nums = [2,2,2,0,1]\nOutput: 0\n\n\u00a0\nConstraints:\n\nn == nums.length\n1 <= n <= 5000\n-5000 <= nums[i] <= 5000\nnums is sorted and rotated between 1 and n times.\n\n\u00a0\nFollow up: This problem is similar to\u00a0Find Minimum in Rotated Sorted Array, but\u00a0nums may contain duplicates. Would this affect the runtime complexity? How and why?\n\u00a0\n",
        "images": {
            "image": [],
            "previous_element": []
        }
    },
    "155": {
        "title": "Min Stack",
        "title_slug": "min-stack",
        "link": "https://leetcode.com/problems/min-stack",
        "difficulty": "Medium",
        "similar_topics": [
            "Stack",
            "Design"
        ],
        "question": "Design a stack that supports push, pop, top, and retrieving the minimum element in constant time.\nImplement the MinStack class:\n\nMinStack() initializes the stack object.\nvoid push(int val) pushes the element val onto the stack.\nvoid pop() removes the element on the top of the stack.\nint top() gets the top element of the stack.\nint getMin() retrieves the minimum element in the stack.\n\nYou must implement a solution with O(1) time complexity for each function.\n\u00a0\nExample 1:\nInput\n[\"MinStack\",\"push\",\"push\",\"push\",\"getMin\",\"pop\",\"top\",\"getMin\"]\n[[],[-2],[0],[-3],[],[],[],[]]\n\nOutput\n[null,null,null,null,-3,null,0,-2]\n\nExplanation\nMinStack minStack = new MinStack();\nminStack.push(-2);\nminStack.push(0);\nminStack.push(-3);\nminStack.getMin(); // return -3\nminStack.pop();\nminStack.top();    // return 0\nminStack.getMin(); // return -2\n\n\u00a0\nConstraints:\n\n-231 <= val <= 231 - 1\nMethods pop, top and getMin operations will always be called on non-empty stacks.\nAt most 3 * 104 calls will be made to push, pop, top, and getMin.\n\n",
        "images": {
            "image": [],
            "previous_element": []
        }
    },
    "164": {
        "title": "Maximum Gap",
        "title_slug": "maximum-gap",
        "link": "https://leetcode.com/problems/maximum-gap",
        "difficulty": "Hard",
        "similar_topics": [
            "Array",
            "Sorting",
            "Bucket Sort",
            "Radix Sort"
        ],
        "question": "Given an integer array nums, return the maximum difference between two successive elements in its sorted form. If the array contains less than two elements, return 0.\nYou must write an algorithm that runs in linear time and uses linear extra space.\n\u00a0\nExample 1:\nInput: nums = [3,6,9,1]\nOutput: 3\nExplanation: The sorted form of the array is [1,3,6,9], either (3,6) or (6,9) has the maximum difference 3.\n\nExample 2:\nInput: nums = [10]\nOutput: 0\nExplanation: The array contains less than 2 elements, therefore return 0.\n\n\u00a0\nConstraints:\n\n1 <= nums.length <= 105\n0 <= nums[i] <= 109\n\n",
        "images": {
            "image": [],
            "previous_element": []
        }
    },
    "165": {
        "title": "Compare Version Numbers",
        "title_slug": "compare-version-numbers",
        "link": "https://leetcode.com/problems/compare-version-numbers",
        "difficulty": "Medium",
        "similar_topics": [
            "Two Pointers",
            "String"
        ],
        "question": "Given two version numbers,\u00a0version1 and version2, compare them.\n\n\nVersion numbers consist of one or more revisions joined by a dot\u00a0'.'. Each revision\u00a0consists of digits\u00a0and may contain leading zeros. Every revision contains at least one character. Revisions are 0-indexed from left to right, with the leftmost revision being revision 0, the next revision being revision 1, and so on. For example\u00a02.5.33\u00a0and\u00a00.1\u00a0are valid version numbers.\nTo compare version numbers, compare their revisions in left-to-right order. Revisions are compared using their\u00a0integer value ignoring any leading zeros. This means that revisions\u00a01\u00a0and\u00a0001\u00a0are considered\u00a0equal. If a version number does not specify a revision at an index, then\u00a0treat the revision as\u00a00. For example, version\u00a01.0 is less than version\u00a01.1\u00a0because their revision 0s are the same, but their revision 1s are\u00a00\u00a0and\u00a01\u00a0respectively, and\u00a00 < 1.\nReturn the following:\n\nIf version1 < version2, return -1.\nIf version1 > version2, return 1.\nOtherwise, return 0.\n\n\u00a0\nExample 1:\nInput: version1 = \"1.01\", version2 = \"1.001\"\nOutput: 0\nExplanation: Ignoring leading zeroes, both \"01\" and \"001\" represent the same integer \"1\".\n\nExample 2:\nInput: version1 = \"1.0\", version2 = \"1.0.0\"\nOutput: 0\nExplanation: version1 does not specify revision 2, which means it is treated as \"0\".\n\nExample 3:\nInput: version1 = \"0.1\", version2 = \"1.1\"\nOutput: -1\nExplanation: version1's revision 0 is \"0\", while version2's revision 0 is \"1\". 0 < 1, so version1 < version2.\n\n\u00a0\nConstraints:\n\n1 <= version1.length, version2.length <= 500\nversion1 and version2\u00a0only contain digits and '.'.\nversion1 and version2\u00a0are valid version numbers.\nAll the given revisions in\u00a0version1 and version2\u00a0can be stored in\u00a0a\u00a032-bit integer.\n\n",
        "images": {
            "image": [],
            "previous_element": []
        }
    },
    "166": {
        "title": "Fraction to Recurring Decimal",
        "title_slug": "fraction-to-recurring-decimal",
        "link": "https://leetcode.com/problems/fraction-to-recurring-decimal",
        "difficulty": "Medium",
        "similar_topics": [
            "Hash Table",
            "Math",
            "String"
        ],
        "question": "Given two integers representing the numerator and denominator of a fraction, return the fraction in string format.\nIf the fractional part is repeating, enclose the repeating part in parentheses.\nIf multiple answers are possible, return any of them.\nIt is guaranteed that the length of the answer string is less than 104 for all the given inputs.\n\u00a0\nExample 1:\nInput: numerator = 1, denominator = 2\nOutput: \"0.5\"\n\nExample 2:\nInput: numerator = 2, denominator = 1\nOutput: \"2\"\n\nExample 3:\nInput: numerator = 4, denominator = 333\nOutput: \"0.(012)\"\n\n\u00a0\nConstraints:\n\n-231 <=\u00a0numerator, denominator <= 231 - 1\ndenominator != 0\n\n",
        "images": {
            "image": [],
            "previous_element": []
        }
    },
    "167": {
        "title": "Two Sum II - Input Array Is Sorted",
        "title_slug": "two-sum-ii---input-array-is-sorted",
        "link": "https://leetcode.com/problems/two-sum-ii---input-array-is-sorted",
        "difficulty": "Medium",
        "similar_topics": [
            "Array",
            "Two Pointers",
            "Binary Search"
        ],
        "question": "Given a 1-indexed array of integers numbers that is already sorted in non-decreasing order, find two numbers such that they add up to a specific target number. Let these two numbers be numbers[index1] and numbers[index2] where 1 <= index1 < index2 <= numbers.length.\nReturn the indices of the two numbers, index1 and index2, added by one as an integer array [index1, index2] of length 2.\nThe tests are generated such that there is exactly one solution. You may not use the same element twice.\nYour solution must use only constant extra space.\n\u00a0\nExample 1:\nInput: numbers = [2,7,11,15], target = 9\nOutput: [1,2]\nExplanation: The sum of 2 and 7 is 9. Therefore, index1 = 1, index2 = 2. We return [1, 2].\n\nExample 2:\nInput: numbers = [2,3,4], target = 6\nOutput: [1,3]\nExplanation: The sum of 2 and 4 is 6. Therefore index1 = 1, index2 = 3. We return [1, 3].\n\nExample 3:\nInput: numbers = [-1,0], target = -1\nOutput: [1,2]\nExplanation: The sum of -1 and 0 is -1. Therefore index1 = 1, index2 = 2. We return [1, 2].\n\n\u00a0\nConstraints:\n\n2 <= numbers.length <= 3 * 104\n-1000 <= numbers[i] <= 1000\nnumbers is sorted in non-decreasing order.\n-1000 <= target <= 1000\nThe tests are generated such that there is exactly one solution.\n\n",
        "images": {
            "image": [],
            "previous_element": []
        }
    },
    "168": {
        "title": "Excel Sheet Column Title",
        "title_slug": "excel-sheet-column-title",
        "link": "https://leetcode.com/problems/excel-sheet-column-title",
        "difficulty": "Easy",
        "similar_topics": [
            "Math",
            "String"
        ],
        "question": "Given an integer columnNumber, return its corresponding column title as it appears in an Excel sheet.\nFor example:\nA -> 1\nB -> 2\nC -> 3\n...\nZ -> 26\nAA -> 27\nAB -> 28 \n...\n\n\u00a0\nExample 1:\nInput: columnNumber = 1\nOutput: \"A\"\n\nExample 2:\nInput: columnNumber = 28\nOutput: \"AB\"\n\nExample 3:\nInput: columnNumber = 701\nOutput: \"ZY\"\n\n\u00a0\nConstraints:\n\n1 <= columnNumber <= 231 - 1\n\n",
        "images": {
            "image": [],
            "previous_element": []
        }
    },
    "169": {
        "title": "Majority Element",
        "title_slug": "majority-element",
        "link": "https://leetcode.com/problems/majority-element",
        "difficulty": "Easy",
        "similar_topics": [
            "Array",
            "Hash Table",
            "Divide and Conquer",
            "Sorting",
            "Counting"
        ],
        "question": "Given an array nums of size n, return the majority element.\nThe majority element is the element that appears more than \u230an / 2\u230b times. You may assume that the majority element always exists in the array.\n\u00a0\nExample 1:\nInput: nums = [3,2,3]\nOutput: 3\nExample 2:\nInput: nums = [2,2,1,1,1,2,2]\nOutput: 2\n\n\u00a0\nConstraints:\n\nn == nums.length\n1 <= n <= 5 * 104\n-109 <= nums[i] <= 109\n\n\u00a0\nFollow-up: Could you solve the problem in linear time and in O(1) space?",
        "images": {
            "image": [],
            "previous_element": []
        }
    },
    "171": {
        "title": "Excel Sheet Column Number",
        "title_slug": "excel-sheet-column-number",
        "link": "https://leetcode.com/problems/excel-sheet-column-number",
        "difficulty": "Easy",
        "similar_topics": [
            "Math",
            "String"
        ],
        "question": "Given a string columnTitle that represents the column title as appears in an Excel sheet, return its corresponding column number.\nFor example:\nA -> 1\nB -> 2\nC -> 3\n...\nZ -> 26\nAA -> 27\nAB -> 28 \n...\n\n\u00a0\nExample 1:\nInput: columnTitle = \"A\"\nOutput: 1\n\nExample 2:\nInput: columnTitle = \"AB\"\nOutput: 28\n\nExample 3:\nInput: columnTitle = \"ZY\"\nOutput: 701\n\n\u00a0\nConstraints:\n\n1 <= columnTitle.length <= 7\ncolumnTitle consists only of uppercase English letters.\ncolumnTitle is in the range [\"A\", \"FXSHRXW\"].\n\n",
        "images": {
            "image": [],
            "previous_element": []
        }
    },
    "172": {
        "title": "Factorial Trailing Zeroes",
        "title_slug": "factorial-trailing-zeroes",
        "link": "https://leetcode.com/problems/factorial-trailing-zeroes",
        "difficulty": "Medium",
        "similar_topics": [
            "Math"
        ],
        "question": "Given an integer n, return the number of trailing zeroes in n!.\nNote that n! = n * (n - 1) * (n - 2) * ... * 3 * 2 * 1.\n\u00a0\nExample 1:\nInput: n = 3\nOutput: 0\nExplanation: 3! = 6, no trailing zero.\n\nExample 2:\nInput: n = 5\nOutput: 1\nExplanation: 5! = 120, one trailing zero.\n\nExample 3:\nInput: n = 0\nOutput: 0\n\n\u00a0\nConstraints:\n\n0 <= n <= 104\n\n\u00a0\nFollow up: Could you write a solution that works in logarithmic time complexity?\n",
        "images": {
            "image": [],
            "previous_element": []
        }
    },
    "173": {
        "title": "Binary Search Tree Iterator",
        "title_slug": "binary-search-tree-iterator",
        "link": "https://leetcode.com/problems/binary-search-tree-iterator",
        "difficulty": "Medium",
        "similar_topics": [
            "Stack",
            "Tree",
            "Design",
            "Binary Search Tree",
            "Binary Tree",
            "Iterator"
        ],
        "question": "Implement the BSTIterator class that represents an iterator over the in-order traversal of a binary search tree (BST):\n\nBSTIterator(TreeNode root) Initializes an object of the BSTIterator class. The root of the BST is given as part of the constructor. The pointer should be initialized to a non-existent number smaller than any element in the BST.\nboolean hasNext() Returns true if there exists a number in the traversal to the right of the pointer, otherwise returns false.\nint next() Moves the pointer to the right, then returns the number at the pointer.\n\nNotice that by initializing the pointer to a non-existent smallest number, the first call to next() will return the smallest element in the BST.\nYou may assume that next() calls will always be valid. That is, there will be at least a next number in the in-order traversal when next() is called.\n\u00a0\nExample 1:\n\nInput\n[\"BSTIterator\", \"next\", \"next\", \"hasNext\", \"next\", \"hasNext\", \"next\", \"hasNext\", \"next\", \"hasNext\"]\n[[[7, 3, 15, null, null, 9, 20]], [], [], [], [], [], [], [], [], []]\nOutput\n[null, 3, 7, true, 9, true, 15, true, 20, false]\n\nExplanation\nBSTIterator bSTIterator = new BSTIterator([7, 3, 15, null, null, 9, 20]);\nbSTIterator.next();    // return 3\nbSTIterator.next();    // return 7\nbSTIterator.hasNext(); // return True\nbSTIterator.next();    // return 9\nbSTIterator.hasNext(); // return True\nbSTIterator.next();    // return 15\nbSTIterator.hasNext(); // return True\nbSTIterator.next();    // return 20\nbSTIterator.hasNext(); // return False\n\n\u00a0\nConstraints:\n\nThe number of nodes in the tree is in the range [1, 105].\n0 <= Node.val <= 106\nAt most 105 calls will be made to hasNext, and next.\n\n\u00a0\nFollow up:\n\nCould you implement next() and hasNext() to run in average O(1) time and use\u00a0O(h) memory, where h is the height of the tree?\n\n",
        "images": {
            "image": [
                "https://assets.leetcode.com/uploads/2018/12/25/bst-tree.png"
            ],
            "previous_element": [
                "Example 1:"
            ]
        }
    },
    "174": {
        "title": "Dungeon Game",
        "title_slug": "dungeon-game",
        "link": "https://leetcode.com/problems/dungeon-game",
        "difficulty": "Hard",
        "similar_topics": [
            "Array",
            "Dynamic Programming",
            "Matrix"
        ],
        "question": "The demons had captured the princess and imprisoned her in the bottom-right corner of a dungeon. The dungeon consists of m x n rooms laid out in a 2D grid. Our valiant knight was initially positioned in the top-left room and must fight his way through dungeon to rescue the princess.\nThe knight has an initial health point represented by a positive integer. If at any point his health point drops to 0 or below, he dies immediately.\nSome of the rooms are guarded by demons (represented by negative integers), so the knight loses health upon entering these rooms; other rooms are either empty (represented as 0) or contain magic orbs that increase the knight's health (represented by positive integers).\nTo reach the princess as quickly as possible, the knight decides to move only rightward or downward in each step.\nReturn the knight's minimum initial health so that he can rescue the princess.\nNote that any room can contain threats or power-ups, even the first room the knight enters and the bottom-right room where the princess is imprisoned.\n\u00a0\nExample 1:\n\nInput: dungeon = [[-2,-3,3],[-5,-10,1],[10,30,-5]]\nOutput: 7\nExplanation: The initial health of the knight must be at least 7 if he follows the optimal path: RIGHT-> RIGHT -> DOWN -> DOWN.\n\nExample 2:\nInput: dungeon = [[0]]\nOutput: 1\n\n\u00a0\nConstraints:\n\nm == dungeon.length\nn == dungeon[i].length\n1 <= m, n <= 200\n-1000 <= dungeon[i][j] <= 1000\n\n",
        "images": {
            "image": [
                "https://assets.leetcode.com/uploads/2021/03/13/dungeon-grid-1.jpg"
            ],
            "previous_element": [
                "Example 1:"
            ]
        }
    },
    "175": {
        "title": "Combine Two Tables",
        "title_slug": "combine-two-tables",
        "link": "https://leetcode.com/problems/combine-two-tables",
        "difficulty": "Easy",
        "similar_topics": [
            "Database"
        ],
        "question": "SQL SchemaTable: Person\n+-------------+---------+\n| Column Name | Type    |\n+-------------+---------+\n| personId    | int     |\n| lastName    | varchar |\n| firstName   | varchar |\n+-------------+---------+\npersonId is the primary key column for this table.\nThis table contains information about the ID of some persons and their first and last names.\n\n\u00a0\nTable: Address\n+-------------+---------+\n| Column Name | Type    |\n+-------------+---------+\n| addressId   | int     |\n| personId    | int     |\n| city        | varchar |\n| state       | varchar |\n+-------------+---------+\naddressId is the primary key column for this table.\nEach row of this table contains information about the city and state of one person with ID = PersonId.\n\n\u00a0\nWrite an SQL query to report the first name, last name, city, and state of each person in the Person table. If the address of a personId is not present in the Address table, report null instead.\nReturn the result table in any order.\nThe query result format is in the following example.\n\u00a0\nExample 1:\nInput: \nPerson table:\n+----------+----------+-----------+\n| personId | lastName | firstName |\n+----------+----------+-----------+\n| 1        | Wang     | Allen     |\n| 2        | Alice    | Bob       |\n+----------+----------+-----------+\nAddress table:\n+-----------+----------+---------------+------------+\n| addressId | personId | city          | state      |\n+-----------+----------+---------------+------------+\n| 1         | 2        | New York City | New York   |\n| 2         | 3        | Leetcode      | California |\n+-----------+----------+---------------+------------+\nOutput: \n+-----------+----------+---------------+----------+\n| firstName | lastName | city          | state    |\n+-----------+----------+---------------+----------+\n| Allen     | Wang     | Null          | Null     |\n| Bob       | Alice    | New York City | New York |\n+-----------+----------+---------------+----------+\nExplanation: \nThere is no address in the address table for the personId = 1 so we return null in their city and state.\naddressId = 1 contains information about the address of personId = 2.\n\n",
        "images": {
            "image": [],
            "previous_element": []
        }
    },
    "176": {
        "title": "Second Highest Salary",
        "title_slug": "second-highest-salary",
        "link": "https://leetcode.com/problems/second-highest-salary",
        "difficulty": "Medium",
        "similar_topics": [
            "Database"
        ],
        "question": "SQL SchemaTable: Employee\n+-------------+------+\n| Column Name | Type |\n+-------------+------+\n| id          | int  |\n| salary      | int  |\n+-------------+------+\nid is the primary key column for this table.\nEach row of this table contains information about the salary of an employee.\n\n\u00a0\nWrite an SQL query to report the second highest salary from the Employee table. If there is no second highest salary, the query should report null.\nThe query result format is in the following example.\n\u00a0\nExample 1:\nInput: \nEmployee table:\n+----+--------+\n| id | salary |\n+----+--------+\n| 1  | 100    |\n| 2  | 200    |\n| 3  | 300    |\n+----+--------+\nOutput: \n+---------------------+\n| SecondHighestSalary |\n+---------------------+\n| 200                 |\n+---------------------+\n\nExample 2:\nInput: \nEmployee table:\n+----+--------+\n| id | salary |\n+----+--------+\n| 1  | 100    |\n+----+--------+\nOutput: \n+---------------------+\n| SecondHighestSalary |\n+---------------------+\n| null                |\n+---------------------+\n\n",
        "images": {
            "image": [],
            "previous_element": []
        }
    },
    "177": {
        "title": "Nth Highest Salary",
        "title_slug": "nth-highest-salary",
        "link": "https://leetcode.com/problems/nth-highest-salary",
        "difficulty": "Medium",
        "similar_topics": [
            "Database"
        ],
        "question": "SQL SchemaTable: Employee\n+-------------+------+\n| Column Name | Type |\n+-------------+------+\n| id          | int  |\n| salary      | int  |\n+-------------+------+\nid is the primary key column for this table.\nEach row of this table contains information about the salary of an employee.\n\n\u00a0\nWrite an SQL query to report the nth highest salary from the Employee table. If there is no nth highest salary, the query should report null.\nThe query result format is in the following example.\n\u00a0\nExample 1:\nInput: \nEmployee table:\n+----+--------+\n| id | salary |\n+----+--------+\n| 1  | 100    |\n| 2  | 200    |\n| 3  | 300    |\n+----+--------+\nn = 2\nOutput: \n+------------------------+\n| getNthHighestSalary(2) |\n+------------------------+\n| 200                    |\n+------------------------+\n\nExample 2:\nInput: \nEmployee table:\n+----+--------+\n| id | salary |\n+----+--------+\n| 1  | 100    |\n+----+--------+\nn = 2\nOutput: \n+------------------------+\n| getNthHighestSalary(2) |\n+------------------------+\n| null                   |\n+------------------------+\n\n",
        "images": {
            "image": [],
            "previous_element": []
        }
    },
    "178": {
        "title": "Rank Scores",
        "title_slug": "rank-scores",
        "link": "https://leetcode.com/problems/rank-scores",
        "difficulty": "Medium",
        "similar_topics": [
            "Database"
        ],
        "question": "SQL SchemaTable: Scores\n+-------------+---------+\n| Column Name | Type    |\n+-------------+---------+\n| id          | int     |\n| score       | decimal |\n+-------------+---------+\nid is the primary key for this table.\nEach row of this table contains the score of a game. Score is a floating point value with two decimal places.\n\n\u00a0\nWrite an SQL query to rank the scores. The ranking should be calculated according to the following rules:\n\nThe scores should be ranked from the highest to the lowest.\nIf there is a tie between two scores, both should have the same ranking.\nAfter a tie, the next ranking number should be the next consecutive integer value. In other words, there should be no holes between ranks.\n\nReturn the result table ordered by score in descending order.\nThe query result format is in the following example.\n\u00a0\nExample 1:\nInput: \nScores table:\n+----+-------+\n| id | score |\n+----+-------+\n| 1  | 3.50  |\n| 2  | 3.65  |\n| 3  | 4.00  |\n| 4  | 3.85  |\n| 5  | 4.00  |\n| 6  | 3.65  |\n+----+-------+\nOutput: \n+-------+------+\n| score | rank |\n+-------+------+\n| 4.00  | 1    |\n| 4.00  | 1    |\n| 3.85  | 2    |\n| 3.65  | 3    |\n| 3.65  | 3    |\n| 3.50  | 4    |\n+-------+------+\n\n",
        "images": {
            "image": [],
            "previous_element": []
        }
    },
    "179": {
        "title": "Largest Number",
        "title_slug": "largest-number",
        "link": "https://leetcode.com/problems/largest-number",
        "difficulty": "Medium",
        "similar_topics": [
            "String",
            "Greedy",
            "Sorting"
        ],
        "question": "Given a list of non-negative integers nums, arrange them such that they form the largest number and return it.\nSince the result may be very large, so you need to return a string instead of an integer.\n\u00a0\nExample 1:\nInput: nums = [10,2]\nOutput: \"210\"\n\nExample 2:\nInput: nums = [3,30,34,5,9]\nOutput: \"9534330\"\n\n\u00a0\nConstraints:\n\n1 <= nums.length <= 100\n0 <= nums[i] <= 109\n\n",
        "images": {
            "image": [],
            "previous_element": []
        }
    },
    "180": {
        "title": "Consecutive Numbers",
        "title_slug": "consecutive-numbers",
        "link": "https://leetcode.com/problems/consecutive-numbers",
        "difficulty": "Medium",
        "similar_topics": [
            "Database"
        ],
        "question": "SQL SchemaTable: Logs\n+-------------+---------+\n| Column Name | Type    |\n+-------------+---------+\n| id          | int     |\n| num         | varchar |\n+-------------+---------+\nid is the primary key for this table.\nid is an autoincrement column.\n\n\u00a0\nWrite an SQL query to find all numbers that appear at least three times consecutively.\nReturn the result table in any order.\nThe query result format is in the following example.\n\u00a0\nExample 1:\nInput: \nLogs table:\n+----+-----+\n| id | num |\n+----+-----+\n| 1  | 1   |\n| 2  | 1   |\n| 3  | 1   |\n| 4  | 2   |\n| 5  | 1   |\n| 6  | 2   |\n| 7  | 2   |\n+----+-----+\nOutput: \n+-----------------+\n| ConsecutiveNums |\n+-----------------+\n| 1               |\n+-----------------+\nExplanation: 1 is the only number that appears consecutively for at least three times.\n\n",
        "images": {
            "image": [],
            "previous_element": []
        }
    },
    "181": {
        "title": "Employees Earning More Than Their Managers",
        "title_slug": "employees-earning-more-than-their-managers",
        "link": "https://leetcode.com/problems/employees-earning-more-than-their-managers",
        "difficulty": "Easy",
        "similar_topics": [
            "Database"
        ],
        "question": "SQL SchemaTable: Employee\n+-------------+---------+\n| Column Name | Type    |\n+-------------+---------+\n| id          | int     |\n| name        | varchar |\n| salary      | int     |\n| managerId   | int     |\n+-------------+---------+\nid is the primary key column for this table.\nEach row of this table indicates the ID of an employee, their name, salary, and the ID of their manager.\n\n\u00a0\nWrite an SQL query to find the employees who earn more than their managers.\nReturn the result table in any order.\nThe query result format is in the following example.\n\u00a0\nExample 1:\nInput: \nEmployee table:\n+----+-------+--------+-----------+\n| id | name  | salary | managerId |\n+----+-------+--------+-----------+\n| 1  | Joe   | 70000  | 3         |\n| 2  | Henry | 80000  | 4         |\n| 3  | Sam   | 60000  | Null      |\n| 4  | Max   | 90000  | Null      |\n+----+-------+--------+-----------+\nOutput: \n+----------+\n| Employee |\n+----------+\n| Joe      |\n+----------+\nExplanation: Joe is the only employee who earns more than his manager.\n\n",
        "images": {
            "image": [],
            "previous_element": []
        }
    },
    "182": {
        "title": "Duplicate Emails",
        "title_slug": "duplicate-emails",
        "link": "https://leetcode.com/problems/duplicate-emails",
        "difficulty": "Easy",
        "similar_topics": [
            "Database"
        ],
        "question": "SQL SchemaTable: Person\n+-------------+---------+\n| Column Name | Type    |\n+-------------+---------+\n| id          | int     |\n| email       | varchar |\n+-------------+---------+\nid is the primary key column for this table.\nEach row of this table contains an email. The emails will not contain uppercase letters.\n\n\u00a0\nWrite an SQL query to report all the duplicate emails.\nReturn the result table in any order.\nThe query result format is in the following example.\n\u00a0\nExample 1:\nInput: \nPerson table:\n+----+---------+\n| id | email   |\n+----+---------+\n| 1  | a@b.com |\n| 2  | c@d.com |\n| 3  | a@b.com |\n+----+---------+\nOutput: \n+---------+\n| Email   |\n+---------+\n| a@b.com |\n+---------+\nExplanation: a@b.com is repeated two times.\n\n",
        "images": {
            "image": [],
            "previous_element": []
        }
    },
    "183": {
        "title": "Customers Who Never Order",
        "title_slug": "customers-who-never-order",
        "link": "https://leetcode.com/problems/customers-who-never-order",
        "difficulty": "Easy",
        "similar_topics": [
            "Database"
        ],
        "question": "SQL SchemaTable: Customers\n+-------------+---------+\n| Column Name | Type    |\n+-------------+---------+\n| id          | int     |\n| name        | varchar |\n+-------------+---------+\nid is the primary key column for this table.\nEach row of this table indicates the ID and name of a customer.\n\n\u00a0\nTable: Orders\n+-------------+------+\n| Column Name | Type |\n+-------------+------+\n| id          | int  |\n| customerId  | int  |\n+-------------+------+\nid is the primary key column for this table.\ncustomerId is a foreign key of the ID from the Customers table.\nEach row of this table indicates the ID of an order and the ID of the customer who ordered it.\n\n\u00a0\nWrite an SQL query to report all customers who never order anything.\nReturn the result table in any order.\nThe query result format is in the following example.\n\u00a0\nExample 1:\nInput: \nCustomers table:\n+----+-------+\n| id | name  |\n+----+-------+\n| 1  | Joe   |\n| 2  | Henry |\n| 3  | Sam   |\n| 4  | Max   |\n+----+-------+\nOrders table:\n+----+------------+\n| id | customerId |\n+----+------------+\n| 1  | 3          |\n| 2  | 1          |\n+----+------------+\nOutput: \n+-----------+\n| Customers |\n+-----------+\n| Henry     |\n| Max       |\n+-----------+\n\n",
        "images": {
            "image": [],
            "previous_element": []
        }
    },
    "184": {
        "title": "Department Highest Salary",
        "title_slug": "department-highest-salary",
        "link": "https://leetcode.com/problems/department-highest-salary",
        "difficulty": "Medium",
        "similar_topics": [
            "Database"
        ],
        "question": "SQL SchemaTable: Employee\n+--------------+---------+\n| Column Name  | Type    |\n+--------------+---------+\n| id           | int     |\n| name         | varchar |\n| salary       | int     |\n| departmentId | int     |\n+--------------+---------+\nid is the primary key column for this table.\ndepartmentId is a foreign key of the ID from the Department table.\nEach row of this table indicates the ID, name, and salary of an employee. It also contains the ID of their department.\n\n\u00a0\nTable: Department\n+-------------+---------+\n| Column Name | Type    |\n+-------------+---------+\n| id          | int     |\n| name        | varchar |\n+-------------+---------+\nid is the primary key column for this table.\nEach row of this table indicates the ID of a department and its name.\n\n\u00a0\nWrite an SQL query to find employees who have the highest salary in each of the departments.\nReturn the result table in any order.\nThe query result format is in the following example.\n\u00a0\nExample 1:\nInput: \nEmployee table:\n+----+-------+--------+--------------+\n| id | name  | salary | departmentId |\n+----+-------+--------+--------------+\n| 1  | Joe   | 70000  | 1            |\n| 2  | Jim   | 90000  | 1            |\n| 3  | Henry | 80000  | 2            |\n| 4  | Sam   | 60000  | 2            |\n| 5  | Max   | 90000  | 1            |\n+----+-------+--------+--------------+\nDepartment table:\n+----+-------+\n| id | name  |\n+----+-------+\n| 1  | IT    |\n| 2  | Sales |\n+----+-------+\nOutput: \n+------------+----------+--------+\n| Department | Employee | Salary |\n+------------+----------+--------+\n| IT         | Jim      | 90000  |\n| Sales      | Henry    | 80000  |\n| IT         | Max      | 90000  |\n+------------+----------+--------+\nExplanation: Max and Jim both have the highest salary in the IT department and Henry has the highest salary in the Sales department.\n\n",
        "images": {
            "image": [],
            "previous_element": []
        }
    },
    "187": {
        "title": "Repeated DNA Sequences",
        "title_slug": "repeated-dna-sequences",
        "link": "https://leetcode.com/problems/repeated-dna-sequences",
        "difficulty": "Medium",
        "similar_topics": [
            "Hash Table",
            "String",
            "Bit Manipulation",
            "Sliding Window",
            "Rolling Hash",
            "Hash Function"
        ],
        "question": "The DNA sequence is composed of a series of nucleotides abbreviated as 'A', 'C', 'G', and 'T'.\n\nFor example, \"ACGAATTCCG\" is a DNA sequence.\n\nWhen studying DNA, it is useful to identify repeated sequences within the DNA.\nGiven a string s that represents a DNA sequence, return all the 10-letter-long sequences (substrings) that occur more than once in a DNA molecule. You may return the answer in any order.\n\u00a0\nExample 1:\nInput: s = \"AAAAACCCCCAAAAACCCCCCAAAAAGGGTTT\"\nOutput: [\"AAAAACCCCC\",\"CCCCCAAAAA\"]\nExample 2:\nInput: s = \"AAAAAAAAAAAAA\"\nOutput: [\"AAAAAAAAAA\"]\n\n\u00a0\nConstraints:\n\n1 <= s.length <= 105\ns[i] is either 'A', 'C', 'G', or 'T'.\n\n",
        "images": {
            "image": [],
            "previous_element": []
        }
    },
    "188": {
        "title": "Best Time to Buy and Sell Stock IV",
        "title_slug": "best-time-to-buy-and-sell-stock-iv",
        "link": "https://leetcode.com/problems/best-time-to-buy-and-sell-stock-iv",
        "difficulty": "Hard",
        "similar_topics": [
            "Array",
            "Dynamic Programming"
        ],
        "question": "You are given an integer array prices where prices[i] is the price of a given stock on the ith day, and an integer k.\nFind the maximum profit you can achieve. You may complete at most k transactions.\nNote: You may not engage in multiple transactions simultaneously (i.e., you must sell the stock before you buy again).\n\u00a0\nExample 1:\nInput: k = 2, prices = [2,4,1]\nOutput: 2\nExplanation: Buy on day 1 (price = 2) and sell on day 2 (price = 4), profit = 4-2 = 2.\n\nExample 2:\nInput: k = 2, prices = [3,2,6,5,0,3]\nOutput: 7\nExplanation: Buy on day 2 (price = 2) and sell on day 3 (price = 6), profit = 6-2 = 4. Then buy on day 5 (price = 0) and sell on day 6 (price = 3), profit = 3-0 = 3.\n\n\u00a0\nConstraints:\n\n1 <= k <= 100\n1 <= prices.length <= 1000\n0 <= prices[i] <= 1000\n\n",
        "images": {
            "image": [],
            "previous_element": []
        }
    },
    "189": {
        "title": "Rotate Array",
        "title_slug": "rotate-array",
        "link": "https://leetcode.com/problems/rotate-array",
        "difficulty": "Medium",
        "similar_topics": [
            "Array",
            "Math",
            "Two Pointers"
        ],
        "question": "Given an array, rotate the array to the right by k steps, where k is non-negative.\n\u00a0\nExample 1:\nInput: nums = [1,2,3,4,5,6,7], k = 3\nOutput: [5,6,7,1,2,3,4]\nExplanation:\nrotate 1 steps to the right: [7,1,2,3,4,5,6]\nrotate 2 steps to the right: [6,7,1,2,3,4,5]\nrotate 3 steps to the right: [5,6,7,1,2,3,4]\n\nExample 2:\nInput: nums = [-1,-100,3,99], k = 2\nOutput: [3,99,-1,-100]\nExplanation: \nrotate 1 steps to the right: [99,-1,-100,3]\nrotate 2 steps to the right: [3,99,-1,-100]\n\n\u00a0\nConstraints:\n\n1 <= nums.length <= 105\n-231 <= nums[i] <= 231 - 1\n0 <= k <= 105\n\n\u00a0\nFollow up:\n\nTry to come up with as many solutions as you can. There are at least three different ways to solve this problem.\nCould you do it in-place with O(1) extra space?\n\n",
        "images": {
            "image": [],
            "previous_element": []
        }
    },
    "190": {
        "title": "Reverse Bits",
        "title_slug": "reverse-bits",
        "link": "https://leetcode.com/problems/reverse-bits",
        "difficulty": "Easy",
        "similar_topics": [
            "Divide and Conquer",
            "Bit Manipulation"
        ],
        "question": "Reverse bits of a given 32 bits unsigned integer.\nNote:\n\nNote that in some languages, such as Java, there is no unsigned integer type. In this case, both input and output will be given as a signed integer type. They should not affect your implementation, as the integer's internal binary representation is the same, whether it is signed or unsigned.\nIn Java, the compiler represents the signed integers using 2's complement notation. Therefore, in Example 2 above, the input represents the signed integer -3 and the output represents the signed integer -1073741825.\n\n\u00a0\nExample 1:\nInput: n = 00000010100101000001111010011100\nOutput:    964176192 (00111001011110000010100101000000)\nExplanation: The input binary string 00000010100101000001111010011100 represents the unsigned integer 43261596, so return 964176192 which its binary representation is 00111001011110000010100101000000.\n\nExample 2:\nInput: n = 11111111111111111111111111111101\nOutput:   3221225471 (10111111111111111111111111111111)\nExplanation: The input binary string 11111111111111111111111111111101 represents the unsigned integer 4294967293, so return 3221225471 which its binary representation is 10111111111111111111111111111111.\n\n\u00a0\nConstraints:\n\nThe input must be a binary string of length 32\n\n\u00a0\nFollow up: If this function is called many times, how would you optimize it?\n",
        "images": {
            "image": [],
            "previous_element": []
        }
    },
    "191": {
        "title": "Number of 1 Bits",
        "title_slug": "number-of-1-bits",
        "link": "https://leetcode.com/problems/number-of-1-bits",
        "difficulty": "Easy",
        "similar_topics": [
            "Divide and Conquer",
            "Bit Manipulation"
        ],
        "question": "Write a function that takes an unsigned integer and returns the number of '1' bits it has (also known as the Hamming weight).\nNote:\n\nNote that in some languages, such as Java, there is no unsigned integer type. In this case, the input will be given as a signed integer type. It should not affect your implementation, as the integer's internal binary representation is the same, whether it is signed or unsigned.\nIn Java, the compiler represents the signed integers using 2's complement notation. Therefore, in Example 3, the input represents the signed integer. -3.\n\n\u00a0\nExample 1:\nInput: n = 00000000000000000000000000001011\nOutput: 3\nExplanation: The input binary string 00000000000000000000000000001011 has a total of three '1' bits.\n\nExample 2:\nInput: n = 00000000000000000000000010000000\nOutput: 1\nExplanation: The input binary string 00000000000000000000000010000000 has a total of one '1' bit.\n\nExample 3:\nInput: n = 11111111111111111111111111111101\nOutput: 31\nExplanation: The input binary string 11111111111111111111111111111101 has a total of thirty one '1' bits.\n\n\u00a0\nConstraints:\n\nThe input must be a binary string of length 32.\n\n\u00a0\nFollow up: If this function is called many times, how would you optimize it?",
        "images": {
            "image": [],
            "previous_element": []
        }
    },
    "192": {
        "title": "Word Frequency",
        "title_slug": "word-frequency",
        "link": "https://leetcode.com/problems/word-frequency",
        "difficulty": "Medium",
        "similar_topics": [
            "Shell"
        ],
        "question": "Write a bash script to calculate the frequency of each word in a text file words.txt.\nFor simplicity sake, you may assume:\n\nwords.txt contains only lowercase characters and space ' ' characters.\nEach word must consist of lowercase characters only.\nWords are separated by one or more whitespace characters.\n\nExample:\nAssume that words.txt has the following content:\nthe day is sunny the the\nthe sunny is is\n\nYour script should output the following, sorted by descending frequency:\nthe 4\nis 3\nsunny 2\nday 1\n\nNote:\n\nDon't worry about handling ties, it is guaranteed that each word's frequency count is unique.\nCould you write it in one-line using Unix pipes?\n\n",
        "images": {
            "image": [],
            "previous_element": []
        }
    },
    "193": {
        "title": "Valid Phone Numbers",
        "title_slug": "valid-phone-numbers",
        "link": "https://leetcode.com/problems/valid-phone-numbers",
        "difficulty": "Easy",
        "similar_topics": [
            "Shell"
        ],
        "question": "Given a text file file.txt that contains a list of phone numbers (one per line), write a one-liner bash script to print all valid phone numbers.\nYou may assume that a valid phone number must appear in one of the following two formats: (xxx) xxx-xxxx or xxx-xxx-xxxx. (x means a digit)\nYou may also assume each line in the text file must not contain leading or trailing white spaces.\nExample:\nAssume that file.txt has the following content:\n987-123-4567\n123 456 7890\n(123) 456-7890\n\nYour script should output the following valid phone numbers:\n987-123-4567\n(123) 456-7890\n\n",
        "images": {
            "image": [],
            "previous_element": []
        }
    },
    "194": {
        "title": "Transpose File",
        "title_slug": "transpose-file",
        "link": "https://leetcode.com/problems/transpose-file",
        "difficulty": "Medium",
        "similar_topics": [
            "Shell"
        ],
        "question": "Given a text file file.txt, transpose its content.\nYou may assume that each row has the same number of columns, and each field is separated by the ' ' character.\nExample:\nIf file.txt has the following content:\nname age\nalice 21\nryan 30\n\nOutput the following:\nname alice ryan\nage 21 30\n\n",
        "images": {
            "image": [],
            "previous_element": []
        }
    },
    "195": {
        "title": "Tenth Line",
        "title_slug": "tenth-line",
        "link": "https://leetcode.com/problems/tenth-line",
        "difficulty": "Easy",
        "similar_topics": [
            "Shell"
        ],
        "question": "Given a text file\u00a0file.txt, print\u00a0just the 10th line of the\u00a0file.\nExample:\nAssume that file.txt has the following content:\nLine 1\nLine 2\nLine 3\nLine 4\nLine 5\nLine 6\nLine 7\nLine 8\nLine 9\nLine 10\n\nYour script should output the tenth line, which is:\nLine 10\n\nNote:\n1. If the file contains less than 10 lines, what should you output?\n2. There's at least three different solutions. Try to explore all possibilities.\n",
        "images": {
            "image": [],
            "previous_element": []
        }
    },
    "196": {
        "title": "Delete Duplicate Emails",
        "title_slug": "delete-duplicate-emails",
        "link": "https://leetcode.com/problems/delete-duplicate-emails",
        "difficulty": "Easy",
        "similar_topics": [
            "Database"
        ],
        "question": "SQL SchemaTable: Person\n+-------------+---------+\n| Column Name | Type    |\n+-------------+---------+\n| id          | int     |\n| email       | varchar |\n+-------------+---------+\nid is the primary key column for this table.\nEach row of this table contains an email. The emails will not contain uppercase letters.\n\n\u00a0\nWrite an SQL query to delete all the duplicate emails, keeping only one unique email with the smallest id. Note that you are supposed to write a DELETE statement and not a SELECT one.\nAfter running your script, the answer shown is the Person table. The driver will first compile and run your piece of code and then show the Person table. The final order of the Person table does not matter.\nThe query result format is in the following example.\n\u00a0\nExample 1:\nInput: \nPerson table:\n+----+------------------+\n| id | email            |\n+----+------------------+\n| 1  | john@example.com |\n| 2  | bob@example.com  |\n| 3  | john@example.com |\n+----+------------------+\nOutput: \n+----+------------------+\n| id | email            |\n+----+------------------+\n| 1  | john@example.com |\n| 2  | bob@example.com  |\n+----+------------------+\nExplanation: john@example.com is repeated two times. We keep the row with the smallest Id = 1.\n\n",
        "images": {
            "image": [],
            "previous_element": []
        }
    },
    "197": {
        "title": "Rising Temperature",
        "title_slug": "rising-temperature",
        "link": "https://leetcode.com/problems/rising-temperature",
        "difficulty": "Easy",
        "similar_topics": [
            "Database"
        ],
        "question": "SQL SchemaTable: Weather\n+---------------+---------+\n| Column Name   | Type    |\n+---------------+---------+\n| id            | int     |\n| recordDate    | date    |\n| temperature   | int     |\n+---------------+---------+\nid is the primary key for this table.\nThis table contains information about the temperature on a certain day.\n\n\u00a0\nWrite an SQL query to find all dates' Id with higher temperatures compared to its previous dates (yesterday).\nReturn the result table in any order.\nThe query result format is in the following example.\n\u00a0\nExample 1:\nInput: \nWeather table:\n+----+------------+-------------+\n| id | recordDate | temperature |\n+----+------------+-------------+\n| 1  | 2015-01-01 | 10          |\n| 2  | 2015-01-02 | 25          |\n| 3  | 2015-01-03 | 20          |\n| 4  | 2015-01-04 | 30          |\n+----+------------+-------------+\nOutput: \n+----+\n| id |\n+----+\n| 2  |\n| 4  |\n+----+\nExplanation: \nIn 2015-01-02, the temperature was higher than the previous day (10 -> 25).\nIn 2015-01-04, the temperature was higher than the previous day (20 -> 30).\n\n",
        "images": {
            "image": [],
            "previous_element": []
        }
    },
    "198": {
        "title": "House Robber",
        "title_slug": "house-robber",
        "link": "https://leetcode.com/problems/house-robber",
        "difficulty": "Medium",
        "similar_topics": [
            "Array",
            "Dynamic Programming"
        ],
        "question": "You are a professional robber planning to rob houses along a street. Each house has a certain amount of money stashed, the only constraint stopping you from robbing each of them is that adjacent houses have security systems connected and it will automatically contact the police if two adjacent houses were broken into on the same night.\nGiven an integer array nums representing the amount of money of each house, return the maximum amount of money you can rob tonight without alerting the police.\n\u00a0\nExample 1:\nInput: nums = [1,2,3,1]\nOutput: 4\nExplanation: Rob house 1 (money = 1) and then rob house 3 (money = 3).\nTotal amount you can rob = 1 + 3 = 4.\n\nExample 2:\nInput: nums = [2,7,9,3,1]\nOutput: 12\nExplanation: Rob house 1 (money = 2), rob house 3 (money = 9) and rob house 5 (money = 1).\nTotal amount you can rob = 2 + 9 + 1 = 12.\n\n\u00a0\nConstraints:\n\n1 <= nums.length <= 100\n0 <= nums[i] <= 400\n\n",
        "images": {
            "image": [],
            "previous_element": []
        }
    },
    "199": {
        "title": "Binary Tree Right Side View",
        "title_slug": "binary-tree-right-side-view",
        "link": "https://leetcode.com/problems/binary-tree-right-side-view",
        "difficulty": "Medium",
        "similar_topics": [
            "Tree",
            "Depth-First Search",
            "Breadth-First Search",
            "Binary Tree"
        ],
        "question": "Given the root of a binary tree, imagine yourself standing on the right side of it, return the values of the nodes you can see ordered from top to bottom.\n\u00a0\nExample 1:\n\nInput: root = [1,2,3,null,5,null,4]\nOutput: [1,3,4]\n\nExample 2:\nInput: root = [1,null,3]\nOutput: [1,3]\n\nExample 3:\nInput: root = []\nOutput: []\n\n\u00a0\nConstraints:\n\nThe number of nodes in the tree is in the range [0, 100].\n-100 <= Node.val <= 100\n\n",
        "images": {
            "image": [
                "https://assets.leetcode.com/uploads/2021/02/14/tree.jpg"
            ],
            "previous_element": [
                "Example 1:"
            ]
        }
    },
    "200": {
        "title": "Number of Islands",
        "title_slug": "number-of-islands",
        "link": "https://leetcode.com/problems/number-of-islands",
        "difficulty": "Medium",
        "similar_topics": [
            "Array",
            "Depth-First Search",
            "Breadth-First Search",
            "Union Find",
            "Matrix"
        ],
        "question": "Given an m x n 2D binary grid grid which represents a map of '1's (land) and '0's (water), return the number of islands.\nAn island is surrounded by water and is formed by connecting adjacent lands horizontally or vertically. You may assume all four edges of the grid are all surrounded by water.\n\u00a0\nExample 1:\nInput: grid = [\n  [\"1\",\"1\",\"1\",\"1\",\"0\"],\n  [\"1\",\"1\",\"0\",\"1\",\"0\"],\n  [\"1\",\"1\",\"0\",\"0\",\"0\"],\n  [\"0\",\"0\",\"0\",\"0\",\"0\"]\n]\nOutput: 1\n\nExample 2:\nInput: grid = [\n  [\"1\",\"1\",\"0\",\"0\",\"0\"],\n  [\"1\",\"1\",\"0\",\"0\",\"0\"],\n  [\"0\",\"0\",\"1\",\"0\",\"0\"],\n  [\"0\",\"0\",\"0\",\"1\",\"1\"]\n]\nOutput: 3\n\n\u00a0\nConstraints:\n\nm == grid.length\nn == grid[i].length\n1 <= m, n <= 300\ngrid[i][j] is '0' or '1'.\n\n",
        "images": {
            "image": [],
            "previous_element": []
        }
    },
    "201": {
        "title": "Bitwise AND of Numbers Range",
        "title_slug": "bitwise-and-of-numbers-range",
        "link": "https://leetcode.com/problems/bitwise-and-of-numbers-range",
        "difficulty": "Medium",
        "similar_topics": [
            "Bit Manipulation"
        ],
        "question": "Given two integers left and right that represent the range [left, right], return the bitwise AND of all numbers in this range, inclusive.\n\u00a0\nExample 1:\nInput: left = 5, right = 7\nOutput: 4\n\nExample 2:\nInput: left = 0, right = 0\nOutput: 0\n\nExample 3:\nInput: left = 1, right = 2147483647\nOutput: 0\n\n\u00a0\nConstraints:\n\n0 <= left <= right <= 231 - 1\n\n",
        "images": {
            "image": [],
            "previous_element": []
        }
    },
    "202": {
        "title": "Happy Number",
        "title_slug": "happy-number",
        "link": "https://leetcode.com/problems/happy-number",
        "difficulty": "Easy",
        "similar_topics": [
            "Hash Table",
            "Math",
            "Two Pointers"
        ],
        "question": "Write an algorithm to determine if a number n is happy.\nA happy number is a number defined by the following process:\n\nStarting with any positive integer, replace the number by the sum of the squares of its digits.\nRepeat the process until the number equals 1 (where it will stay), or it loops endlessly in a cycle which does not include 1.\nThose numbers for which this process ends in 1 are happy.\n\nReturn true if n is a happy number, and false if not.\n\u00a0\nExample 1:\nInput: n = 19\nOutput: true\nExplanation:\n12 + 92 = 82\n82 + 22 = 68\n62 + 82 = 100\n12 + 02 + 02 = 1\n\nExample 2:\nInput: n = 2\nOutput: false\n\n\u00a0\nConstraints:\n\n1 <= n <= 231 - 1\n\n",
        "images": {
            "image": [],
            "previous_element": []
        }
    },
    "203": {
        "title": "Remove Linked List Elements",
        "title_slug": "remove-linked-list-elements",
        "link": "https://leetcode.com/problems/remove-linked-list-elements",
        "difficulty": "Easy",
        "similar_topics": [
            "Linked List",
            "Recursion"
        ],
        "question": "Given the head of a linked list and an integer val, remove all the nodes of the linked list that has Node.val == val, and return the new head.\n\u00a0\nExample 1:\n\nInput: head = [1,2,6,3,4,5,6], val = 6\nOutput: [1,2,3,4,5]\n\nExample 2:\nInput: head = [], val = 1\nOutput: []\n\nExample 3:\nInput: head = [7,7,7,7], val = 7\nOutput: []\n\n\u00a0\nConstraints:\n\nThe number of nodes in the list is in the range [0, 104].\n1 <= Node.val <= 50\n0 <= val <= 50\n\n",
        "images": {
            "image": [
                "https://assets.leetcode.com/uploads/2021/03/06/removelinked-list.jpg"
            ],
            "previous_element": [
                "Example 1:"
            ]
        }
    },
    "204": {
        "title": "Count Primes",
        "title_slug": "count-primes",
        "link": "https://leetcode.com/problems/count-primes",
        "difficulty": "Medium",
        "similar_topics": [
            "Array",
            "Math",
            "Enumeration",
            "Number Theory"
        ],
        "question": "Given an integer n, return the number of prime numbers that are strictly less than n.\n\u00a0\nExample 1:\nInput: n = 10\nOutput: 4\nExplanation: There are 4 prime numbers less than 10, they are 2, 3, 5, 7.\n\nExample 2:\nInput: n = 0\nOutput: 0\n\nExample 3:\nInput: n = 1\nOutput: 0\n\n\u00a0\nConstraints:\n\n0 <= n <= 5 * 106\n\n",
        "images": {
            "image": [],
            "previous_element": []
        }
    },
    "205": {
        "title": "Isomorphic Strings",
        "title_slug": "isomorphic-strings",
        "link": "https://leetcode.com/problems/isomorphic-strings",
        "difficulty": "Easy",
        "similar_topics": [
            "Hash Table",
            "String"
        ],
        "question": "Given two strings s and t, determine if they are isomorphic.\nTwo strings s and t are isomorphic if the characters in s can be replaced to get t.\nAll occurrences of a character must be replaced with another character while preserving the order of characters. No two characters may map to the same character, but a character may map to itself.\n\u00a0\nExample 1:\nInput: s = \"egg\", t = \"add\"\nOutput: true\nExample 2:\nInput: s = \"foo\", t = \"bar\"\nOutput: false\nExample 3:\nInput: s = \"paper\", t = \"title\"\nOutput: true\n\n\u00a0\nConstraints:\n\n1 <= s.length <= 5 * 104\nt.length == s.length\ns and t consist of any valid ascii character.\n\n",
        "images": {
            "image": [],
            "previous_element": []
        }
    },
    "206": {
        "title": "Reverse Linked List",
        "title_slug": "reverse-linked-list",
        "link": "https://leetcode.com/problems/reverse-linked-list",
        "difficulty": "Easy",
        "similar_topics": [
            "Linked List",
            "Recursion"
        ],
        "question": "Given the head of a singly linked list, reverse the list, and return the reversed list.\n\u00a0\nExample 1:\n\nInput: head = [1,2,3,4,5]\nOutput: [5,4,3,2,1]\n\nExample 2:\n\nInput: head = [1,2]\nOutput: [2,1]\n\nExample 3:\nInput: head = []\nOutput: []\n\n\u00a0\nConstraints:\n\nThe number of nodes in the list is the range [0, 5000].\n-5000 <= Node.val <= 5000\n\n\u00a0\nFollow up: A linked list can be reversed either iteratively or recursively. Could you implement both?\n",
        "images": {
            "image": [
                "https://assets.leetcode.com/uploads/2021/02/19/rev1ex1.jpg",
                "https://assets.leetcode.com/uploads/2021/02/19/rev1ex2.jpg"
            ],
            "previous_element": [
                "Example 1:",
                "Example 2:"
            ]
        }
    },
    "207": {
        "title": "Course Schedule",
        "title_slug": "course-schedule",
        "link": "https://leetcode.com/problems/course-schedule",
        "difficulty": "Medium",
        "similar_topics": [
            "Depth-First Search",
            "Breadth-First Search",
            "Graph",
            "Topological Sort"
        ],
        "question": "There are a total of numCourses courses you have to take, labeled from 0 to numCourses - 1. You are given an array prerequisites where prerequisites[i] = [ai, bi] indicates that you must take course bi first if you want to take course ai.\n\nFor example, the pair [0, 1], indicates that to take course 0 you have to first take course 1.\n\nReturn true if you can finish all courses. Otherwise, return false.\n\u00a0\nExample 1:\nInput: numCourses = 2, prerequisites = [[1,0]]\nOutput: true\nExplanation: There are a total of 2 courses to take. \nTo take course 1 you should have finished course 0. So it is possible.\n\nExample 2:\nInput: numCourses = 2, prerequisites = [[1,0],[0,1]]\nOutput: false\nExplanation: There are a total of 2 courses to take. \nTo take course 1 you should have finished course 0, and to take course 0 you should also have finished course 1. So it is impossible.\n\n\u00a0\nConstraints:\n\n1 <= numCourses <= 2000\n0 <= prerequisites.length <= 5000\nprerequisites[i].length == 2\n0 <= ai, bi < numCourses\nAll the pairs prerequisites[i] are unique.\n\n",
        "images": {
            "image": [],
            "previous_element": []
        }
    },
    "208": {
        "title": "Implement Trie (Prefix Tree)",
        "title_slug": "implement-trie-(prefix-tree)",
        "link": "https://leetcode.com/problems/implement-trie-(prefix-tree)",
        "difficulty": "Medium",
        "similar_topics": [
            "Hash Table",
            "String",
            "Design",
            "Trie"
        ],
        "question": "A trie (pronounced as \"try\") or prefix tree is a tree data structure used to efficiently store and retrieve keys in a dataset of strings. There are various applications of this data structure, such as autocomplete and spellchecker.\nImplement the Trie class:\n\nTrie() Initializes the trie object.\nvoid insert(String word) Inserts the string word into the trie.\nboolean search(String word) Returns true if the string word is in the trie (i.e., was inserted before), and false otherwise.\nboolean startsWith(String prefix) Returns true if there is a previously inserted string word that has the prefix prefix, and false otherwise.\n\n\u00a0\nExample 1:\nInput\n[\"Trie\", \"insert\", \"search\", \"search\", \"startsWith\", \"insert\", \"search\"]\n[[], [\"apple\"], [\"apple\"], [\"app\"], [\"app\"], [\"app\"], [\"app\"]]\nOutput\n[null, null, true, false, true, null, true]\n\nExplanation\nTrie trie = new Trie();\ntrie.insert(\"apple\");\ntrie.search(\"apple\");   // return True\ntrie.search(\"app\");     // return False\ntrie.startsWith(\"app\"); // return True\ntrie.insert(\"app\");\ntrie.search(\"app\");     // return True\n\n\u00a0\nConstraints:\n\n1 <= word.length, prefix.length <= 2000\nword and prefix consist only of lowercase English letters.\nAt most 3 * 104 calls in total will be made to insert, search, and startsWith.\n\n",
        "images": {
            "image": [],
            "previous_element": []
        }
    },
    "209": {
        "title": "Minimum Size Subarray Sum",
        "title_slug": "minimum-size-subarray-sum",
        "link": "https://leetcode.com/problems/minimum-size-subarray-sum",
        "difficulty": "Medium",
        "similar_topics": [
            "Array",
            "Binary Search",
            "Sliding Window",
            "Prefix Sum"
        ],
        "question": "Given an array of positive integers nums and a positive integer target, return the minimal length of a contiguous subarray [numsl, numsl+1, ..., numsr-1, numsr] of which the sum is greater than or equal to target. If there is no such subarray, return 0 instead.\n\u00a0\nExample 1:\nInput: target = 7, nums = [2,3,1,2,4,3]\nOutput: 2\nExplanation: The subarray [4,3] has the minimal length under the problem constraint.\n\nExample 2:\nInput: target = 4, nums = [1,4,4]\nOutput: 1\n\nExample 3:\nInput: target = 11, nums = [1,1,1,1,1,1,1,1]\nOutput: 0\n\n\u00a0\nConstraints:\n\n1 <= target <= 109\n1 <= nums.length <= 105\n1 <= nums[i] <= 104\n\n\u00a0\nFollow up: If you have figured out the O(n) solution, try coding another solution of which the time complexity is O(n log(n)).",
        "images": {
            "image": [],
            "previous_element": []
        }
    },
    "210": {
        "title": "Course Schedule II",
        "title_slug": "course-schedule-ii",
        "link": "https://leetcode.com/problems/course-schedule-ii",
        "difficulty": "Medium",
        "similar_topics": [
            "Depth-First Search",
            "Breadth-First Search",
            "Graph",
            "Topological Sort"
        ],
        "question": "There are a total of numCourses courses you have to take, labeled from 0 to numCourses - 1. You are given an array prerequisites where prerequisites[i] = [ai, bi] indicates that you must take course bi first if you want to take course ai.\n\nFor example, the pair [0, 1], indicates that to take course 0 you have to first take course 1.\n\nReturn the ordering of courses you should take to finish all courses. If there are many valid answers, return any of them. If it is impossible to finish all courses, return an empty array.\n\u00a0\nExample 1:\nInput: numCourses = 2, prerequisites = [[1,0]]\nOutput: [0,1]\nExplanation: There are a total of 2 courses to take. To take course 1 you should have finished course 0. So the correct course order is [0,1].\n\nExample 2:\nInput: numCourses = 4, prerequisites = [[1,0],[2,0],[3,1],[3,2]]\nOutput: [0,2,1,3]\nExplanation: There are a total of 4 courses to take. To take course 3 you should have finished both courses 1 and 2. Both courses 1 and 2 should be taken after you finished course 0.\nSo one correct course order is [0,1,2,3]. Another correct ordering is [0,2,1,3].\n\nExample 3:\nInput: numCourses = 1, prerequisites = []\nOutput: [0]\n\n\u00a0\nConstraints:\n\n1 <= numCourses <= 2000\n0 <= prerequisites.length <= numCourses * (numCourses - 1)\nprerequisites[i].length == 2\n0 <= ai, bi < numCourses\nai != bi\nAll the pairs [ai, bi] are distinct.\n\n",
        "images": {
            "image": [],
            "previous_element": []
        }
    },
    "211": {
        "title": "Design Add and Search Words Data Structure",
        "title_slug": "design-add-and-search-words-data-structure",
        "link": "https://leetcode.com/problems/design-add-and-search-words-data-structure",
        "difficulty": "Medium",
        "similar_topics": [
            "String",
            "Depth-First Search",
            "Design",
            "Trie"
        ],
        "question": "Design a data structure that supports adding new words and finding if a string matches any previously added string.\nImplement the WordDictionary class:\n\nWordDictionary()\u00a0Initializes the object.\nvoid addWord(word) Adds word to the data structure, it can be matched later.\nbool search(word)\u00a0Returns true if there is any string in the data structure that matches word\u00a0or false otherwise. word may contain dots '.' where dots can be matched with any letter.\n\n\u00a0\nExample:\nInput\n[\"WordDictionary\",\"addWord\",\"addWord\",\"addWord\",\"search\",\"search\",\"search\",\"search\"]\n[[],[\"bad\"],[\"dad\"],[\"mad\"],[\"pad\"],[\"bad\"],[\".ad\"],[\"b..\"]]\nOutput\n[null,null,null,null,false,true,true,true]\n\nExplanation\nWordDictionary wordDictionary = new WordDictionary();\nwordDictionary.addWord(\"bad\");\nwordDictionary.addWord(\"dad\");\nwordDictionary.addWord(\"mad\");\nwordDictionary.search(\"pad\"); // return False\nwordDictionary.search(\"bad\"); // return True\nwordDictionary.search(\".ad\"); // return True\nwordDictionary.search(\"b..\"); // return True\n\n\u00a0\nConstraints:\n\n1 <= word.length <= 25\nword in addWord consists of lowercase English letters.\nword in search consist of '.' or lowercase English letters.\nThere will be at most 3 dots in word for search queries.\nAt most 104 calls will be made to addWord and search.\n\n",
        "images": {
            "image": [],
            "previous_element": []
        }
    },
    "212": {
        "title": "Word Search II",
        "title_slug": "word-search-ii",
        "link": "https://leetcode.com/problems/word-search-ii",
        "difficulty": "Hard",
        "similar_topics": [
            "Array",
            "String",
            "Backtracking",
            "Trie",
            "Matrix"
        ],
        "question": "Given an m x n board\u00a0of characters and a list of strings words, return all words on the board.\nEach word must be constructed from letters of sequentially adjacent cells, where adjacent cells are horizontally or vertically neighboring. The same letter cell may not be used more than once in a word.\n\u00a0\nExample 1:\n\nInput: board = [[\"o\",\"a\",\"a\",\"n\"],[\"e\",\"t\",\"a\",\"e\"],[\"i\",\"h\",\"k\",\"r\"],[\"i\",\"f\",\"l\",\"v\"]], words = [\"oath\",\"pea\",\"eat\",\"rain\"]\nOutput: [\"eat\",\"oath\"]\n\nExample 2:\n\nInput: board = [[\"a\",\"b\"],[\"c\",\"d\"]], words = [\"abcb\"]\nOutput: []\n\n\u00a0\nConstraints:\n\nm == board.length\nn == board[i].length\n1 <= m, n <= 12\nboard[i][j] is a lowercase English letter.\n1 <= words.length <= 3 * 104\n1 <= words[i].length <= 10\nwords[i] consists of lowercase English letters.\nAll the strings of words are unique.\n\n",
        "images": {
            "image": [
                "https://assets.leetcode.com/uploads/2020/11/07/search1.jpg",
                "https://assets.leetcode.com/uploads/2020/11/07/search2.jpg"
            ],
            "previous_element": [
                "Example 1:",
                "Example 2:"
            ]
        }
    },
    "213": {
        "title": "House Robber II",
        "title_slug": "house-robber-ii",
        "link": "https://leetcode.com/problems/house-robber-ii",
        "difficulty": "Medium",
        "similar_topics": [
            "Array",
            "Dynamic Programming"
        ],
        "question": "You are a professional robber planning to rob houses along a street. Each house has a certain amount of money stashed. All houses at this place are arranged in a circle. That means the first house is the neighbor of the last one. Meanwhile, adjacent houses have a security system connected, and\u00a0it will automatically contact the police if two adjacent houses were broken into on the same night.\nGiven an integer array nums representing the amount of money of each house, return the maximum amount of money you can rob tonight without alerting the police.\n\u00a0\nExample 1:\nInput: nums = [2,3,2]\nOutput: 3\nExplanation: You cannot rob house 1 (money = 2) and then rob house 3 (money = 2), because they are adjacent houses.\n\nExample 2:\nInput: nums = [1,2,3,1]\nOutput: 4\nExplanation: Rob house 1 (money = 1) and then rob house 3 (money = 3).\nTotal amount you can rob = 1 + 3 = 4.\n\nExample 3:\nInput: nums = [1,2,3]\nOutput: 3\n\n\u00a0\nConstraints:\n\n1 <= nums.length <= 100\n0 <= nums[i] <= 1000\n\n",
        "images": {
            "image": [],
            "previous_element": []
        }
    },
    "214": {
        "title": "Shortest Palindrome",
        "title_slug": "shortest-palindrome",
        "link": "https://leetcode.com/problems/shortest-palindrome",
        "difficulty": "Hard",
        "similar_topics": [
            "String",
            "Rolling Hash",
            "String Matching",
            "Hash Function"
        ],
        "question": "You are given a string s. You can convert s to a palindrome by adding characters in front of it.\nReturn the shortest palindrome you can find by performing this transformation.\n\u00a0\nExample 1:\nInput: s = \"aacecaaa\"\nOutput: \"aaacecaaa\"\nExample 2:\nInput: s = \"abcd\"\nOutput: \"dcbabcd\"\n\n\u00a0\nConstraints:\n\n0 <= s.length <= 5 * 104\ns consists of lowercase English letters only.\n\n",
        "images": {
            "image": [],
            "previous_element": []
        }
    },
    "215": {
        "title": "Kth Largest Element in an Array",
        "title_slug": "kth-largest-element-in-an-array",
        "link": "https://leetcode.com/problems/kth-largest-element-in-an-array",
        "difficulty": "Medium",
        "similar_topics": [
            "Array",
            "Divide and Conquer",
            "Sorting",
            "Heap (Priority Queue)",
            "Quickselect"
        ],
        "question": "Given an integer array nums and an integer k, return the kth largest element in the array.\nNote that it is the kth largest element in the sorted order, not the kth distinct element.\nYou must solve it in O(n) time complexity.\n\u00a0\nExample 1:\nInput: nums = [3,2,1,5,6,4], k = 2\nOutput: 5\nExample 2:\nInput: nums = [3,2,3,1,2,4,5,5,6], k = 4\nOutput: 4\n\n\u00a0\nConstraints:\n\n1 <= k <= nums.length <= 105\n-104 <= nums[i] <= 104\n\n",
        "images": {
            "image": [],
            "previous_element": []
        }
    },
    "216": {
        "title": "Combination Sum III",
        "title_slug": "combination-sum-iii",
        "link": "https://leetcode.com/problems/combination-sum-iii",
        "difficulty": "Medium",
        "similar_topics": [
            "Array",
            "Backtracking"
        ],
        "question": "Find all valid combinations of k numbers that sum up to n such that the following conditions are true:\n\nOnly numbers 1 through 9 are used.\nEach number is used at most once.\n\nReturn a list of all possible valid combinations. The list must not contain the same combination twice, and the combinations may be returned in any order.\n\u00a0\nExample 1:\nInput: k = 3, n = 7\nOutput: [[1,2,4]]\nExplanation:\n1 + 2 + 4 = 7\nThere are no other valid combinations.\nExample 2:\nInput: k = 3, n = 9\nOutput: [[1,2,6],[1,3,5],[2,3,4]]\nExplanation:\n1 + 2 + 6 = 9\n1 + 3 + 5 = 9\n2 + 3 + 4 = 9\nThere are no other valid combinations.\n\nExample 3:\nInput: k = 4, n = 1\nOutput: []\nExplanation: There are no valid combinations.\nUsing 4 different numbers in the range [1,9], the smallest sum we can get is 1+2+3+4 = 10 and since 10 > 1, there are no valid combination.\n\n\u00a0\nConstraints:\n\n2 <= k <= 9\n1 <= n <= 60\n\n",
        "images": {
            "image": [],
            "previous_element": []
        }
    },
    "217": {
        "title": "Contains Duplicate",
        "title_slug": "contains-duplicate",
        "link": "https://leetcode.com/problems/contains-duplicate",
        "difficulty": "Easy",
        "similar_topics": [
            "Array",
            "Hash Table",
            "Sorting"
        ],
        "question": "Given an integer array nums, return true if any value appears at least twice in the array, and return false if every element is distinct.\n\u00a0\nExample 1:\nInput: nums = [1,2,3,1]\nOutput: true\nExample 2:\nInput: nums = [1,2,3,4]\nOutput: false\nExample 3:\nInput: nums = [1,1,1,3,3,4,3,2,4,2]\nOutput: true\n\n\u00a0\nConstraints:\n\n1 <= nums.length <= 105\n-109 <= nums[i] <= 109\n\n",
        "images": {
            "image": [],
            "previous_element": []
        }
    },
    "218": {
        "title": "The Skyline Problem",
        "title_slug": "the-skyline-problem",
        "link": "https://leetcode.com/problems/the-skyline-problem",
        "difficulty": "Hard",
        "similar_topics": [
            "Array",
            "Divide and Conquer",
            "Binary Indexed Tree",
            "Segment Tree",
            "Line Sweep",
            "Heap (Priority Queue)",
            "Ordered Set"
        ],
        "question": "A city's skyline is the outer contour of the silhouette formed by all the buildings in that city when viewed from a distance. Given the locations and heights of all the buildings, return the skyline formed by these buildings collectively.\nThe geometric information of each building is given in the array buildings where buildings[i] = [lefti, righti, heighti]:\n\nlefti is the x coordinate of the left edge of the ith building.\nrighti is the x coordinate of the right edge of the ith building.\nheighti is the height of the ith building.\n\nYou may assume all buildings are perfect rectangles grounded on an absolutely flat surface at height 0.\nThe skyline should be represented as a list of \"key points\" sorted by their x-coordinate in the form [[x1,y1],[x2,y2],...]. Each key point is the left endpoint of some horizontal segment in the skyline except the last point in the list, which always has a y-coordinate 0 and is used to mark the skyline's termination where the rightmost building ends. Any ground between the leftmost and rightmost buildings should be part of the skyline's contour.\nNote: There must be no consecutive horizontal lines of equal height in the output skyline. For instance, [...,[2 3],[4 5],[7 5],[11 5],[12 7],...] is not acceptable; the three lines of height 5 should be merged into one in the final output as such: [...,[2 3],[4 5],[12 7],...]\n\u00a0\nExample 1:\n\nInput: buildings = [[2,9,10],[3,7,15],[5,12,12],[15,20,10],[19,24,8]]\nOutput: [[2,10],[3,15],[7,12],[12,0],[15,10],[20,8],[24,0]]\nExplanation:\nFigure A shows the buildings of the input.\nFigure B shows the skyline formed by those buildings. The red points in figure B represent the key points in the output list.\n\nExample 2:\nInput: buildings = [[0,2,3],[2,5,3]]\nOutput: [[0,3],[5,0]]\n\n\u00a0\nConstraints:\n\n1 <= buildings.length <= 104\n0 <= lefti < righti <= 231 - 1\n1 <= heighti <= 231 - 1\nbuildings is sorted by lefti in\u00a0non-decreasing order.\n\n",
        "images": {
            "image": [
                "https://assets.leetcode.com/uploads/2020/12/01/merged.jpg"
            ],
            "previous_element": [
                "Example 1:"
            ]
        }
    },
    "219": {
        "title": "Contains Duplicate II",
        "title_slug": "contains-duplicate-ii",
        "link": "https://leetcode.com/problems/contains-duplicate-ii",
        "difficulty": "Easy",
        "similar_topics": [
            "Array",
            "Hash Table",
            "Sliding Window"
        ],
        "question": "Given an integer array nums and an integer k, return true if there are two distinct indices i and j in the array such that nums[i] == nums[j] and abs(i - j) <= k.\n\u00a0\nExample 1:\nInput: nums = [1,2,3,1], k = 3\nOutput: true\n\nExample 2:\nInput: nums = [1,0,1,1], k = 1\nOutput: true\n\nExample 3:\nInput: nums = [1,2,3,1,2,3], k = 2\nOutput: false\n\n\u00a0\nConstraints:\n\n1 <= nums.length <= 105\n-109 <= nums[i] <= 109\n0 <= k <= 105\n\n",
        "images": {
            "image": [],
            "previous_element": []
        }
    },
    "220": {
        "title": "Contains Duplicate III",
        "title_slug": "contains-duplicate-iii",
        "link": "https://leetcode.com/problems/contains-duplicate-iii",
        "difficulty": "Hard",
        "similar_topics": [
            "Array",
            "Sliding Window",
            "Sorting",
            "Bucket Sort",
            "Ordered Set"
        ],
        "question": "You are given an integer array nums and two integers indexDiff and valueDiff.\nFind a pair of indices (i, j) such that:\n\ni != j,\nabs(i - j) <= indexDiff.\nabs(nums[i] - nums[j]) <= valueDiff, and\n\nReturn true if such pair exists or false otherwise.\n\u00a0\nExample 1:\nInput: nums = [1,2,3,1], indexDiff = 3, valueDiff = 0\nOutput: true\nExplanation: We can choose (i, j) = (0, 3).\nWe satisfy the three conditions:\ni != j --> 0 != 3\nabs(i - j) <= indexDiff --> abs(0 - 3) <= 3\nabs(nums[i] - nums[j]) <= valueDiff --> abs(1 - 1) <= 0\n\nExample 2:\nInput: nums = [1,5,9,1,5,9], indexDiff = 2, valueDiff = 3\nOutput: false\nExplanation: After trying all the possible pairs (i, j), we cannot satisfy the three conditions, so we return false.\n\n\u00a0\nConstraints:\n\n2 <= nums.length <= 105\n-109 <= nums[i] <= 109\n1 <= indexDiff <= nums.length\n0 <= valueDiff <= 109\n\n",
        "images": {
            "image": [],
            "previous_element": []
        }
    },
    "221": {
        "title": "Maximal Square",
        "title_slug": "maximal-square",
        "link": "https://leetcode.com/problems/maximal-square",
        "difficulty": "Medium",
        "similar_topics": [
            "Array",
            "Dynamic Programming",
            "Matrix"
        ],
        "question": "Given an m x n binary matrix filled with 0's and 1's, find the largest square containing only 1's and return its area.\n\u00a0\nExample 1:\n\nInput: matrix = [[\"1\",\"0\",\"1\",\"0\",\"0\"],[\"1\",\"0\",\"1\",\"1\",\"1\"],[\"1\",\"1\",\"1\",\"1\",\"1\"],[\"1\",\"0\",\"0\",\"1\",\"0\"]]\nOutput: 4\n\nExample 2:\n\nInput: matrix = [[\"0\",\"1\"],[\"1\",\"0\"]]\nOutput: 1\n\nExample 3:\nInput: matrix = [[\"0\"]]\nOutput: 0\n\n\u00a0\nConstraints:\n\nm == matrix.length\nn == matrix[i].length\n1 <= m, n <= 300\nmatrix[i][j] is '0' or '1'.\n\n",
        "images": {
            "image": [
                "https://assets.leetcode.com/uploads/2020/11/26/max1grid.jpg",
                "https://assets.leetcode.com/uploads/2020/11/26/max2grid.jpg"
            ],
            "previous_element": [
                "Example 1:",
                "Example 2:"
            ]
        }
    },
    "222": {
        "title": "Count Complete Tree Nodes",
        "title_slug": "count-complete-tree-nodes",
        "link": "https://leetcode.com/problems/count-complete-tree-nodes",
        "difficulty": "Medium",
        "similar_topics": [
            "Binary Search",
            "Tree",
            "Depth-First Search",
            "Binary Tree"
        ],
        "question": "Given the root of a complete binary tree, return the number of the nodes in the tree.\nAccording to Wikipedia, every level, except possibly the last, is completely filled in a complete binary tree, and all nodes in the last level are as far left as possible. It can have between 1 and 2h nodes inclusive at the last level h.\nDesign an algorithm that runs in less than\u00a0O(n)\u00a0time complexity.\n\u00a0\nExample 1:\n\nInput: root = [1,2,3,4,5,6]\nOutput: 6\n\nExample 2:\nInput: root = []\nOutput: 0\n\nExample 3:\nInput: root = [1]\nOutput: 1\n\n\u00a0\nConstraints:\n\nThe number of nodes in the tree is in the range [0, 5 * 104].\n0 <= Node.val <= 5 * 104\nThe tree is guaranteed to be complete.\n\n",
        "images": {
            "image": [
                "https://assets.leetcode.com/uploads/2021/01/14/complete.jpg"
            ],
            "previous_element": [
                "Example 1:"
            ]
        }
    },
    "223": {
        "title": "Rectangle Area",
        "title_slug": "rectangle-area",
        "link": "https://leetcode.com/problems/rectangle-area",
        "difficulty": "Medium",
        "similar_topics": [
            "Math",
            "Geometry"
        ],
        "question": "Given the coordinates of two rectilinear rectangles in a 2D plane, return the total area covered by the two rectangles.\nThe first rectangle is defined by its bottom-left corner (ax1, ay1) and its top-right corner (ax2, ay2).\nThe second rectangle is defined by its bottom-left corner (bx1, by1) and its top-right corner (bx2, by2).\n\u00a0\nExample 1:\n\nInput: ax1 = -3, ay1 = 0, ax2 = 3, ay2 = 4, bx1 = 0, by1 = -1, bx2 = 9, by2 = 2\nOutput: 45\n\nExample 2:\nInput: ax1 = -2, ay1 = -2, ax2 = 2, ay2 = 2, bx1 = -2, by1 = -2, bx2 = 2, by2 = 2\nOutput: 16\n\n\u00a0\nConstraints:\n\n-104 <= ax1 <= ax2 <= 104\n-104 <= ay1 <= ay2 <= 104\n-104 <= bx1 <= bx2 <= 104\n-104 <= by1 <= by2 <= 104\n\n",
        "images": {
            "image": [
                "https://assets.leetcode.com/uploads/2021/05/08/rectangle-plane.png"
            ],
            "previous_element": [
                "Example 1:"
            ]
        }
    },
    "224": {
        "title": "Basic Calculator",
        "title_slug": "basic-calculator",
        "link": "https://leetcode.com/problems/basic-calculator",
        "difficulty": "Hard",
        "similar_topics": [
            "Math",
            "String",
            "Stack",
            "Recursion"
        ],
        "question": "Given a string s representing a valid expression, implement a basic calculator to evaluate it, and return the result of the evaluation.\nNote: You are not allowed to use any built-in function which evaluates strings as mathematical expressions, such as eval().\n\u00a0\nExample 1:\nInput: s = \"1 + 1\"\nOutput: 2\n\nExample 2:\nInput: s = \" 2-1 + 2 \"\nOutput: 3\n\nExample 3:\nInput: s = \"(1+(4+5+2)-3)+(6+8)\"\nOutput: 23\n\n\u00a0\nConstraints:\n\n1 <= s.length <= 3 * 105\ns consists of digits, '+', '-', '(', ')', and ' '.\ns represents a valid expression.\n'+' is not used as a unary operation (i.e., \"+1\" and \"+(2 + 3)\" is invalid).\n'-' could be used as a unary operation (i.e., \"-1\" and \"-(2 + 3)\" is valid).\nThere will be no two consecutive operators in the input.\nEvery number and running calculation will fit in a signed 32-bit integer.\n\n",
        "images": {
            "image": [],
            "previous_element": []
        }
    },
    "225": {
        "title": "Implement Stack using Queues",
        "title_slug": "implement-stack-using-queues",
        "link": "https://leetcode.com/problems/implement-stack-using-queues",
        "difficulty": "Easy",
        "similar_topics": [
            "Stack",
            "Design",
            "Queue"
        ],
        "question": "Implement a last-in-first-out (LIFO) stack using only two queues. The implemented stack should support all the functions of a normal stack (push, top, pop, and empty).\nImplement the MyStack class:\n\nvoid push(int x) Pushes element x to the top of the stack.\nint pop() Removes the element on the top of the stack and returns it.\nint top() Returns the element on the top of the stack.\nboolean empty() Returns true if the stack is empty, false otherwise.\n\nNotes:\n\nYou must use only standard operations of a queue, which means that only push to back, peek/pop from front, size and is empty operations are valid.\nDepending on your language, the queue may not be supported natively. You may simulate a queue using a list or deque (double-ended queue) as long as you use only a queue's standard operations.\n\n\u00a0\nExample 1:\nInput\n[\"MyStack\", \"push\", \"push\", \"top\", \"pop\", \"empty\"]\n[[], [1], [2], [], [], []]\nOutput\n[null, null, null, 2, 2, false]\n\nExplanation\nMyStack myStack = new MyStack();\nmyStack.push(1);\nmyStack.push(2);\nmyStack.top(); // return 2\nmyStack.pop(); // return 2\nmyStack.empty(); // return False\n\n\u00a0\nConstraints:\n\n1 <= x <= 9\nAt most 100 calls will be made to push, pop, top, and empty.\nAll the calls to pop and top are valid.\n\n\u00a0\nFollow-up: Can you implement the stack using only one queue?\n",
        "images": {
            "image": [],
            "previous_element": []
        }
    },
    "226": {
        "title": "Invert Binary Tree",
        "title_slug": "invert-binary-tree",
        "link": "https://leetcode.com/problems/invert-binary-tree",
        "difficulty": "Easy",
        "similar_topics": [
            "Tree",
            "Depth-First Search",
            "Breadth-First Search",
            "Binary Tree"
        ],
        "question": "Given the root of a binary tree, invert the tree, and return its root.\n\u00a0\nExample 1:\n\nInput: root = [4,2,7,1,3,6,9]\nOutput: [4,7,2,9,6,3,1]\n\nExample 2:\n\nInput: root = [2,1,3]\nOutput: [2,3,1]\n\nExample 3:\nInput: root = []\nOutput: []\n\n\u00a0\nConstraints:\n\nThe number of nodes in the tree is in the range [0, 100].\n-100 <= Node.val <= 100\n\n",
        "images": {
            "image": [
                "https://assets.leetcode.com/uploads/2021/03/14/invert1-tree.jpg",
                "https://assets.leetcode.com/uploads/2021/03/14/invert2-tree.jpg"
            ],
            "previous_element": [
                "Example 1:",
                "Example 2:"
            ]
        }
    },
    "227": {
        "title": "Basic Calculator II",
        "title_slug": "basic-calculator-ii",
        "link": "https://leetcode.com/problems/basic-calculator-ii",
        "difficulty": "Medium",
        "similar_topics": [
            "Math",
            "String",
            "Stack"
        ],
        "question": "Given a string s which represents an expression, evaluate this expression and return its value.\u00a0\nThe integer division should truncate toward zero.\nYou may assume that the given expression is always valid. All intermediate results will be in the range of [-231, 231 - 1].\nNote: You are not allowed to use any built-in function which evaluates strings as mathematical expressions, such as eval().\n\u00a0\nExample 1:\nInput: s = \"3+2*2\"\nOutput: 7\nExample 2:\nInput: s = \" 3/2 \"\nOutput: 1\nExample 3:\nInput: s = \" 3+5 / 2 \"\nOutput: 5\n\n\u00a0\nConstraints:\n\n1 <= s.length <= 3 * 105\ns consists of integers and operators ('+', '-', '*', '/') separated by some number of spaces.\ns represents a valid expression.\nAll the integers in the expression are non-negative integers in the range [0, 231 - 1].\nThe answer is guaranteed to fit in a 32-bit integer.\n\n",
        "images": {
            "image": [],
            "previous_element": []
        }
    },
    "228": {
        "title": "Summary Ranges",
        "title_slug": "summary-ranges",
        "link": "https://leetcode.com/problems/summary-ranges",
        "difficulty": "Easy",
        "similar_topics": [
            "Array"
        ],
        "question": "You are given a sorted unique integer array nums.\nA range [a,b] is the set of all integers from a to b (inclusive).\nReturn the smallest sorted list of ranges that cover all the numbers in the array exactly. That is, each element of nums is covered by exactly one of the ranges, and there is no integer x such that x is in one of the ranges but not in nums.\nEach range [a,b] in the list should be output as:\n\n\"a->b\" if a != b\n\"a\" if a == b\n\n\u00a0\nExample 1:\nInput: nums = [0,1,2,4,5,7]\nOutput: [\"0->2\",\"4->5\",\"7\"]\nExplanation: The ranges are:\n[0,2] --> \"0->2\"\n[4,5] --> \"4->5\"\n[7,7] --> \"7\"\n\nExample 2:\nInput: nums = [0,2,3,4,6,8,9]\nOutput: [\"0\",\"2->4\",\"6\",\"8->9\"]\nExplanation: The ranges are:\n[0,0] --> \"0\"\n[2,4] --> \"2->4\"\n[6,6] --> \"6\"\n[8,9] --> \"8->9\"\n\n\u00a0\nConstraints:\n\n0 <= nums.length <= 20\n-231 <= nums[i] <= 231 - 1\nAll the values of nums are unique.\nnums is sorted in ascending order.\n\n",
        "images": {
            "image": [],
            "previous_element": []
        }
    },
    "229": {
        "title": "Majority Element II",
        "title_slug": "majority-element-ii",
        "link": "https://leetcode.com/problems/majority-element-ii",
        "difficulty": "Medium",
        "similar_topics": [
            "Array",
            "Hash Table",
            "Sorting",
            "Counting"
        ],
        "question": "Given an integer array of size n, find all elements that appear more than \u230a n/3 \u230b times.\n\u00a0\nExample 1:\nInput: nums = [3,2,3]\nOutput: [3]\n\nExample 2:\nInput: nums = [1]\nOutput: [1]\n\nExample 3:\nInput: nums = [1,2]\nOutput: [1,2]\n\n\u00a0\nConstraints:\n\n1 <= nums.length <= 5 * 104\n-109 <= nums[i] <= 109\n\n\u00a0\nFollow up: Could you solve the problem in linear time and in O(1) space?\n",
        "images": {
            "image": [],
            "previous_element": []
        }
    },
    "230": {
        "title": "Kth Smallest Element in a BST",
        "title_slug": "kth-smallest-element-in-a-bst",
        "link": "https://leetcode.com/problems/kth-smallest-element-in-a-bst",
        "difficulty": "Medium",
        "similar_topics": [
            "Tree",
            "Depth-First Search",
            "Binary Search Tree",
            "Binary Tree"
        ],
        "question": "Given the root of a binary search tree, and an integer k, return the kth smallest value (1-indexed) of all the values of the nodes in the tree.\n\u00a0\nExample 1:\n\nInput: root = [3,1,4,null,2], k = 1\nOutput: 1\n\nExample 2:\n\nInput: root = [5,3,6,2,4,null,null,1], k = 3\nOutput: 3\n\n\u00a0\nConstraints:\n\nThe number of nodes in the tree is n.\n1 <= k <= n <= 104\n0 <= Node.val <= 104\n\n\u00a0\nFollow up: If the BST is modified often (i.e., we can do insert and delete operations) and you need to find the kth smallest frequently, how would you optimize?\n",
        "images": {
            "image": [
                "https://assets.leetcode.com/uploads/2021/01/28/kthtree1.jpg",
                "https://assets.leetcode.com/uploads/2021/01/28/kthtree2.jpg"
            ],
            "previous_element": [
                "Example 1:",
                "Example 2:"
            ]
        }
    },
    "231": {
        "title": "Power of Two",
        "title_slug": "power-of-two",
        "link": "https://leetcode.com/problems/power-of-two",
        "difficulty": "Easy",
        "similar_topics": [
            "Math",
            "Bit Manipulation",
            "Recursion"
        ],
        "question": "Given an integer n, return true if it is a power of two. Otherwise, return false.\nAn integer n is a power of two, if there exists an integer x such that n == 2x.\n\u00a0\nExample 1:\nInput: n = 1\nOutput: true\nExplanation: 20 = 1\n\nExample 2:\nInput: n = 16\nOutput: true\nExplanation: 24 = 16\n\nExample 3:\nInput: n = 3\nOutput: false\n\n\u00a0\nConstraints:\n\n-231 <= n <= 231 - 1\n\n\u00a0\nFollow up: Could you solve it without loops/recursion?",
        "images": {
            "image": [],
            "previous_element": []
        }
    },
    "232": {
        "title": "Implement Queue using Stacks",
        "title_slug": "implement-queue-using-stacks",
        "link": "https://leetcode.com/problems/implement-queue-using-stacks",
        "difficulty": "Easy",
        "similar_topics": [
            "Stack",
            "Design",
            "Queue"
        ],
        "question": "Implement a first in first out (FIFO) queue using only two stacks. The implemented queue should support all the functions of a normal queue (push, peek, pop, and empty).\nImplement the MyQueue class:\n\nvoid push(int x) Pushes element x to the back of the queue.\nint pop() Removes the element from the front of the queue and returns it.\nint peek() Returns the element at the front of the queue.\nboolean empty() Returns true if the queue is empty, false otherwise.\n\nNotes:\n\nYou must use only standard operations of a stack, which means only push to top, peek/pop from top, size, and is empty operations are valid.\nDepending on your language, the stack may not be supported natively. You may simulate a stack using a list or deque (double-ended queue) as long as you use only a stack's standard operations.\n\n\u00a0\nExample 1:\nInput\n[\"MyQueue\", \"push\", \"push\", \"peek\", \"pop\", \"empty\"]\n[[], [1], [2], [], [], []]\nOutput\n[null, null, null, 1, 1, false]\n\nExplanation\nMyQueue myQueue = new MyQueue();\nmyQueue.push(1); // queue is: [1]\nmyQueue.push(2); // queue is: [1, 2] (leftmost is front of the queue)\nmyQueue.peek(); // return 1\nmyQueue.pop(); // return 1, queue is [2]\nmyQueue.empty(); // return false\n\n\u00a0\nConstraints:\n\n1 <= x <= 9\nAt most 100\u00a0calls will be made to push, pop, peek, and empty.\nAll the calls to pop and peek are valid.\n\n\u00a0\nFollow-up: Can you implement the queue such that each operation is amortized O(1) time complexity? In other words, performing n operations will take overall O(n) time even if one of those operations may take longer.\n",
        "images": {
            "image": [],
            "previous_element": []
        }
    },
    "233": {
        "title": "Number of Digit One",
        "title_slug": "number-of-digit-one",
        "link": "https://leetcode.com/problems/number-of-digit-one",
        "difficulty": "Hard",
        "similar_topics": [
            "Math",
            "Dynamic Programming",
            "Recursion"
        ],
        "question": "Given an integer n, count the total number of digit 1 appearing in all non-negative integers less than or equal to n.\n\u00a0\nExample 1:\nInput: n = 13\nOutput: 6\n\nExample 2:\nInput: n = 0\nOutput: 0\n\n\u00a0\nConstraints:\n\n0 <= n <= 109\n\n",
        "images": {
            "image": [],
            "previous_element": []
        }
    },
    "234": {
        "title": "Palindrome Linked List",
        "title_slug": "palindrome-linked-list",
        "link": "https://leetcode.com/problems/palindrome-linked-list",
        "difficulty": "Easy",
        "similar_topics": [
            "Linked List",
            "Two Pointers",
            "Stack",
            "Recursion"
        ],
        "question": "Given the head of a singly linked list, return true if it is a palindrome or false otherwise.\n\u00a0\nExample 1:\n\nInput: head = [1,2,2,1]\nOutput: true\n\nExample 2:\n\nInput: head = [1,2]\nOutput: false\n\n\u00a0\nConstraints:\n\nThe number of nodes in the list is in the range [1, 105].\n0 <= Node.val <= 9\n\n\u00a0\nFollow up: Could you do it in O(n) time and O(1) space?",
        "images": {
            "image": [
                "https://assets.leetcode.com/uploads/2021/03/03/pal1linked-list.jpg",
                "https://assets.leetcode.com/uploads/2021/03/03/pal2linked-list.jpg"
            ],
            "previous_element": [
                "Example 1:",
                "Example 2:"
            ]
        }
    },
    "235": {
        "title": "Lowest Common Ancestor of a Binary Search Tree",
        "title_slug": "lowest-common-ancestor-of-a-binary-search-tree",
        "link": "https://leetcode.com/problems/lowest-common-ancestor-of-a-binary-search-tree",
        "difficulty": "Medium",
        "similar_topics": [
            "Tree",
            "Depth-First Search",
            "Binary Search Tree",
            "Binary Tree"
        ],
        "question": "Given a binary search tree (BST), find the lowest common ancestor (LCA) node of two given nodes in the BST.\nAccording to the definition of LCA on Wikipedia: \u201cThe lowest common ancestor is defined between two nodes p and q as the lowest node in T that has both p and q as descendants (where we allow a node to be a descendant of itself).\u201d\n\u00a0\nExample 1:\n\nInput: root = [6,2,8,0,4,7,9,null,null,3,5], p = 2, q = 8\nOutput: 6\nExplanation: The LCA of nodes 2 and 8 is 6.\n\nExample 2:\n\nInput: root = [6,2,8,0,4,7,9,null,null,3,5], p = 2, q = 4\nOutput: 2\nExplanation: The LCA of nodes 2 and 4 is 2, since a node can be a descendant of itself according to the LCA definition.\n\nExample 3:\nInput: root = [2,1], p = 2, q = 1\nOutput: 2\n\n\u00a0\nConstraints:\n\nThe number of nodes in the tree is in the range [2, 105].\n-109 <= Node.val <= 109\nAll Node.val are unique.\np != q\np and q will exist in the BST.\n\n",
        "images": {
            "image": [
                "https://assets.leetcode.com/uploads/2018/12/14/binarysearchtree_improved.png",
                "https://assets.leetcode.com/uploads/2018/12/14/binarysearchtree_improved.png"
            ],
            "previous_element": [
                "Example 1:",
                "Example 2:"
            ]
        }
    },
    "236": {
        "title": "Lowest Common Ancestor of a Binary Tree",
        "title_slug": "lowest-common-ancestor-of-a-binary-tree",
        "link": "https://leetcode.com/problems/lowest-common-ancestor-of-a-binary-tree",
        "difficulty": "Medium",
        "similar_topics": [
            "Tree",
            "Depth-First Search",
            "Binary Tree"
        ],
        "question": "Given a binary tree, find the lowest common ancestor (LCA) of two given nodes in the tree.\nAccording to the definition of LCA on Wikipedia: \u201cThe lowest common ancestor is defined between two nodes p and q as the lowest node in T that has both p and q as descendants (where we allow a node to be a descendant of itself).\u201d\n\u00a0\nExample 1:\n\nInput: root = [3,5,1,6,2,0,8,null,null,7,4], p = 5, q = 1\nOutput: 3\nExplanation: The LCA of nodes 5 and 1 is 3.\n\nExample 2:\n\nInput: root = [3,5,1,6,2,0,8,null,null,7,4], p = 5, q = 4\nOutput: 5\nExplanation: The LCA of nodes 5 and 4 is 5, since a node can be a descendant of itself according to the LCA definition.\n\nExample 3:\nInput: root = [1,2], p = 1, q = 2\nOutput: 1\n\n\u00a0\nConstraints:\n\nThe number of nodes in the tree is in the range [2, 105].\n-109 <= Node.val <= 109\nAll Node.val are unique.\np != q\np and q will exist in the tree.\n\n",
        "images": {
            "image": [
                "https://assets.leetcode.com/uploads/2018/12/14/binarytree.png",
                "https://assets.leetcode.com/uploads/2018/12/14/binarytree.png"
            ],
            "previous_element": [
                "Example 1:",
                "Example 2:"
            ]
        }
    },
    "237": {
        "title": "Delete Node in a Linked List",
        "title_slug": "delete-node-in-a-linked-list",
        "link": "https://leetcode.com/problems/delete-node-in-a-linked-list",
        "difficulty": "Medium",
        "similar_topics": [
            "Linked List"
        ],
        "question": "There is a singly-linked list head and we want to delete a node node in it.\nYou are given the node to be deleted node. You will not be given access to the first node of head.\nAll the values of the linked list are unique, and it is guaranteed that the given node node is not the last node in the linked list.\nDelete the given node. Note that by deleting the node, we do not mean removing it from memory. We mean:\n\nThe value of the given node should not exist in the linked list.\nThe number of nodes in the linked list should decrease by one.\nAll the values before node should be in the same order.\nAll the values after node should be in the same order.\n\nCustom testing:\n\nFor the input, you should provide the entire linked list head and the node to be given node. node should not be the last node of the list and should be an actual node in the list.\nWe will build the linked list and pass the node to your function.\nThe output will be the entire list after calling your function.\n\n\u00a0\nExample 1:\n\nInput: head = [4,5,1,9], node = 5\nOutput: [4,1,9]\nExplanation: You are given the second node with value 5, the linked list should become 4 -> 1 -> 9 after calling your function.\n\nExample 2:\n\nInput: head = [4,5,1,9], node = 1\nOutput: [4,5,9]\nExplanation: You are given the third node with value 1, the linked list should become 4 -> 5 -> 9 after calling your function.\n\n\u00a0\nConstraints:\n\nThe number of the nodes in the given list is in the range [2, 1000].\n-1000 <= Node.val <= 1000\nThe value of each node in the list is unique.\nThe node to be deleted is in the list and is not a tail node.\n\n",
        "images": {
            "image": [
                "https://assets.leetcode.com/uploads/2020/09/01/node1.jpg",
                "https://assets.leetcode.com/uploads/2020/09/01/node2.jpg"
            ],
            "previous_element": [
                "Example 1:",
                "Example 2:"
            ]
        }
    },
    "238": {
        "title": "Product of Array Except Self",
        "title_slug": "product-of-array-except-self",
        "link": "https://leetcode.com/problems/product-of-array-except-self",
        "difficulty": "Medium",
        "similar_topics": [
            "Array",
            "Prefix Sum"
        ],
        "question": "Given an integer array nums, return an array answer such that answer[i] is equal to the product of all the elements of nums except nums[i].\nThe product of any prefix or suffix of nums is guaranteed to fit in a 32-bit integer.\nYou must write an algorithm that runs in\u00a0O(n)\u00a0time and without using the division operation.\n\u00a0\nExample 1:\nInput: nums = [1,2,3,4]\nOutput: [24,12,8,6]\nExample 2:\nInput: nums = [-1,1,0,-3,3]\nOutput: [0,0,9,0,0]\n\n\u00a0\nConstraints:\n\n2 <= nums.length <= 105\n-30 <= nums[i] <= 30\nThe product of any prefix or suffix of nums is guaranteed to fit in a 32-bit integer.\n\n\u00a0\nFollow up:\u00a0Can you solve the problem in O(1)\u00a0extra\u00a0space complexity? (The output array does not count as extra space for space complexity analysis.)\n",
        "images": {
            "image": [],
            "previous_element": []
        }
    },
    "239": {
        "title": "Sliding Window Maximum",
        "title_slug": "sliding-window-maximum",
        "link": "https://leetcode.com/problems/sliding-window-maximum",
        "difficulty": "Hard",
        "similar_topics": [
            "Array",
            "Queue",
            "Sliding Window",
            "Heap (Priority Queue)",
            "Monotonic Queue"
        ],
        "question": "You are given an array of integers\u00a0nums, there is a sliding window of size k which is moving from the very left of the array to the very right. You can only see the k numbers in the window. Each time the sliding window moves right by one position.\nReturn the max sliding window.\n\u00a0\nExample 1:\nInput: nums = [1,3,-1,-3,5,3,6,7], k = 3\nOutput: [3,3,5,5,6,7]\nExplanation: \nWindow position                Max\n---------------               -----\n[1  3  -1] -3  5  3  6  7       3\n 1 [3  -1  -3] 5  3  6  7       3\n 1  3 [-1  -3  5] 3  6  7       5\n 1  3  -1 [-3  5  3] 6  7       5\n 1  3  -1  -3 [5  3  6] 7       6\n 1  3  -1  -3  5 [3  6  7]      7\n\nExample 2:\nInput: nums = [1], k = 1\nOutput: [1]\n\n\u00a0\nConstraints:\n\n1 <= nums.length <= 105\n-104 <= nums[i] <= 104\n1 <= k <= nums.length\n\n",
        "images": {
            "image": [],
            "previous_element": []
        }
    },
    "240": {
        "title": "Search a 2D Matrix II",
        "title_slug": "search-a-2d-matrix-ii",
        "link": "https://leetcode.com/problems/search-a-2d-matrix-ii",
        "difficulty": "Medium",
        "similar_topics": [
            "Array",
            "Binary Search",
            "Divide and Conquer",
            "Matrix"
        ],
        "question": "Write an efficient algorithm that searches for a value target in an m x n integer matrix matrix. This matrix has the following properties:\n\nIntegers in each row are sorted in ascending from left to right.\nIntegers in each column are sorted in ascending from top to bottom.\n\n\u00a0\nExample 1:\n\nInput: matrix = [[1,4,7,11,15],[2,5,8,12,19],[3,6,9,16,22],[10,13,14,17,24],[18,21,23,26,30]], target = 5\nOutput: true\n\nExample 2:\n\nInput: matrix = [[1,4,7,11,15],[2,5,8,12,19],[3,6,9,16,22],[10,13,14,17,24],[18,21,23,26,30]], target = 20\nOutput: false\n\n\u00a0\nConstraints:\n\nm == matrix.length\nn == matrix[i].length\n1 <= n, m <= 300\n-109 <= matrix[i][j] <= 109\nAll the integers in each row are sorted in ascending order.\nAll the integers in each column are sorted in ascending order.\n-109 <= target <= 109\n\n",
        "images": {
            "image": [
                "https://assets.leetcode.com/uploads/2020/11/24/searchgrid2.jpg",
                "https://assets.leetcode.com/uploads/2020/11/24/searchgrid.jpg"
            ],
            "previous_element": [
                "Example 1:",
                "Example 2:"
            ]
        }
    },
    "241": {
        "title": "Different Ways to Add Parentheses",
        "title_slug": "different-ways-to-add-parentheses",
        "link": "https://leetcode.com/problems/different-ways-to-add-parentheses",
        "difficulty": "Medium",
        "similar_topics": [
            "Math",
            "String",
            "Dynamic Programming",
            "Recursion",
            "Memoization"
        ],
        "question": "Given a string expression of numbers and operators, return all possible results from computing all the different possible ways to group numbers and operators. You may return the answer in any order.\nThe test cases are generated such that the output values fit in a 32-bit integer and the number of different results does not exceed 104.\n\u00a0\nExample 1:\nInput: expression = \"2-1-1\"\nOutput: [0,2]\nExplanation:\n((2-1)-1) = 0 \n(2-(1-1)) = 2\n\nExample 2:\nInput: expression = \"2*3-4*5\"\nOutput: [-34,-14,-10,-10,10]\nExplanation:\n(2*(3-(4*5))) = -34 \n((2*3)-(4*5)) = -14 \n((2*(3-4))*5) = -10 \n(2*((3-4)*5)) = -10 \n(((2*3)-4)*5) = 10\n\n\u00a0\nConstraints:\n\n1 <= expression.length <= 20\nexpression consists of digits and the operator '+', '-', and '*'.\nAll the integer values in the input expression are in the range [0, 99].\n\n",
        "images": {
            "image": [],
            "previous_element": []
        }
    }
}